// Generated from ../../syntaxes/Apex.g4 by ANTLR 4.5.3
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ApexListener = require('./ApexListener').ApexListener;
var grammarFileName = "Apex.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003z\u054f\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004",
    "k\tk\u0004l\tl\u0004m\tm\u0003\u0002\u0005\u0002\u00dc\n\u0002\u0003",
    "\u0002\u0007\u0002\u00df\n\u0002\f\u0002\u000e\u0002\u00e2\u000b\u0002",
    "\u0003\u0002\u0007\u0002\u00e5\n\u0002\f\u0002\u000e\u0002\u00e8\u000b",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0007\u0003\u00ed\n\u0003",
    "\f\u0003\u000e\u0003\u00f0\u000b\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0005\u0004\u00f8\n\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00fd\n\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0005\u0007\u0005\u0102\n\u0005\f\u0005\u000e",
    "\u0005\u0105\u000b\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0109\n",
    "\u0005\f\u0005\u000e\u0005\u010c\u000b\u0005\u0003\u0005\u0003\u0005",
    "\u0007\u0005\u0110\n\u0005\f\u0005\u000e\u0005\u0113\u000b\u0005\u0003",
    "\u0005\u0003\u0005\u0007\u0005\u0117\n\u0005\f\u0005\u000e\u0005\u011a",
    "\u000b\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u011e\n\u0005\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u0122\n\u0006\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0005\u0007\u0127\n\u0007\u0003\b\u0003\b\u0003\b\u0003",
    "\t\u0003\t\u0005\t\u012e\n\t\u0003\n\u0003\n\u0003\n\u0005\n\u0133\n",
    "\n\u0003\n\u0003\n\u0005\n\u0137\n\n\u0003\n\u0003\n\u0005\n\u013b\n",
    "\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007",
    "\u000b\u0143\n\u000b\f\u000b\u000e\u000b\u0146\u000b\u000b\u0003\u000b",
    "\u0003\u000b\u0003\f\u0003\f\u0003\f\u0005\f\u014d\n\f\u0003\r\u0003",
    "\r\u0003\r\u0007\r\u0152\n\r\f\r\u000e\r\u0155\u000b\r\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u015b\n\u000e\u0003\u000e",
    "\u0003\u000e\u0005\u000e\u015f\n\u000e\u0003\u000e\u0005\u000e\u0162",
    "\n\u000e\u0003\u000e\u0005\u000e\u0165\n\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u016c\n\u000f\f\u000f",
    "\u000e\u000f\u016f\u000b\u000f\u0003\u0010\u0007\u0010\u0172\n\u0010",
    "\f\u0010\u000e\u0010\u0175\u000b\u0010\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u0179\n\u0010\u0003\u0010\u0005\u0010\u017c\n\u0010\u0003\u0011",
    "\u0003\u0011\u0007\u0011\u0180\n\u0011\f\u0011\u000e\u0011\u0183\u000b",
    "\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0188\n\u0012",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u018c\n\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u0193\n\u0013",
    "\f\u0013\u000e\u0013\u0196\u000b\u0013\u0003\u0014\u0003\u0014\u0007",
    "\u0014\u019a\n\u0014\f\u0014\u000e\u0014\u019d\u000b\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0015\u0003\u0015\u0007\u0015\u01a3\n\u0015\f\u0015",
    "\u000e\u0015\u01a6\u000b\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003",
    "\u0016\u0005\u0016\u01ac\n\u0016\u0003\u0016\u0003\u0016\u0007\u0016",
    "\u01b0\n\u0016\f\u0016\u000e\u0016\u01b3\u000b\u0016\u0003\u0016\u0005",
    "\u0016\u01b6\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0005\u0017\u01c2\n\u0017\u0003\u0018\u0005\u0018\u01c5\n\u0018\u0003",
    "\u0018\u0003\u0018\u0005\u0018\u01c9\n\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0007\u0018\u01cf\n\u0018\f\u0018\u000e\u0018",
    "\u01d2\u000b\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u01d6\n\u0018",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u01da\n\u0018\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005",
    "\u001a\u01e3\n\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u01f5\n\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0007",
    "\u001f\u01fa\n\u001f\f\u001f\u000e\u001f\u01fd\u000b\u001f\u0003\u001f",
    "\u0003\u001f\u0005\u001f\u0201\n\u001f\u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0005 \u020a\n \u0003!\u0003!\u0003!\u0003!\u0007!\u0210",
    "\n!\f!\u000e!\u0213\u000b!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0007",
    "\"\u021a\n\"\f\"\u000e\"\u021d\u000b\"\u0003\"\u0003\"\u0003\"\u0003",
    "#\u0003#\u0005#\u0224\n#\u0003#\u0003#\u0003#\u0003#\u0007#\u022a\n",
    "#\f#\u000e#\u022d\u000b#\u0003#\u0003#\u0005#\u0231\n#\u0003#\u0003",
    "#\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0007%\u023b\n%\f%\u000e",
    "%\u023e\u000b%\u0003&\u0003&\u0003&\u0005&\u0243\n&\u0003\'\u0003\'",
    "\u0003\'\u0007\'\u0248\n\'\f\'\u000e\'\u024b\u000b\'\u0003(\u0003(\u0005",
    "(\u024f\n(\u0003)\u0003)\u0003)\u0003)\u0007)\u0255\n)\f)\u000e)\u0258",
    "\u000b)\u0003)\u0005)\u025b\n)\u0005)\u025d\n)\u0003)\u0003)\u0003*",
    "\u0003*\u0003+\u0003+\u0003+\u0007+\u0266\n+\f+\u000e+\u0269\u000b+",
    "\u0003+\u0003+\u0003+\u0007+\u026e\n+\f+\u000e+\u0271\u000b+\u0005+",
    "\u0273\n+\u0003,\u0003,\u0005,\u0277\n,\u0003,\u0003,\u0003,\u0005,",
    "\u027c\n,\u0007,\u027e\n,\f,\u000e,\u0281\u000b,\u0003,\u0003,\u0005",
    ",\u0285\n,\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0007.\u028d\n",
    ".\f.\u000e.\u0290\u000b.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0005",
    "/\u0298\n/\u0005/\u029a\n/\u00030\u00030\u00030\u00070\u029f\n0\f0\u000e",
    "0\u02a2\u000b0\u00031\u00031\u00051\u02a6\n1\u00031\u00031\u00032\u0003",
    "2\u00032\u00072\u02ad\n2\f2\u000e2\u02b0\u000b2\u00032\u00032\u0005",
    "2\u02b4\n2\u00032\u00052\u02b7\n2\u00033\u00073\u02ba\n3\f3\u000e3\u02bd",
    "\u000b3\u00033\u00033\u00033\u00034\u00074\u02c3\n4\f4\u000e4\u02c6",
    "\u000b4\u00034\u00034\u00034\u00034\u00035\u00035\u00036\u00036\u0003",
    "7\u00037\u00037\u00077\u02d3\n7\f7\u000e7\u02d6\u000b7\u00038\u0003",
    "8\u00039\u00039\u00039\u00039\u00039\u00059\u02df\n9\u00039\u00059\u02e2",
    "\n9\u0003:\u0003:\u0003;\u0003;\u0003;\u0007;\u02e9\n;\f;\u000e;\u02ec",
    "\u000b;\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0005=\u02f5",
    "\n=\u0003>\u0003>\u0003>\u0003>\u0007>\u02fb\n>\f>\u000e>\u02fe\u000b",
    ">\u0005>\u0300\n>\u0003>\u0005>\u0303\n>\u0003>\u0003>\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003@\u0003@\u0007@\u030e\n@\f@\u000e@\u0311",
    "\u000b@\u0003@\u0003@\u0003A\u0007A\u0316\nA\fA\u000eA\u0319\u000bA",
    "\u0003A\u0003A\u0005A\u031d\nA\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0005B\u0325\nB\u0003B\u0003B\u0005B\u0329\nB\u0003B\u0003B\u0005",
    "B\u032d\nB\u0003B\u0003B\u0005B\u0331\nB\u0005B\u0333\nB\u0003C\u0003",
    "C\u0005C\u0337\nC\u0003D\u0003D\u0003D\u0003D\u0005D\u033d\nD\u0003",
    "E\u0003E\u0003F\u0003F\u0003F\u0003G\u0003G\u0007G\u0346\nG\fG\u000e",
    "G\u0349\u000bG\u0003G\u0003G\u0003H\u0003H\u0003H\u0005H\u0350\nH\u0003",
    "I\u0003I\u0003I\u0003J\u0007J\u0356\nJ\fJ\u000eJ\u0359\u000bJ\u0003",
    "J\u0003J\u0003J\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0005K\u0364",
    "\nK\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0006",
    "K\u0379\nK\rK\u000eK\u037a\u0003K\u0005K\u037e\nK\u0003K\u0005K\u0381",
    "\nK\u0003K\u0003K\u0003K\u0003K\u0007K\u0387\nK\fK\u000eK\u038a\u000b",
    "K\u0003K\u0005K\u038d\nK\u0003K\u0003K\u0005K\u0391\nK\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003K\u0005K\u039a\nK\u0003K\u0003K\u0003",
    "K\u0005K\u039f\nK\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0005K\u03a9\nK\u0003L\u0007L\u03ac\nL\fL\u000eL\u03af\u000bL\u0003",
    "L\u0003L\u0005L\u03b3\nL\u0003M\u0003M\u0003M\u0005M\u03b8\nM\u0003",
    "N\u0003N\u0003N\u0005N\u03bd\nN\u0003O\u0003O\u0003O\u0007O\u03c2\n",
    "O\fO\u000eO\u03c5\u000bO\u0003O\u0003O\u0003O\u0003O\u0003O\u0003P\u0003",
    "P\u0003P\u0007P\u03cf\nP\fP\u000eP\u03d2\u000bP\u0003Q\u0003Q\u0003",
    "Q\u0003R\u0003R\u0003R\u0005R\u03da\nR\u0003R\u0003R\u0003S\u0003S\u0003",
    "S\u0007S\u03e1\nS\fS\u000eS\u03e4\u000bS\u0003T\u0007T\u03e7\nT\fT\u000e",
    "T\u03ea\u000bT\u0003T\u0003T\u0003T\u0003T\u0003T\u0003U\u0003U\u0005",
    "U\u03f3\nU\u0003U\u0003U\u0005U\u03f7\nU\u0003U\u0003U\u0005U\u03fb",
    "\nU\u0005U\u03fd\nU\u0003V\u0003V\u0005V\u0401\nV\u0003W\u0007W\u0404",
    "\nW\fW\u000eW\u0407\u000bW\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "X\u0003X\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003Z\u0003[\u0003",
    "[\u0003[\u0007[\u041a\n[\f[\u000e[\u041d\u000b[\u0003\\\u0003\\\u0005",
    "\\\u0421\n\\\u0003]\u0003]\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0005^\u0432\n^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0005^\u0442\n^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0005^\u0468\n^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0005",
    "^\u0470\n^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0005^\u047d\n^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0005^\u048f\n^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0007^\u0497",
    "\n^\f^\u000e^\u049a\u000b^\u0003_\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0003_\u0003_\u0003_\u0005_\u04af\n_\u0003_\u0005_\u04b2\n_\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0005`\u04bd",
    "\n`\u0005`\u04bf\n`\u0003a\u0003a\u0005a\u04c3\na\u0003a\u0003a\u0003",
    "a\u0005a\u04c8\na\u0007a\u04ca\na\fa\u000ea\u04cd\u000ba\u0003a\u0003",
    "a\u0003a\u0005a\u04d2\na\u0003b\u0003b\u0005b\u04d6\nb\u0003b\u0003",
    "b\u0003c\u0003c\u0003c\u0003c\u0007c\u04de\nc\fc\u000ec\u04e1\u000b",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0007c\u04ea\nc\f",
    "c\u000ec\u04ed\u000bc\u0003c\u0003c\u0007c\u04f1\nc\fc\u000ec\u04f4",
    "\u000bc\u0005c\u04f6\nc\u0003d\u0003d\u0003d\u0005d\u04fb\nd\u0003d",
    "\u0003d\u0003d\u0005d\u0500\nd\u0003d\u0003d\u0003d\u0005d\u0505\nd",
    "\u0003d\u0003d\u0003d\u0005d\u050a\nd\u0007d\u050c\nd\fd\u000ed\u050f",
    "\u000bd\u0005d\u0511\nd\u0003d\u0003d\u0003e\u0003e\u0003e\u0005e\u0518",
    "\ne\u0003e\u0003e\u0003e\u0005e\u051d\ne\u0007e\u051f\ne\fe\u000ee\u0522",
    "\u000be\u0003e\u0003e\u0003f\u0003f\u0005f\u0528\nf\u0003g\u0003g\u0003",
    "g\u0003h\u0003h\u0003h\u0003h\u0003i\u0003i\u0003i\u0005i\u0534\ni\u0003",
    "j\u0003j\u0003j\u0005j\u0539\nj\u0003k\u0003k\u0003k\u0003k\u0005k\u053f",
    "\nk\u0005k\u0541\nk\u0003l\u0003l\u0003l\u0003l\u0005l\u0547\nl\u0003",
    "m\u0003m\u0005m\u054b\nm\u0003m\u0003m\u0003m\u0002\u0003\u00ban\u0002",
    "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e",
    " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
    "\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc",
    "\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u0002\u0010\u0005\u0002&&0044\t",
    "\u0002\u0003\u0004\r\r\u001a\u001a)+..9:<<\u0003\u0002\u0005\u0006\u0004",
    "\u0002\u0019\u0019//\u0004\u0002==CH\u0003\u0002>B\u0003\u0002_b\u0003",
    "\u0002UV\u0004\u0002cdhh\u0003\u0002ab\u0004\u0002STZ[\u0004\u0002Y",
    "Y\\\\\u0004\u0002RRis\u0003\u0002_`\u05cb\u0002\u00db\u0003\u0002\u0002",
    "\u0002\u0004\u00ee\u0003\u0002\u0002\u0002\u0006\u00f5\u0003\u0002\u0002",
    "\u0002\b\u011d\u0003\u0002\u0002\u0002\n\u0121\u0003\u0002\u0002\u0002",
    "\f\u0126\u0003\u0002\u0002\u0002\u000e\u0128\u0003\u0002\u0002\u0002",
    "\u0010\u012d\u0003\u0002\u0002\u0002\u0012\u012f\u0003\u0002\u0002\u0002",
    "\u0014\u013e\u0003\u0002\u0002\u0002\u0016\u0149\u0003\u0002\u0002\u0002",
    "\u0018\u014e\u0003\u0002\u0002\u0002\u001a\u0156\u0003\u0002\u0002\u0002",
    "\u001c\u0168\u0003\u0002\u0002\u0002\u001e\u0173\u0003\u0002\u0002\u0002",
    " \u017d\u0003\u0002\u0002\u0002\"\u0184\u0003\u0002\u0002\u0002$\u018f",
    "\u0003\u0002\u0002\u0002&\u0197\u0003\u0002\u0002\u0002(\u01a0\u0003",
    "\u0002\u0002\u0002*\u01b5\u0003\u0002\u0002\u0002,\u01c1\u0003\u0002",
    "\u0002\u0002.\u01c4\u0003\u0002\u0002\u00020\u01db\u0003\u0002\u0002",
    "\u00022\u01de\u0003\u0002\u0002\u00024\u01e6\u0003\u0002\u0002\u0002",
    "6\u01e9\u0003\u0002\u0002\u00028\u01ed\u0003\u0002\u0002\u0002:\u01f1",
    "\u0003\u0002\u0002\u0002<\u0200\u0003\u0002\u0002\u0002>\u0209\u0003",
    "\u0002\u0002\u0002@\u020b\u0003\u0002\u0002\u0002B\u0216\u0003\u0002",
    "\u0002\u0002D\u0223\u0003\u0002\u0002\u0002F\u0234\u0003\u0002\u0002",
    "\u0002H\u0237\u0003\u0002\u0002\u0002J\u023f\u0003\u0002\u0002\u0002",
    "L\u0244\u0003\u0002\u0002\u0002N\u024e\u0003\u0002\u0002\u0002P\u0250",
    "\u0003\u0002\u0002\u0002R\u0260\u0003\u0002\u0002\u0002T\u0272\u0003",
    "\u0002\u0002\u0002V\u0284\u0003\u0002\u0002\u0002X\u0286\u0003\u0002",
    "\u0002\u0002Z\u0288\u0003\u0002\u0002\u0002\\\u0299\u0003\u0002\u0002",
    "\u0002^\u029b\u0003\u0002\u0002\u0002`\u02a3\u0003\u0002\u0002\u0002",
    "b\u02b6\u0003\u0002\u0002\u0002d\u02bb\u0003\u0002\u0002\u0002f\u02c4",
    "\u0003\u0002\u0002\u0002h\u02cb\u0003\u0002\u0002\u0002j\u02cd\u0003",
    "\u0002\u0002\u0002l\u02cf\u0003\u0002\u0002\u0002n\u02d7\u0003\u0002",
    "\u0002\u0002p\u02d9\u0003\u0002\u0002\u0002r\u02e3\u0003\u0002\u0002",
    "\u0002t\u02e5\u0003\u0002\u0002\u0002v\u02ed\u0003\u0002\u0002\u0002",
    "x\u02f4\u0003\u0002\u0002\u0002z\u02f6\u0003\u0002\u0002\u0002|\u0306",
    "\u0003\u0002\u0002\u0002~\u030b\u0003\u0002\u0002\u0002\u0080\u031c",
    "\u0003\u0002\u0002\u0002\u0082\u0332\u0003\u0002\u0002\u0002\u0084\u0336",
    "\u0003\u0002\u0002\u0002\u0086\u0338\u0003\u0002\u0002\u0002\u0088\u033e",
    "\u0003\u0002\u0002\u0002\u008a\u0340\u0003\u0002\u0002\u0002\u008c\u0343",
    "\u0003\u0002\u0002\u0002\u008e\u034f\u0003\u0002\u0002\u0002\u0090\u0351",
    "\u0003\u0002\u0002\u0002\u0092\u0357\u0003\u0002\u0002\u0002\u0094\u03a8",
    "\u0003\u0002\u0002\u0002\u0096\u03ad\u0003\u0002\u0002\u0002\u0098\u03b4",
    "\u0003\u0002\u0002\u0002\u009a\u03b9\u0003\u0002\u0002\u0002\u009c\u03be",
    "\u0003\u0002\u0002\u0002\u009e\u03cb\u0003\u0002\u0002\u0002\u00a0\u03d3",
    "\u0003\u0002\u0002\u0002\u00a2\u03d6\u0003\u0002\u0002\u0002\u00a4\u03dd",
    "\u0003\u0002\u0002\u0002\u00a6\u03e8\u0003\u0002\u0002\u0002\u00a8\u03fc",
    "\u0003\u0002\u0002\u0002\u00aa\u0400\u0003\u0002\u0002\u0002\u00ac\u0405",
    "\u0003\u0002\u0002\u0002\u00ae\u040d\u0003\u0002\u0002\u0002\u00b0\u040f",
    "\u0003\u0002\u0002\u0002\u00b2\u0412\u0003\u0002\u0002\u0002\u00b4\u0416",
    "\u0003\u0002\u0002\u0002\u00b6\u0420\u0003\u0002\u0002\u0002\u00b8\u0422",
    "\u0003\u0002\u0002\u0002\u00ba\u0431\u0003\u0002\u0002\u0002\u00bc\u04b1",
    "\u0003\u0002\u0002\u0002\u00be\u04be\u0003\u0002\u0002\u0002\u00c0\u04d1",
    "\u0003\u0002\u0002\u0002\u00c2\u04d3\u0003\u0002\u0002\u0002\u00c4\u04d9",
    "\u0003\u0002\u0002\u0002\u00c6\u04f7\u0003\u0002\u0002\u0002\u00c8\u0514",
    "\u0003\u0002\u0002\u0002\u00ca\u0525\u0003\u0002\u0002\u0002\u00cc\u0529",
    "\u0003\u0002\u0002\u0002\u00ce\u052c\u0003\u0002\u0002\u0002\u00d0\u0533",
    "\u0003\u0002\u0002\u0002\u00d2\u0538\u0003\u0002\u0002\u0002\u00d4\u0540",
    "\u0003\u0002\u0002\u0002\u00d6\u0546\u0003\u0002\u0002\u0002\u00d8\u0548",
    "\u0003\u0002\u0002\u0002\u00da\u00dc\u0005\u0004\u0003\u0002\u00db\u00da",
    "\u0003\u0002\u0002\u0002\u00db\u00dc\u0003\u0002\u0002\u0002\u00dc\u00e0",
    "\u0003\u0002\u0002\u0002\u00dd\u00df\u0005\u0006\u0004\u0002\u00de\u00dd",
    "\u0003\u0002\u0002\u0002\u00df\u00e2\u0003\u0002\u0002\u0002\u00e0\u00de",
    "\u0003\u0002\u0002\u0002\u00e0\u00e1\u0003\u0002\u0002\u0002\u00e1\u00e6",
    "\u0003\u0002\u0002\u0002\u00e2\u00e0\u0003\u0002\u0002\u0002\u00e3\u00e5",
    "\u0005\b\u0005\u0002\u00e4\u00e3\u0003\u0002\u0002\u0002\u00e5\u00e8",
    "\u0003\u0002\u0002\u0002\u00e6\u00e4\u0003\u0002\u0002\u0002\u00e6\u00e7",
    "\u0003\u0002\u0002\u0002\u00e7\u00e9\u0003\u0002\u0002\u0002\u00e8\u00e6",
    "\u0003\u0002\u0002\u0002\u00e9\u00ea\u0007\u0002\u0002\u0003\u00ea\u0003",
    "\u0003\u0002\u0002\u0002\u00eb\u00ed\u0005p9\u0002\u00ec\u00eb\u0003",
    "\u0002\u0002\u0002\u00ed\u00f0\u0003\u0002\u0002\u0002\u00ee\u00ec\u0003",
    "\u0002\u0002\u0002\u00ee\u00ef\u0003\u0002\u0002\u0002\u00ef\u00f1\u0003",
    "\u0002\u0002\u0002\u00f0\u00ee\u0003\u0002\u0002\u0002\u00f1\u00f2\u0007",
    "(\u0002\u0002\u00f2\u00f3\u0005l7\u0002\u00f3\u00f4\u0007O\u0002\u0002",
    "\u00f4\u0005\u0003\u0002\u0002\u0002\u00f5\u00f7\u0007!\u0002\u0002",
    "\u00f6\u00f8\u0007.\u0002\u0002\u00f7\u00f6\u0003\u0002\u0002\u0002",
    "\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u00f9\u0003\u0002\u0002\u0002",
    "\u00f9\u00fc\u0005l7\u0002\u00fa\u00fb\u0007Q\u0002\u0002\u00fb\u00fd",
    "\u0007c\u0002\u0002\u00fc\u00fa\u0003\u0002\u0002\u0002\u00fc\u00fd",
    "\u0003\u0002\u0002\u0002\u00fd\u00fe\u0003\u0002\u0002\u0002\u00fe\u00ff",
    "\u0007O\u0002\u0002\u00ff\u0007\u0003\u0002\u0002\u0002\u0100\u0102",
    "\u0005\f\u0007\u0002\u0101\u0100\u0003\u0002\u0002\u0002\u0102\u0105",
    "\u0003\u0002\u0002\u0002\u0103\u0101\u0003\u0002\u0002\u0002\u0103\u0104",
    "\u0003\u0002\u0002\u0002\u0104\u0106\u0003\u0002\u0002\u0002\u0105\u0103",
    "\u0003\u0002\u0002\u0002\u0106\u011e\u0005\u0012\n\u0002\u0107\u0109",
    "\u0005\f\u0007\u0002\u0108\u0107\u0003\u0002\u0002\u0002\u0109\u010c",
    "\u0003\u0002\u0002\u0002\u010a\u0108\u0003\u0002\u0002\u0002\u010a\u010b",
    "\u0003\u0002\u0002\u0002\u010b\u010d\u0003\u0002\u0002\u0002\u010c\u010a",
    "\u0003\u0002\u0002\u0002\u010d\u011e\u0005\u001a\u000e\u0002\u010e\u0110",
    "\u0005\f\u0007\u0002\u010f\u010e\u0003\u0002\u0002\u0002\u0110\u0113",
    "\u0003\u0002\u0002\u0002\u0111\u010f\u0003\u0002\u0002\u0002\u0111\u0112",
    "\u0003\u0002\u0002\u0002\u0112\u0114\u0003\u0002\u0002\u0002\u0113\u0111",
    "\u0003\u0002\u0002\u0002\u0114\u011e\u0005\"\u0012\u0002\u0115\u0117",
    "\u0005\f\u0007\u0002\u0116\u0115\u0003\u0002\u0002\u0002\u0117\u011a",
    "\u0003\u0002\u0002\u0002\u0118\u0116\u0003\u0002\u0002\u0002\u0118\u0119",
    "\u0003\u0002\u0002\u0002\u0119\u011b\u0003\u0002\u0002\u0002\u011a\u0118",
    "\u0003\u0002\u0002\u0002\u011b\u011e\u0005|?\u0002\u011c\u011e\u0007",
    "O\u0002\u0002\u011d\u0103\u0003\u0002\u0002\u0002\u011d\u010a\u0003",
    "\u0002\u0002\u0002\u011d\u0111\u0003\u0002\u0002\u0002\u011d\u0118\u0003",
    "\u0002\u0002\u0002\u011d\u011c\u0003\u0002\u0002\u0002\u011e\t\u0003",
    "\u0002\u0002\u0002\u011f\u0122\u0005\f\u0007\u0002\u0120\u0122\t\u0002",
    "\u0002\u0002\u0121\u011f\u0003\u0002\u0002\u0002\u0121\u0120\u0003\u0002",
    "\u0002\u0002\u0122\u000b\u0003\u0002\u0002\u0002\u0123\u0127\u0005p",
    "9\u0002\u0124\u0127\t\u0003\u0002\u0002\u0125\u0127\u0005\u000e\b\u0002",
    "\u0126\u0123\u0003\u0002\u0002\u0002\u0126\u0124\u0003\u0002\u0002\u0002",
    "\u0126\u0125\u0003\u0002\u0002\u0002\u0127\r\u0003\u0002\u0002\u0002",
    "\u0128\u0129\t\u0004\u0002\u0002\u0129\u012a\u0007\u0007\u0002\u0002",
    "\u012a\u000f\u0003\u0002\u0002\u0002\u012b\u012e\u0007\u001a\u0002\u0002",
    "\u012c\u012e\u0005p9\u0002\u012d\u012b\u0003\u0002\u0002\u0002\u012d",
    "\u012c\u0003\u0002\u0002\u0002\u012e\u0011\u0003\u0002\u0002\u0002\u012f",
    "\u0130\u0007\u0012\u0002\u0002\u0130\u0132\u0007t\u0002\u0002\u0131",
    "\u0133\u0005\u0014\u000b\u0002\u0132\u0131\u0003\u0002\u0002\u0002\u0132",
    "\u0133\u0003\u0002\u0002\u0002\u0133\u0136\u0003\u0002\u0002\u0002\u0134",
    "\u0135\u0007\u0019\u0002\u0002\u0135\u0137\u0005T+\u0002\u0136\u0134",
    "\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002\u0137\u013a",
    "\u0003\u0002\u0002\u0002\u0138\u0139\u0007 \u0002\u0002\u0139\u013b",
    "\u0005$\u0013\u0002\u013a\u0138\u0003\u0002\u0002\u0002\u013a\u013b",
    "\u0003\u0002\u0002\u0002\u013b\u013c\u0003\u0002\u0002\u0002\u013c\u013d",
    "\u0005&\u0014\u0002\u013d\u0013\u0003\u0002\u0002\u0002\u013e\u013f",
    "\u0007T\u0002\u0002\u013f\u0144\u0005\u0016\f\u0002\u0140\u0141\u0007",
    "P\u0002\u0002\u0141\u0143\u0005\u0016\f\u0002\u0142\u0140\u0003\u0002",
    "\u0002\u0002\u0143\u0146\u0003\u0002\u0002\u0002\u0144\u0142\u0003\u0002",
    "\u0002\u0002\u0144\u0145\u0003\u0002\u0002\u0002\u0145\u0147\u0003\u0002",
    "\u0002\u0002\u0146\u0144\u0003\u0002\u0002\u0002\u0147\u0148\u0007S",
    "\u0002\u0002\u0148\u0015\u0003\u0002\u0002\u0002\u0149\u014c\u0007t",
    "\u0002\u0002\u014a\u014b\u0007\u0019\u0002\u0002\u014b\u014d\u0005\u0018",
    "\r\u0002\u014c\u014a\u0003\u0002\u0002\u0002\u014c\u014d\u0003\u0002",
    "\u0002\u0002\u014d\u0017\u0003\u0002\u0002\u0002\u014e\u0153\u0005T",
    "+\u0002\u014f\u0150\u0007e\u0002\u0002\u0150\u0152\u0005T+\u0002\u0151",
    "\u014f\u0003\u0002\u0002\u0002\u0152\u0155\u0003\u0002\u0002\u0002\u0153",
    "\u0151\u0003\u0002\u0002\u0002\u0153\u0154\u0003\u0002\u0002\u0002\u0154",
    "\u0019\u0003\u0002\u0002\u0002\u0155\u0153\u0003\u0002\u0002\u0002\u0156",
    "\u0157\u0007\u0018\u0002\u0002\u0157\u015a\u0007t\u0002\u0002\u0158",
    "\u0159\u0007 \u0002\u0002\u0159\u015b\u0005$\u0013\u0002\u015a\u0158",
    "\u0003\u0002\u0002\u0002\u015a\u015b\u0003\u0002\u0002\u0002\u015b\u015c",
    "\u0003\u0002\u0002\u0002\u015c\u015e\u0007K\u0002\u0002\u015d\u015f",
    "\u0005\u001c\u000f\u0002\u015e\u015d\u0003\u0002\u0002\u0002\u015e\u015f",
    "\u0003\u0002\u0002\u0002\u015f\u0161\u0003\u0002\u0002\u0002\u0160\u0162",
    "\u0007P\u0002\u0002\u0161\u0160\u0003\u0002\u0002\u0002\u0161\u0162",
    "\u0003\u0002\u0002\u0002\u0162\u0164\u0003\u0002\u0002\u0002\u0163\u0165",
    "\u0005 \u0011\u0002\u0164\u0163\u0003\u0002\u0002\u0002\u0164\u0165",
    "\u0003\u0002\u0002\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u0167",
    "\u0007L\u0002\u0002\u0167\u001b\u0003\u0002\u0002\u0002\u0168\u016d",
    "\u0005\u001e\u0010\u0002\u0169\u016a\u0007P\u0002\u0002\u016a\u016c",
    "\u0005\u001e\u0010\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016c\u016f",
    "\u0003\u0002\u0002\u0002\u016d\u016b\u0003\u0002\u0002\u0002\u016d\u016e",
    "\u0003\u0002\u0002\u0002\u016e\u001d\u0003\u0002\u0002\u0002\u016f\u016d",
    "\u0003\u0002\u0002\u0002\u0170\u0172\u0005p9\u0002\u0171\u0170\u0003",
    "\u0002\u0002\u0002\u0172\u0175\u0003\u0002\u0002\u0002\u0173\u0171\u0003",
    "\u0002\u0002\u0002\u0173\u0174\u0003\u0002\u0002\u0002\u0174\u0176\u0003",
    "\u0002\u0002\u0002\u0175\u0173\u0003\u0002\u0002\u0002\u0176\u0178\u0007",
    "t\u0002\u0002\u0177\u0179\u0005\u00d8m\u0002\u0178\u0177\u0003\u0002",
    "\u0002\u0002\u0178\u0179\u0003\u0002\u0002\u0002\u0179\u017b\u0003\u0002",
    "\u0002\u0002\u017a\u017c\u0005&\u0014\u0002\u017b\u017a\u0003\u0002",
    "\u0002\u0002\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u001f\u0003\u0002",
    "\u0002\u0002\u017d\u0181\u0007O\u0002\u0002\u017e\u0180\u0005*\u0016",
    "\u0002\u017f\u017e\u0003\u0002\u0002\u0002\u0180\u0183\u0003\u0002\u0002",
    "\u0002\u0181\u017f\u0003\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002",
    "\u0002\u0182!\u0003\u0002\u0002\u0002\u0183\u0181\u0003\u0002\u0002",
    "\u0002\u0184\u0185\u0007$\u0002\u0002\u0185\u0187\u0007t\u0002\u0002",
    "\u0186\u0188\u0005\u0014\u000b\u0002\u0187\u0186\u0003\u0002\u0002\u0002",
    "\u0187\u0188\u0003\u0002\u0002\u0002\u0188\u018b\u0003\u0002\u0002\u0002",
    "\u0189\u018a\u0007\u0019\u0002\u0002\u018a\u018c\u0005$\u0013\u0002",
    "\u018b\u0189\u0003\u0002\u0002\u0002\u018b\u018c\u0003\u0002\u0002\u0002",
    "\u018c\u018d\u0003\u0002\u0002\u0002\u018d\u018e\u0005(\u0015\u0002",
    "\u018e#\u0003\u0002\u0002\u0002\u018f\u0194\u0005T+\u0002\u0190\u0191",
    "\u0007P\u0002\u0002\u0191\u0193\u0005T+\u0002\u0192\u0190\u0003\u0002",
    "\u0002\u0002\u0193\u0196\u0003\u0002\u0002\u0002\u0194\u0192\u0003\u0002",
    "\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195%\u0003\u0002",
    "\u0002\u0002\u0196\u0194\u0003\u0002\u0002\u0002\u0197\u019b\u0007K",
    "\u0002\u0002\u0198\u019a\u0005*\u0016\u0002\u0199\u0198\u0003\u0002",
    "\u0002\u0002\u019a\u019d\u0003\u0002\u0002\u0002\u019b\u0199\u0003\u0002",
    "\u0002\u0002\u019b\u019c\u0003\u0002\u0002\u0002\u019c\u019e\u0003\u0002",
    "\u0002\u0002\u019d\u019b\u0003\u0002\u0002\u0002\u019e\u019f\u0007L",
    "\u0002\u0002\u019f\'\u0003\u0002\u0002\u0002\u01a0\u01a4\u0007K\u0002",
    "\u0002\u01a1\u01a3\u0005<\u001f\u0002\u01a2\u01a1\u0003\u0002\u0002",
    "\u0002\u01a3\u01a6\u0003\u0002\u0002\u0002\u01a4\u01a2\u0003\u0002\u0002",
    "\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a7\u0003\u0002\u0002",
    "\u0002\u01a6\u01a4\u0003\u0002\u0002\u0002\u01a7\u01a8\u0007L\u0002",
    "\u0002\u01a8)\u0003\u0002\u0002\u0002\u01a9\u01b6\u0007O\u0002\u0002",
    "\u01aa\u01ac\u0007.\u0002\u0002\u01ab\u01aa\u0003\u0002\u0002\u0002",
    "\u01ab\u01ac\u0003\u0002\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002",
    "\u01ad\u01b6\u0005\u008cG\u0002\u01ae\u01b0\u0005\n\u0006\u0002\u01af",
    "\u01ae\u0003\u0002\u0002\u0002\u01b0\u01b3\u0003\u0002\u0002\u0002\u01b1",
    "\u01af\u0003\u0002\u0002\u0002\u01b1\u01b2\u0003\u0002\u0002\u0002\u01b2",
    "\u01b4\u0003\u0002\u0002\u0002\u01b3\u01b1\u0003\u0002\u0002\u0002\u01b4",
    "\u01b6\u0005,\u0017\u0002\u01b5\u01a9\u0003\u0002\u0002\u0002\u01b5",
    "\u01ab\u0003\u0002\u0002\u0002\u01b5\u01b1\u0003\u0002\u0002\u0002\u01b6",
    "+\u0003\u0002\u0002\u0002\u01b7\u01c2\u0005.\u0018\u0002\u01b8\u01c2",
    "\u00050\u0019\u0002\u01b9\u01c2\u00056\u001c\u0002\u01ba\u01c2\u0005",
    "2\u001a\u0002\u01bb\u01c2\u00054\u001b\u0002\u01bc\u01c2\u0005\"\u0012",
    "\u0002\u01bd\u01c2\u0005|?\u0002\u01be\u01c2\u0005\u0012\n\u0002\u01bf",
    "\u01c2\u0005\u001a\u000e\u0002\u01c0\u01c2\u00058\u001d\u0002\u01c1",
    "\u01b7\u0003\u0002\u0002\u0002\u01c1\u01b8\u0003\u0002\u0002\u0002\u01c1",
    "\u01b9\u0003\u0002\u0002\u0002\u01c1\u01ba\u0003\u0002\u0002\u0002\u01c1",
    "\u01bb\u0003\u0002\u0002\u0002\u01c1\u01bc\u0003\u0002\u0002\u0002\u01c1",
    "\u01bd\u0003\u0002\u0002\u0002\u01c1\u01be\u0003\u0002\u0002\u0002\u01c1",
    "\u01bf\u0003\u0002\u0002\u0002\u01c1\u01c0\u0003\u0002\u0002\u0002\u01c2",
    "-\u0003\u0002\u0002\u0002\u01c3\u01c5\u0007\u0003\u0002\u0002\u01c4",
    "\u01c3\u0003\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002\u0002\u0002\u01c5",
    "\u01c8\u0003\u0002\u0002\u0002\u01c6\u01c9\u0005T+\u0002\u01c7\u01c9",
    "\u00076\u0002\u0002\u01c8\u01c6\u0003\u0002\u0002\u0002\u01c8\u01c7",
    "\u0003\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002\u0002\u0002\u01ca\u01cb",
    "\u0007t\u0002\u0002\u01cb\u01d0\u0005`1\u0002\u01cc\u01cd\u0007M\u0002",
    "\u0002\u01cd\u01cf\u0007N\u0002\u0002\u01ce\u01cc\u0003\u0002\u0002",
    "\u0002\u01cf\u01d2\u0003\u0002\u0002\u0002\u01d0\u01ce\u0003\u0002\u0002",
    "\u0002\u01d0\u01d1\u0003\u0002\u0002\u0002\u01d1\u01d5\u0003\u0002\u0002",
    "\u0002\u01d2\u01d0\u0003\u0002\u0002\u0002\u01d3\u01d4\u00073\u0002",
    "\u0002\u01d4\u01d6\u0005^0\u0002\u01d5\u01d3\u0003\u0002\u0002\u0002",
    "\u01d5\u01d6\u0003\u0002\u0002\u0002\u01d6\u01d9\u0003\u0002\u0002\u0002",
    "\u01d7\u01da\u0005h5\u0002\u01d8\u01da\u0007O\u0002\u0002\u01d9\u01d7",
    "\u0003\u0002\u0002\u0002\u01d9\u01d8\u0003\u0002\u0002\u0002\u01da/",
    "\u0003\u0002\u0002\u0002\u01db\u01dc\u0005\u0014\u000b\u0002\u01dc\u01dd",
    "\u0005.\u0018\u0002\u01dd1\u0003\u0002\u0002\u0002\u01de\u01df\u0007",
    "t\u0002\u0002\u01df\u01e2\u0005`1\u0002\u01e0\u01e1\u00073\u0002\u0002",
    "\u01e1\u01e3\u0005^0\u0002\u01e2\u01e0\u0003\u0002\u0002\u0002\u01e2",
    "\u01e3\u0003\u0002\u0002\u0002\u01e3\u01e4\u0003\u0002\u0002\u0002\u01e4",
    "\u01e5\u0005j6\u0002\u01e53\u0003\u0002\u0002\u0002\u01e6\u01e7\u0005",
    "\u0014\u000b\u0002\u01e7\u01e8\u00052\u001a\u0002\u01e85\u0003\u0002",
    "\u0002\u0002\u01e9\u01ea\u0005T+\u0002\u01ea\u01eb\u0005H%\u0002\u01eb",
    "\u01ec\u0007O\u0002\u0002\u01ec7\u0003\u0002\u0002\u0002\u01ed\u01ee",
    "\u0005T+\u0002\u01ee\u01ef\u0005H%\u0002\u01ef\u01f0\u0005:\u001e\u0002",
    "\u01f09\u0003\u0002\u0002\u0002\u01f1\u01f2\u0007K\u0002\u0002\u01f2",
    "\u01f4\u0005\u0096L\u0002\u01f3\u01f5\u0005\u0096L\u0002\u01f4\u01f3",
    "\u0003\u0002\u0002\u0002\u01f4\u01f5\u0003\u0002\u0002\u0002\u01f5\u01f6",
    "\u0003\u0002\u0002\u0002\u01f6\u01f7\u0007L\u0002\u0002\u01f7;\u0003",
    "\u0002\u0002\u0002\u01f8\u01fa\u0005\n\u0006\u0002\u01f9\u01f8\u0003",
    "\u0002\u0002\u0002\u01fa\u01fd\u0003\u0002\u0002\u0002\u01fb\u01f9\u0003",
    "\u0002\u0002\u0002\u01fb\u01fc\u0003\u0002\u0002\u0002\u01fc\u01fe\u0003",
    "\u0002\u0002\u0002\u01fd\u01fb\u0003\u0002\u0002\u0002\u01fe\u0201\u0005",
    "> \u0002\u01ff\u0201\u0007O\u0002\u0002\u0200\u01fb\u0003\u0002\u0002",
    "\u0002\u0200\u01ff\u0003\u0002\u0002\u0002\u0201=\u0003\u0002\u0002",
    "\u0002\u0202\u020a\u0005@!\u0002\u0203\u020a\u0005D#\u0002\u0204\u020a",
    "\u0005F$\u0002\u0205\u020a\u0005\"\u0012\u0002\u0206\u020a\u0005|?\u0002",
    "\u0207\u020a\u0005\u0012\n\u0002\u0208\u020a\u0005\u001a\u000e\u0002",
    "\u0209\u0202\u0003\u0002\u0002\u0002\u0209\u0203\u0003\u0002\u0002\u0002",
    "\u0209\u0204\u0003\u0002\u0002\u0002\u0209\u0205\u0003\u0002\u0002\u0002",
    "\u0209\u0206\u0003\u0002\u0002\u0002\u0209\u0207\u0003\u0002\u0002\u0002",
    "\u0209\u0208\u0003\u0002\u0002\u0002\u020a?\u0003\u0002\u0002\u0002",
    "\u020b\u020c\u0005T+\u0002\u020c\u0211\u0005B\"\u0002\u020d\u020e\u0007",
    "P\u0002\u0002\u020e\u0210\u0005B\"\u0002\u020f\u020d\u0003\u0002\u0002",
    "\u0002\u0210\u0213\u0003\u0002\u0002\u0002\u0211\u020f\u0003\u0002\u0002",
    "\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0214\u0003\u0002\u0002",
    "\u0002\u0213\u0211\u0003\u0002\u0002\u0002\u0214\u0215\u0007O\u0002",
    "\u0002\u0215A\u0003\u0002\u0002\u0002\u0216\u021b\u0007t\u0002\u0002",
    "\u0217\u0218\u0007M\u0002\u0002\u0218\u021a\u0007N\u0002\u0002\u0219",
    "\u0217\u0003\u0002\u0002\u0002\u021a\u021d\u0003\u0002\u0002\u0002\u021b",
    "\u0219\u0003\u0002\u0002\u0002\u021b\u021c\u0003\u0002\u0002\u0002\u021c",
    "\u021e\u0003\u0002\u0002\u0002\u021d\u021b\u0003\u0002\u0002\u0002\u021e",
    "\u021f\u0007R\u0002\u0002\u021f\u0220\u0005N(\u0002\u0220C\u0003\u0002",
    "\u0002\u0002\u0221\u0224\u0005T+\u0002\u0222\u0224\u00076\u0002\u0002",
    "\u0223\u0221\u0003\u0002\u0002\u0002\u0223\u0222\u0003\u0002\u0002\u0002",
    "\u0224\u0225\u0003\u0002\u0002\u0002\u0225\u0226\u0007t\u0002\u0002",
    "\u0226\u022b\u0005`1\u0002\u0227\u0228\u0007M\u0002\u0002\u0228\u022a",
    "\u0007N\u0002\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u022a\u022d",
    "\u0003\u0002\u0002\u0002\u022b\u0229\u0003\u0002\u0002\u0002\u022b\u022c",
    "\u0003\u0002\u0002\u0002\u022c\u0230\u0003\u0002\u0002\u0002\u022d\u022b",
    "\u0003\u0002\u0002\u0002\u022e\u022f\u00073\u0002\u0002\u022f\u0231",
    "\u0005^0\u0002\u0230\u022e\u0003\u0002\u0002\u0002\u0230\u0231\u0003",
    "\u0002\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u0233\u0007",
    "O\u0002\u0002\u0233E\u0003\u0002\u0002\u0002\u0234\u0235\u0005\u0014",
    "\u000b\u0002\u0235\u0236\u0005D#\u0002\u0236G\u0003\u0002\u0002\u0002",
    "\u0237\u023c\u0005J&\u0002\u0238\u0239\u0007P\u0002\u0002\u0239\u023b",
    "\u0005J&\u0002\u023a\u0238\u0003\u0002\u0002\u0002\u023b\u023e\u0003",
    "\u0002\u0002\u0002\u023c\u023a\u0003\u0002\u0002\u0002\u023c\u023d\u0003",
    "\u0002\u0002\u0002\u023dI\u0003\u0002\u0002\u0002\u023e\u023c\u0003",
    "\u0002\u0002\u0002\u023f\u0242\u0005L\'\u0002\u0240\u0241\u0007R\u0002",
    "\u0002\u0241\u0243\u0005N(\u0002\u0242\u0240\u0003\u0002\u0002\u0002",
    "\u0242\u0243\u0003\u0002\u0002\u0002\u0243K\u0003\u0002\u0002\u0002",
    "\u0244\u0249\u0007t\u0002\u0002\u0245\u0246\u0007M\u0002\u0002\u0246",
    "\u0248\u0007N\u0002\u0002\u0247\u0245\u0003\u0002\u0002\u0002\u0248",
    "\u024b\u0003\u0002\u0002\u0002\u0249\u0247\u0003\u0002\u0002\u0002\u0249",
    "\u024a\u0003\u0002\u0002\u0002\u024aM\u0003\u0002\u0002\u0002\u024b",
    "\u0249\u0003\u0002\u0002\u0002\u024c\u024f\u0005P)\u0002\u024d\u024f",
    "\u0005\u00ba^\u0002\u024e\u024c\u0003\u0002\u0002\u0002\u024e\u024d",
    "\u0003\u0002\u0002\u0002\u024fO\u0003\u0002\u0002\u0002\u0250\u025c",
    "\u0007K\u0002\u0002\u0251\u0256\u0005N(\u0002\u0252\u0253\u0007P\u0002",
    "\u0002\u0253\u0255\u0005N(\u0002\u0254\u0252\u0003\u0002\u0002\u0002",
    "\u0255\u0258\u0003\u0002\u0002\u0002\u0256\u0254\u0003\u0002\u0002\u0002",
    "\u0256\u0257\u0003\u0002\u0002\u0002\u0257\u025a\u0003\u0002\u0002\u0002",
    "\u0258\u0256\u0003\u0002\u0002\u0002\u0259\u025b\u0007P\u0002\u0002",
    "\u025a\u0259\u0003\u0002\u0002\u0002\u025a\u025b\u0003\u0002\u0002\u0002",
    "\u025b\u025d\u0003\u0002\u0002\u0002\u025c\u0251\u0003\u0002\u0002\u0002",
    "\u025c\u025d\u0003\u0002\u0002\u0002\u025d\u025e\u0003\u0002\u0002\u0002",
    "\u025e\u025f\u0007L\u0002\u0002\u025fQ\u0003\u0002\u0002\u0002\u0260",
    "\u0261\u0007t\u0002\u0002\u0261S\u0003\u0002\u0002\u0002\u0262\u0267",
    "\u0005V,\u0002\u0263\u0264\u0007M\u0002\u0002\u0264\u0266\u0007N\u0002",
    "\u0002\u0265\u0263\u0003\u0002\u0002\u0002\u0266\u0269\u0003\u0002\u0002",
    "\u0002\u0267\u0265\u0003\u0002\u0002\u0002\u0267\u0268\u0003\u0002\u0002",
    "\u0002\u0268\u0273\u0003\u0002\u0002\u0002\u0269\u0267\u0003\u0002\u0002",
    "\u0002\u026a\u026f\u0005X-\u0002\u026b\u026c\u0007M\u0002\u0002\u026c",
    "\u026e\u0007N\u0002\u0002\u026d\u026b\u0003\u0002\u0002\u0002\u026e",
    "\u0271\u0003\u0002\u0002\u0002\u026f\u026d\u0003\u0002\u0002\u0002\u026f",
    "\u0270\u0003\u0002\u0002\u0002\u0270\u0273\u0003\u0002\u0002\u0002\u0271",
    "\u026f\u0003\u0002\u0002\u0002\u0272\u0262\u0003\u0002\u0002\u0002\u0272",
    "\u026a\u0003\u0002\u0002\u0002\u0273U\u0003\u0002\u0002\u0002\u0274",
    "\u0276\u0007t\u0002\u0002\u0275\u0277\u0005Z.\u0002\u0276\u0275\u0003",
    "\u0002\u0002\u0002\u0276\u0277\u0003\u0002\u0002\u0002\u0277\u027f\u0003",
    "\u0002\u0002\u0002\u0278\u0279\u0007Q\u0002\u0002\u0279\u027b\u0007",
    "t\u0002\u0002\u027a\u027c\u0005Z.\u0002\u027b\u027a\u0003\u0002\u0002",
    "\u0002\u027b\u027c\u0003\u0002\u0002\u0002\u027c\u027e\u0003\u0002\u0002",
    "\u0002\u027d\u0278\u0003\u0002\u0002\u0002\u027e\u0281\u0003\u0002\u0002",
    "\u0002\u027f\u027d\u0003\u0002\u0002\u0002\u027f\u0280\u0003\u0002\u0002",
    "\u0002\u0280\u0285\u0003\u0002\u0002\u0002\u0281\u027f\u0003\u0002\u0002",
    "\u0002\u0282\u0283\u0007\b\u0002\u0002\u0283\u0285\u0005Z.\u0002\u0284",
    "\u0274\u0003\u0002\u0002\u0002\u0284\u0282\u0003\u0002\u0002\u0002\u0285",
    "W\u0003\u0002\u0002\u0002\u0286\u0287\u0007\t\u0002\u0002\u0287Y\u0003",
    "\u0002\u0002\u0002\u0288\u0289\u0007T\u0002\u0002\u0289\u028e\u0005",
    "\\/\u0002\u028a\u028b\u0007P\u0002\u0002\u028b\u028d\u0005\\/\u0002",
    "\u028c\u028a\u0003\u0002\u0002\u0002\u028d\u0290\u0003\u0002\u0002\u0002",
    "\u028e\u028c\u0003\u0002\u0002\u0002\u028e\u028f\u0003\u0002\u0002\u0002",
    "\u028f\u0291\u0003\u0002\u0002\u0002\u0290\u028e\u0003\u0002\u0002\u0002",
    "\u0291\u0292\u0007S\u0002\u0002\u0292[\u0003\u0002\u0002\u0002\u0293",
    "\u029a\u0005T+\u0002\u0294\u0297\u0007W\u0002\u0002\u0295\u0296\t\u0005",
    "\u0002\u0002\u0296\u0298\u0005T+\u0002\u0297\u0295\u0003\u0002\u0002",
    "\u0002\u0297\u0298\u0003\u0002\u0002\u0002\u0298\u029a\u0003\u0002\u0002",
    "\u0002\u0299\u0293\u0003\u0002\u0002\u0002\u0299\u0294\u0003\u0002\u0002",
    "\u0002\u029a]\u0003\u0002\u0002\u0002\u029b\u02a0\u0005l7\u0002\u029c",
    "\u029d\u0007P\u0002\u0002\u029d\u029f\u0005l7\u0002\u029e\u029c\u0003",
    "\u0002\u0002\u0002\u029f\u02a2\u0003\u0002\u0002\u0002\u02a0\u029e\u0003",
    "\u0002\u0002\u0002\u02a0\u02a1\u0003\u0002\u0002\u0002\u02a1_\u0003",
    "\u0002\u0002\u0002\u02a2\u02a0\u0003\u0002\u0002\u0002\u02a3\u02a5\u0007",
    "I\u0002\u0002\u02a4\u02a6\u0005b2\u0002\u02a5\u02a4\u0003\u0002\u0002",
    "\u0002\u02a5\u02a6\u0003\u0002\u0002\u0002\u02a6\u02a7\u0003\u0002\u0002",
    "\u0002\u02a7\u02a8\u0007J\u0002\u0002\u02a8a\u0003\u0002\u0002\u0002",
    "\u02a9\u02ae\u0005d3\u0002\u02aa\u02ab\u0007P\u0002\u0002\u02ab\u02ad",
    "\u0005d3\u0002\u02ac\u02aa\u0003\u0002\u0002\u0002\u02ad\u02b0\u0003",
    "\u0002\u0002\u0002\u02ae\u02ac\u0003\u0002\u0002\u0002\u02ae\u02af\u0003",
    "\u0002\u0002\u0002\u02af\u02b3\u0003\u0002\u0002\u0002\u02b0\u02ae\u0003",
    "\u0002\u0002\u0002\u02b1\u02b2\u0007P\u0002\u0002\u02b2\u02b4\u0005",
    "f4\u0002\u02b3\u02b1\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002",
    "\u0002\u0002\u02b4\u02b7\u0003\u0002\u0002\u0002\u02b5\u02b7\u0005f",
    "4\u0002\u02b6\u02a9\u0003\u0002\u0002\u0002\u02b6\u02b5\u0003\u0002",
    "\u0002\u0002\u02b7c\u0003\u0002\u0002\u0002\u02b8\u02ba\u0005\u0010",
    "\t\u0002\u02b9\u02b8\u0003\u0002\u0002\u0002\u02ba\u02bd\u0003\u0002",
    "\u0002\u0002\u02bb\u02b9\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003\u0002",
    "\u0002\u0002\u02bc\u02be\u0003\u0002\u0002\u0002\u02bd\u02bb\u0003\u0002",
    "\u0002\u0002\u02be\u02bf\u0005T+\u0002\u02bf\u02c0\u0005L\'\u0002\u02c0",
    "e\u0003\u0002\u0002\u0002\u02c1\u02c3\u0005\u0010\t\u0002\u02c2\u02c1",
    "\u0003\u0002\u0002\u0002\u02c3\u02c6\u0003\u0002\u0002\u0002\u02c4\u02c2",
    "\u0003\u0002\u0002\u0002\u02c4\u02c5\u0003\u0002\u0002\u0002\u02c5\u02c7",
    "\u0003\u0002\u0002\u0002\u02c6\u02c4\u0003\u0002\u0002\u0002\u02c7\u02c8",
    "\u0005T+\u0002\u02c8\u02c9\u0007v\u0002\u0002\u02c9\u02ca\u0005L\'\u0002",
    "\u02cag\u0003\u0002\u0002\u0002\u02cb\u02cc\u0005\u008cG\u0002\u02cc",
    "i\u0003\u0002\u0002\u0002\u02cd\u02ce\u0005\u008cG\u0002\u02cek\u0003",
    "\u0002\u0002\u0002\u02cf\u02d4\u0007t\u0002\u0002\u02d0\u02d1\u0007",
    "Q\u0002\u0002\u02d1\u02d3\u0007t\u0002\u0002\u02d2\u02d0\u0003\u0002",
    "\u0002\u0002\u02d3\u02d6\u0003\u0002\u0002\u0002\u02d4\u02d2\u0003\u0002",
    "\u0002\u0002\u02d4\u02d5\u0003\u0002\u0002\u0002\u02d5m\u0003\u0002",
    "\u0002\u0002\u02d6\u02d4\u0003\u0002\u0002\u0002\u02d7\u02d8\t\u0006",
    "\u0002\u0002\u02d8o\u0003\u0002\u0002\u0002\u02d9\u02da\u0007u\u0002",
    "\u0002\u02da\u02e1\u0005r:\u0002\u02db\u02de\u0007I\u0002\u0002\u02dc",
    "\u02df\u0005t;\u0002\u02dd\u02df\u0005x=\u0002\u02de\u02dc\u0003\u0002",
    "\u0002\u0002\u02de\u02dd\u0003\u0002\u0002\u0002\u02de\u02df\u0003\u0002",
    "\u0002\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0\u02e2\u0007J",
    "\u0002\u0002\u02e1\u02db\u0003\u0002\u0002\u0002\u02e1\u02e2\u0003\u0002",
    "\u0002\u0002\u02e2q\u0003\u0002\u0002\u0002\u02e3\u02e4\u0005l7\u0002",
    "\u02e4s\u0003\u0002\u0002\u0002\u02e5\u02ea\u0005v<\u0002\u02e6\u02e7",
    "\u0007P\u0002\u0002\u02e7\u02e9\u0005v<\u0002\u02e8\u02e6\u0003\u0002",
    "\u0002\u0002\u02e9\u02ec\u0003\u0002\u0002\u0002\u02ea\u02e8\u0003\u0002",
    "\u0002\u0002\u02ea\u02eb\u0003\u0002\u0002\u0002\u02ebu\u0003\u0002",
    "\u0002\u0002\u02ec\u02ea\u0003\u0002\u0002\u0002\u02ed\u02ee\u0007t",
    "\u0002\u0002\u02ee\u02ef\u0007R\u0002\u0002\u02ef\u02f0\u0005x=\u0002",
    "\u02f0w\u0003\u0002\u0002\u0002\u02f1\u02f5\u0005\u00ba^\u0002\u02f2",
    "\u02f5\u0005p9\u0002\u02f3\u02f5\u0005z>\u0002\u02f4\u02f1\u0003\u0002",
    "\u0002\u0002\u02f4\u02f2\u0003\u0002\u0002\u0002\u02f4\u02f3\u0003\u0002",
    "\u0002\u0002\u02f5y\u0003\u0002\u0002\u0002\u02f6\u02ff\u0007K\u0002",
    "\u0002\u02f7\u02fc\u0005x=\u0002\u02f8\u02f9\u0007P\u0002\u0002\u02f9",
    "\u02fb\u0005x=\u0002\u02fa\u02f8\u0003\u0002\u0002\u0002\u02fb\u02fe",
    "\u0003\u0002\u0002\u0002\u02fc\u02fa\u0003\u0002\u0002\u0002\u02fc\u02fd",
    "\u0003\u0002\u0002\u0002\u02fd\u0300\u0003\u0002\u0002\u0002\u02fe\u02fc",
    "\u0003\u0002\u0002\u0002\u02ff\u02f7\u0003\u0002\u0002\u0002\u02ff\u0300",
    "\u0003\u0002\u0002\u0002\u0300\u0302\u0003\u0002\u0002\u0002\u0301\u0303",
    "\u0007P\u0002\u0002\u0302\u0301\u0003\u0002\u0002\u0002\u0302\u0303",
    "\u0003\u0002\u0002\u0002\u0303\u0304\u0003\u0002\u0002\u0002\u0304\u0305",
    "\u0007L\u0002\u0002\u0305{\u0003\u0002\u0002\u0002\u0306\u0307\u0007",
    "u\u0002\u0002\u0307\u0308\u0007$\u0002\u0002\u0308\u0309\u0007t\u0002",
    "\u0002\u0309\u030a\u0005~@\u0002\u030a}\u0003\u0002\u0002\u0002\u030b",
    "\u030f\u0007K\u0002\u0002\u030c\u030e\u0005\u0080A\u0002\u030d\u030c",
    "\u0003\u0002\u0002\u0002\u030e\u0311\u0003\u0002\u0002\u0002\u030f\u030d",
    "\u0003\u0002\u0002\u0002\u030f\u0310\u0003\u0002\u0002\u0002\u0310\u0312",
    "\u0003\u0002\u0002\u0002\u0311\u030f\u0003\u0002\u0002\u0002\u0312\u0313",
    "\u0007L\u0002\u0002\u0313\u007f\u0003\u0002\u0002\u0002\u0314\u0316",
    "\u0005\n\u0006\u0002\u0315\u0314\u0003\u0002\u0002\u0002\u0316\u0319",
    "\u0003\u0002\u0002\u0002\u0317\u0315\u0003\u0002\u0002\u0002\u0317\u0318",
    "\u0003\u0002\u0002\u0002\u0318\u031a\u0003\u0002\u0002\u0002\u0319\u0317",
    "\u0003\u0002\u0002\u0002\u031a\u031d\u0005\u0082B\u0002\u031b\u031d",
    "\u0007O\u0002\u0002\u031c\u0317\u0003\u0002\u0002\u0002\u031c\u031b",
    "\u0003\u0002\u0002\u0002\u031d\u0081\u0003\u0002\u0002\u0002\u031e\u031f",
    "\u0005T+\u0002\u031f\u0320\u0005\u0084C\u0002\u0320\u0321\u0007O\u0002",
    "\u0002\u0321\u0333\u0003\u0002\u0002\u0002\u0322\u0324\u0005\u0012\n",
    "\u0002\u0323\u0325\u0007O\u0002\u0002\u0324\u0323\u0003\u0002\u0002",
    "\u0002\u0324\u0325\u0003\u0002\u0002\u0002\u0325\u0333\u0003\u0002\u0002",
    "\u0002\u0326\u0328\u0005\"\u0012\u0002\u0327\u0329\u0007O\u0002\u0002",
    "\u0328\u0327\u0003\u0002\u0002\u0002\u0328\u0329\u0003\u0002\u0002\u0002",
    "\u0329\u0333\u0003\u0002\u0002\u0002\u032a\u032c\u0005\u001a\u000e\u0002",
    "\u032b\u032d\u0007O\u0002\u0002\u032c\u032b\u0003\u0002\u0002\u0002",
    "\u032c\u032d\u0003\u0002\u0002\u0002\u032d\u0333\u0003\u0002\u0002\u0002",
    "\u032e\u0330\u0005|?\u0002\u032f\u0331\u0007O\u0002\u0002\u0330\u032f",
    "\u0003\u0002\u0002\u0002\u0330\u0331\u0003\u0002\u0002\u0002\u0331\u0333",
    "\u0003\u0002\u0002\u0002\u0332\u031e\u0003\u0002\u0002\u0002\u0332\u0322",
    "\u0003\u0002\u0002\u0002\u0332\u0326\u0003\u0002\u0002\u0002\u0332\u032a",
    "\u0003\u0002\u0002\u0002\u0332\u032e\u0003\u0002\u0002\u0002\u0333\u0083",
    "\u0003\u0002\u0002\u0002\u0334\u0337\u0005\u0086D\u0002\u0335\u0337",
    "\u0005\u0088E\u0002\u0336\u0334\u0003\u0002\u0002\u0002\u0336\u0335",
    "\u0003\u0002\u0002\u0002\u0337\u0085\u0003\u0002\u0002\u0002\u0338\u0339",
    "\u0007t\u0002\u0002\u0339\u033a\u0007I\u0002\u0002\u033a\u033c\u0007",
    "J\u0002\u0002\u033b\u033d\u0005\u008aF\u0002\u033c\u033b\u0003\u0002",
    "\u0002\u0002\u033c\u033d\u0003\u0002\u0002\u0002\u033d\u0087\u0003\u0002",
    "\u0002\u0002\u033e\u033f\u0005H%\u0002\u033f\u0089\u0003\u0002\u0002",
    "\u0002\u0340\u0341\u0007\u0015\u0002\u0002\u0341\u0342\u0005x=\u0002",
    "\u0342\u008b\u0003\u0002\u0002\u0002\u0343\u0347\u0007K\u0002\u0002",
    "\u0344\u0346\u0005\u008eH\u0002\u0345\u0344\u0003\u0002\u0002\u0002",
    "\u0346\u0349\u0003\u0002\u0002\u0002\u0347\u0345\u0003\u0002\u0002\u0002",
    "\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u034a\u0003\u0002\u0002\u0002",
    "\u0349\u0347\u0003\u0002\u0002\u0002\u034a\u034b\u0007L\u0002\u0002",
    "\u034b\u008d\u0003\u0002\u0002\u0002\u034c\u0350\u0005\u0090I\u0002",
    "\u034d\u0350\u0005\u0094K\u0002\u034e\u0350\u0005\b\u0005\u0002\u034f",
    "\u034c\u0003\u0002\u0002\u0002\u034f\u034d\u0003\u0002\u0002\u0002\u034f",
    "\u034e\u0003\u0002\u0002\u0002\u0350\u008f\u0003\u0002\u0002\u0002\u0351",
    "\u0352\u0005\u0092J\u0002\u0352\u0353\u0007O\u0002\u0002\u0353\u0091",
    "\u0003\u0002\u0002\u0002\u0354\u0356\u0005\u0010\t\u0002\u0355\u0354",
    "\u0003\u0002\u0002\u0002\u0356\u0359\u0003\u0002\u0002\u0002\u0357\u0355",
    "\u0003\u0002\u0002\u0002\u0357\u0358\u0003\u0002\u0002\u0002\u0358\u035a",
    "\u0003\u0002\u0002\u0002\u0359\u0357\u0003\u0002\u0002\u0002\u035a\u035b",
    "\u0005T+\u0002\u035b\u035c\u0005H%\u0002\u035c\u0093\u0003\u0002\u0002",
    "\u0002\u035d\u03a9\u0005\u008cG\u0002\u035e\u035f\u0007\u001e\u0002",
    "\u0002\u035f\u0360\u0005\u00b2Z\u0002\u0360\u0363\u0005\u0094K\u0002",
    "\u0361\u0362\u0007\u0017\u0002\u0002\u0362\u0364\u0005\u0094K\u0002",
    "\u0363\u0361\u0003\u0002\u0002\u0002\u0363\u0364\u0003\u0002\u0002\u0002",
    "\u0364\u03a9\u0003\u0002\u0002\u0002\u0365\u0366\u0007\u001d\u0002\u0002",
    "\u0366\u0367\u0007I\u0002\u0002\u0367\u0368\u0005\u00a8U\u0002\u0368",
    "\u0369\u0007J\u0002\u0002\u0369\u036a\u0005\u0094K\u0002\u036a\u03a9",
    "\u0003\u0002\u0002\u0002\u036b\u036c\u00078\u0002\u0002\u036c\u036d",
    "\u0005\u00b2Z\u0002\u036d\u036e\u0005\u0094K\u0002\u036e\u03a9\u0003",
    "\u0002\u0002\u0002\u036f\u0370\u0007\u0016\u0002\u0002\u0370\u0371\u0005",
    "\u0094K\u0002\u0371\u0372\u00078\u0002\u0002\u0372\u0373\u0005\u00b2",
    "Z\u0002\u0373\u0374\u0007O\u0002\u0002\u0374\u03a9\u0003\u0002\u0002",
    "\u0002\u0375\u0376\u00075\u0002\u0002\u0376\u0380\u0005\u008cG\u0002",
    "\u0377\u0379\u0005\u009cO\u0002\u0378\u0377\u0003\u0002\u0002\u0002",
    "\u0379\u037a\u0003\u0002\u0002\u0002\u037a\u0378\u0003\u0002\u0002\u0002",
    "\u037a\u037b\u0003\u0002\u0002\u0002\u037b\u037d\u0003\u0002\u0002\u0002",
    "\u037c\u037e\u0005\u00a0Q\u0002\u037d\u037c\u0003\u0002\u0002\u0002",
    "\u037d\u037e\u0003\u0002\u0002\u0002\u037e\u0381\u0003\u0002\u0002\u0002",
    "\u037f\u0381\u0005\u00a0Q\u0002\u0380\u0378\u0003\u0002\u0002\u0002",
    "\u0380\u037f\u0003\u0002\u0002\u0002\u0381\u03a9\u0003\u0002\u0002\u0002",
    "\u0382\u0383\u00075\u0002\u0002\u0383\u0384\u0005\u00a2R\u0002\u0384",
    "\u0388\u0005\u008cG\u0002\u0385\u0387\u0005\u009cO\u0002\u0386\u0385",
    "\u0003\u0002\u0002\u0002\u0387\u038a\u0003\u0002\u0002\u0002\u0388\u0386",
    "\u0003\u0002\u0002\u0002\u0388\u0389\u0003\u0002\u0002\u0002\u0389\u038c",
    "\u0003\u0002\u0002\u0002\u038a\u0388\u0003\u0002\u0002\u0002\u038b\u038d",
    "\u0005\u00a0Q\u0002\u038c\u038b\u0003\u0002\u0002\u0002\u038c\u038d",
    "\u0003\u0002\u0002\u0002\u038d\u03a9\u0003\u0002\u0002\u0002\u038e\u0390",
    "\u0007,\u0002\u0002\u038f\u0391\u0005\u00ba^\u0002\u0390\u038f\u0003",
    "\u0002\u0002\u0002\u0390\u0391\u0003\u0002\u0002\u0002\u0391\u0392\u0003",
    "\u0002\u0002\u0002\u0392\u03a9\u0007O\u0002\u0002\u0393\u0394\u0007",
    "2\u0002\u0002\u0394\u0395\u0005\u00ba^\u0002\u0395\u0396\u0007O\u0002",
    "\u0002\u0396\u03a9\u0003\u0002\u0002\u0002\u0397\u0399\u0007\u000e\u0002",
    "\u0002\u0398\u039a\u0007t\u0002\u0002\u0399\u0398\u0003\u0002\u0002",
    "\u0002\u0399\u039a\u0003\u0002\u0002\u0002\u039a\u039b\u0003\u0002\u0002",
    "\u0002\u039b\u03a9\u0007O\u0002\u0002\u039c\u039e\u0007\u0014\u0002",
    "\u0002\u039d\u039f\u0007t\u0002\u0002\u039e\u039d\u0003\u0002\u0002",
    "\u0002\u039e\u039f\u0003\u0002\u0002\u0002\u039f\u03a0\u0003\u0002\u0002",
    "\u0002\u03a0\u03a9\u0007O\u0002\u0002\u03a1\u03a9\u0007O\u0002\u0002",
    "\u03a2\u03a3\u0005\u00b6\\\u0002\u03a3\u03a4\u0007O\u0002\u0002\u03a4",
    "\u03a9\u0003\u0002\u0002\u0002\u03a5\u03a6\u0007t\u0002\u0002\u03a6",
    "\u03a7\u0007X\u0002\u0002\u03a7\u03a9\u0005\u0094K\u0002\u03a8\u035d",
    "\u0003\u0002\u0002\u0002\u03a8\u035e\u0003\u0002\u0002\u0002\u03a8\u0365",
    "\u0003\u0002\u0002\u0002\u03a8\u036b\u0003\u0002\u0002\u0002\u03a8\u036f",
    "\u0003\u0002\u0002\u0002\u03a8\u0375\u0003\u0002\u0002\u0002\u03a8\u0382",
    "\u0003\u0002\u0002\u0002\u03a8\u038e\u0003\u0002\u0002\u0002\u03a8\u0393",
    "\u0003\u0002\u0002\u0002\u03a8\u0397\u0003\u0002\u0002\u0002\u03a8\u039c",
    "\u0003\u0002\u0002\u0002\u03a8\u03a1\u0003\u0002\u0002\u0002\u03a8\u03a2",
    "\u0003\u0002\u0002\u0002\u03a8\u03a5\u0003\u0002\u0002\u0002\u03a9\u0095",
    "\u0003\u0002\u0002\u0002\u03aa\u03ac\u0005\n\u0006\u0002\u03ab\u03aa",
    "\u0003\u0002\u0002\u0002\u03ac\u03af\u0003\u0002\u0002\u0002\u03ad\u03ab",
    "\u0003\u0002\u0002\u0002\u03ad\u03ae\u0003\u0002\u0002\u0002\u03ae\u03b2",
    "\u0003\u0002\u0002\u0002\u03af\u03ad\u0003\u0002\u0002\u0002\u03b0\u03b3",
    "\u0005\u0098M\u0002\u03b1\u03b3\u0005\u009aN\u0002\u03b2\u03b0\u0003",
    "\u0002\u0002\u0002\u03b2\u03b1\u0003\u0002\u0002\u0002\u03b3\u0097\u0003",
    "\u0002\u0002\u0002\u03b4\u03b7\u0007\n\u0002\u0002\u03b5\u03b8\u0007",
    "O\u0002\u0002\u03b6\u03b8\u0005h5\u0002\u03b7\u03b5\u0003\u0002\u0002",
    "\u0002\u03b7\u03b6\u0003\u0002\u0002\u0002\u03b8\u0099\u0003\u0002\u0002",
    "\u0002\u03b9\u03bc\u0007\b\u0002\u0002\u03ba\u03bd\u0007O\u0002\u0002",
    "\u03bb\u03bd\u0005h5\u0002\u03bc\u03ba\u0003\u0002\u0002\u0002\u03bc",
    "\u03bb\u0003\u0002\u0002\u0002\u03bd\u009b\u0003\u0002\u0002\u0002\u03be",
    "\u03bf\u0007\u0010\u0002\u0002\u03bf\u03c3\u0007I\u0002\u0002\u03c0",
    "\u03c2\u0005\u0010\t\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c2",
    "\u03c5\u0003\u0002\u0002\u0002\u03c3\u03c1\u0003\u0002\u0002\u0002\u03c3",
    "\u03c4\u0003\u0002\u0002\u0002\u03c4\u03c6\u0003\u0002\u0002\u0002\u03c5",
    "\u03c3\u0003\u0002\u0002\u0002\u03c6\u03c7\u0005\u009eP\u0002\u03c7",
    "\u03c8\u0007t\u0002\u0002\u03c8\u03c9\u0007J\u0002\u0002\u03c9\u03ca",
    "\u0005\u008cG\u0002\u03ca\u009d\u0003\u0002\u0002\u0002\u03cb\u03d0",
    "\u0005l7\u0002\u03cc\u03cd\u0007f\u0002\u0002\u03cd\u03cf\u0005l7\u0002",
    "\u03ce\u03cc\u0003\u0002\u0002\u0002\u03cf\u03d2\u0003\u0002\u0002\u0002",
    "\u03d0\u03ce\u0003\u0002\u0002\u0002\u03d0\u03d1\u0003\u0002\u0002\u0002",
    "\u03d1\u009f\u0003\u0002\u0002\u0002\u03d2\u03d0\u0003\u0002\u0002\u0002",
    "\u03d3\u03d4\u0007\u001b\u0002\u0002\u03d4\u03d5\u0005\u008cG\u0002",
    "\u03d5\u00a1\u0003\u0002\u0002\u0002\u03d6\u03d7\u0007I\u0002\u0002",
    "\u03d7\u03d9\u0005\u00a4S\u0002\u03d8\u03da\u0007O\u0002\u0002\u03d9",
    "\u03d8\u0003\u0002\u0002\u0002\u03d9\u03da\u0003\u0002\u0002\u0002\u03da",
    "\u03db\u0003\u0002\u0002\u0002\u03db\u03dc\u0007J\u0002\u0002\u03dc",
    "\u00a3\u0003\u0002\u0002\u0002\u03dd\u03e2\u0005\u00a6T\u0002\u03de",
    "\u03df\u0007O\u0002\u0002\u03df\u03e1\u0005\u00a6T\u0002\u03e0\u03de",
    "\u0003\u0002\u0002\u0002\u03e1\u03e4\u0003\u0002\u0002\u0002\u03e2\u03e0",
    "\u0003\u0002\u0002\u0002\u03e2\u03e3\u0003\u0002\u0002\u0002\u03e3\u00a5",
    "\u0003\u0002\u0002\u0002\u03e4\u03e2\u0003\u0002\u0002\u0002\u03e5\u03e7",
    "\u0005\u0010\t\u0002\u03e6\u03e5\u0003\u0002\u0002\u0002\u03e7\u03ea",
    "\u0003\u0002\u0002\u0002\u03e8\u03e6\u0003\u0002\u0002\u0002\u03e8\u03e9",
    "\u0003\u0002\u0002\u0002\u03e9\u03eb\u0003\u0002\u0002\u0002\u03ea\u03e8",
    "\u0003\u0002\u0002\u0002\u03eb\u03ec\u0005V,\u0002\u03ec\u03ed\u0005",
    "L\'\u0002\u03ed\u03ee\u0007R\u0002\u0002\u03ee\u03ef\u0005\u00ba^\u0002",
    "\u03ef\u00a7\u0003\u0002\u0002\u0002\u03f0\u03fd\u0005\u00acW\u0002",
    "\u03f1\u03f3\u0005\u00aaV\u0002\u03f2\u03f1\u0003\u0002\u0002\u0002",
    "\u03f2\u03f3\u0003\u0002\u0002\u0002\u03f3\u03f4\u0003\u0002\u0002\u0002",
    "\u03f4\u03f6\u0007O\u0002\u0002\u03f5\u03f7\u0005\u00ba^\u0002\u03f6",
    "\u03f5\u0003\u0002\u0002\u0002\u03f6\u03f7\u0003\u0002\u0002\u0002\u03f7",
    "\u03f8\u0003\u0002\u0002\u0002\u03f8\u03fa\u0007O\u0002\u0002\u03f9",
    "\u03fb\u0005\u00aeX\u0002\u03fa\u03f9\u0003\u0002\u0002\u0002\u03fa",
    "\u03fb\u0003\u0002\u0002\u0002\u03fb\u03fd\u0003\u0002\u0002\u0002\u03fc",
    "\u03f0\u0003\u0002\u0002\u0002\u03fc\u03f2\u0003\u0002\u0002\u0002\u03fd",
    "\u00a9\u0003\u0002\u0002\u0002\u03fe\u0401\u0005\u0092J\u0002\u03ff",
    "\u0401\u0005\u00b4[\u0002\u0400\u03fe\u0003\u0002\u0002\u0002\u0400",
    "\u03ff\u0003\u0002\u0002\u0002\u0401\u00ab\u0003\u0002\u0002\u0002\u0402",
    "\u0404\u0005\u0010\t\u0002\u0403\u0402\u0003\u0002\u0002\u0002\u0404",
    "\u0407\u0003\u0002\u0002\u0002\u0405\u0403\u0003\u0002\u0002\u0002\u0405",
    "\u0406\u0003\u0002\u0002\u0002\u0406\u0408\u0003\u0002\u0002\u0002\u0407",
    "\u0405\u0003\u0002\u0002\u0002\u0408\u0409\u0005T+\u0002\u0409\u040a",
    "\u0005L\'\u0002\u040a\u040b\u0007X\u0002\u0002\u040b\u040c\u0005\u00ba",
    "^\u0002\u040c\u00ad\u0003\u0002\u0002\u0002\u040d\u040e\u0005\u00b4",
    "[\u0002\u040e\u00af\u0003\u0002\u0002\u0002\u040f\u0410\t\u0007\u0002",
    "\u0002\u0410\u0411\u0005\u00ba^\u0002\u0411\u00b1\u0003\u0002\u0002",
    "\u0002\u0412\u0413\u0007I\u0002\u0002\u0413\u0414\u0005\u00ba^\u0002",
    "\u0414\u0415\u0007J\u0002\u0002\u0415\u00b3\u0003\u0002\u0002\u0002",
    "\u0416\u041b\u0005\u00ba^\u0002\u0417\u0418\u0007P\u0002\u0002\u0418",
    "\u041a\u0005\u00ba^\u0002\u0419\u0417\u0003\u0002\u0002\u0002\u041a",
    "\u041d\u0003\u0002\u0002\u0002\u041b\u0419\u0003\u0002\u0002\u0002\u041b",
    "\u041c\u0003\u0002\u0002\u0002\u041c\u00b5\u0003\u0002\u0002\u0002\u041d",
    "\u041b\u0003\u0002\u0002\u0002\u041e\u0421\u0005\u00ba^\u0002\u041f",
    "\u0421\u0005\u00b0Y\u0002\u0420\u041e\u0003\u0002\u0002\u0002\u0420",
    "\u041f\u0003\u0002\u0002\u0002\u0421\u00b7\u0003\u0002\u0002\u0002\u0422",
    "\u0423\u0005\u00ba^\u0002\u0423\u00b9\u0003\u0002\u0002\u0002\u0424",
    "\u0425\b^\u0001\u0002\u0425\u0432\u0005\u00bc_\u0002\u0426\u0427\u0007",
    "\'\u0002\u0002\u0427\u0432\u0005\u00be`\u0002\u0428\u0429\u0007I\u0002",
    "\u0002\u0429\u042a\u0005T+\u0002\u042a\u042b\u0007J\u0002\u0002\u042b",
    "\u042c\u0005\u00ba^\u0013\u042c\u0432\u0003\u0002\u0002\u0002\u042d",
    "\u042e\t\b\u0002\u0002\u042e\u0432\u0005\u00ba^\u0011\u042f\u0430\t",
    "\t\u0002\u0002\u0430\u0432\u0005\u00ba^\u0010\u0431\u0424\u0003\u0002",
    "\u0002\u0002\u0431\u0426\u0003\u0002\u0002\u0002\u0431\u0428\u0003\u0002",
    "\u0002\u0002\u0431\u042d\u0003\u0002\u0002\u0002\u0431\u042f\u0003\u0002",
    "\u0002\u0002\u0432\u0498\u0003\u0002\u0002\u0002\u0433\u0434\f\u000f",
    "\u0002\u0002\u0434\u0435\t\n\u0002\u0002\u0435\u0497\u0005\u00ba^\u0010",
    "\u0436\u0437\f\u000e\u0002\u0002\u0437\u0438\t\u000b\u0002\u0002\u0438",
    "\u0497\u0005\u00ba^\u000f\u0439\u0441\f\r\u0002\u0002\u043a\u043b\u0007",
    "T\u0002\u0002\u043b\u0442\u0007T\u0002\u0002\u043c\u043d\u0007S\u0002",
    "\u0002\u043d\u043e\u0007S\u0002\u0002\u043e\u0442\u0007S\u0002\u0002",
    "\u043f\u0440\u0007S\u0002\u0002\u0440\u0442\u0007S\u0002\u0002\u0441",
    "\u043a\u0003\u0002\u0002\u0002\u0441\u043c\u0003\u0002\u0002\u0002\u0441",
    "\u043f\u0003\u0002\u0002\u0002\u0442\u0443\u0003\u0002\u0002\u0002\u0443",
    "\u0497\u0005\u00ba^\u000e\u0444\u0445\f\f\u0002\u0002\u0445\u0446\t",
    "\f\u0002\u0002\u0446\u0497\u0005\u00ba^\r\u0447\u0448\f\n\u0002\u0002",
    "\u0448\u0449\t\r\u0002\u0002\u0449\u0497\u0005\u00ba^\u000b\u044a\u044b",
    "\f\t\u0002\u0002\u044b\u044c\u0007e\u0002\u0002\u044c\u0497\u0005\u00ba",
    "^\n\u044d\u044e\f\b\u0002\u0002\u044e\u044f\u0007g\u0002\u0002\u044f",
    "\u0497\u0005\u00ba^\t\u0450\u0451\f\u0007\u0002\u0002\u0451\u0452\u0007",
    "f\u0002\u0002\u0452\u0497\u0005\u00ba^\b\u0453\u0454\f\u0006\u0002\u0002",
    "\u0454\u0455\u0007]\u0002\u0002\u0455\u0497\u0005\u00ba^\u0007\u0456",
    "\u0457\f\u0005\u0002\u0002\u0457\u0458\u0007^\u0002\u0002\u0458\u0497",
    "\u0005\u00ba^\u0006\u0459\u045a\f\u0004\u0002\u0002\u045a\u045b\u0007",
    "W\u0002\u0002\u045b\u045c\u0005\u00ba^\u0002\u045c\u045d\u0007X\u0002",
    "\u0002\u045d\u045e\u0005\u00ba^\u0005\u045e\u0497\u0003\u0002\u0002",
    "\u0002\u045f\u0460\f\u0003\u0002\u0002\u0460\u0461\t\u000e\u0002\u0002",
    "\u0461\u0497\u0005\u00ba^\u0003\u0462\u0463\f\u001d\u0002\u0002\u0463",
    "\u0464\u0007Q\u0002\u0002\u0464\u0465\u0007\n\u0002\u0002\u0465\u0467",
    "\u0007I\u0002\u0002\u0466\u0468\u0005\u00b4[\u0002\u0467\u0466\u0003",
    "\u0002\u0002\u0002\u0467\u0468\u0003\u0002\u0002\u0002\u0468\u0469\u0003",
    "\u0002\u0002\u0002\u0469\u0497\u0007J\u0002\u0002\u046a\u046b\f\u001c",
    "\u0002\u0002\u046b\u046c\u0007Q\u0002\u0002\u046c\u046d\u0007\b\u0002",
    "\u0002\u046d\u046f\u0007I\u0002\u0002\u046e\u0470\u0005\u00b4[\u0002",
    "\u046f\u046e\u0003\u0002\u0002\u0002\u046f\u0470\u0003\u0002\u0002\u0002",
    "\u0470\u0471\u0003\u0002\u0002\u0002\u0471\u0497\u0007J\u0002\u0002",
    "\u0472\u0473\f\u001b\u0002\u0002\u0473\u0474\u0007Q\u0002\u0002\u0474",
    "\u0497\u0007t\u0002\u0002\u0475\u0476\f\u001a\u0002\u0002\u0476\u0477",
    "\u0007Q\u0002\u0002\u0477\u0497\u00071\u0002\u0002\u0478\u0479\f\u0019",
    "\u0002\u0002\u0479\u047a\u0007Q\u0002\u0002\u047a\u047c\u0007\'\u0002",
    "\u0002\u047b\u047d\u0005\u00ceh\u0002\u047c\u047b\u0003\u0002\u0002",
    "\u0002\u047c\u047d\u0003\u0002\u0002\u0002\u047d\u047e\u0003\u0002\u0002",
    "\u0002\u047e\u0497\u0005\u00c2b\u0002\u047f\u0480\f\u0018\u0002\u0002",
    "\u0480\u0481\u0007Q\u0002\u0002\u0481\u0482\u0007/\u0002\u0002\u0482",
    "\u0497\u0005\u00d4k\u0002\u0483\u0484\f\u0017\u0002\u0002\u0484\u0485",
    "\u0007Q\u0002\u0002\u0485\u0497\u0005\u00ccg\u0002\u0486\u0487\f\u0016",
    "\u0002\u0002\u0487\u0488\u0007M\u0002\u0002\u0488\u0489\u0005\u00ba",
    "^\u0002\u0489\u048a\u0007N\u0002\u0002\u048a\u0497\u0003\u0002\u0002",
    "\u0002\u048b\u048c\f\u0015\u0002\u0002\u048c\u048e\u0007I\u0002\u0002",
    "\u048d\u048f\u0005\u00b4[\u0002\u048e\u048d\u0003\u0002\u0002\u0002",
    "\u048e\u048f\u0003\u0002\u0002\u0002\u048f\u0490\u0003\u0002\u0002\u0002",
    "\u0490\u0497\u0007J\u0002\u0002\u0491\u0492\f\u0012\u0002\u0002\u0492",
    "\u0497\t\u000f\u0002\u0002\u0493\u0494\f\u000b\u0002\u0002\u0494\u0495",
    "\u0007\"\u0002\u0002\u0495\u0497\u0005T+\u0002\u0496\u0433\u0003\u0002",
    "\u0002\u0002\u0496\u0436\u0003\u0002\u0002\u0002\u0496\u0439\u0003\u0002",
    "\u0002\u0002\u0496\u0444\u0003\u0002\u0002\u0002\u0496\u0447\u0003\u0002",
    "\u0002\u0002\u0496\u044a\u0003\u0002\u0002\u0002\u0496\u044d\u0003\u0002",
    "\u0002\u0002\u0496\u0450\u0003\u0002\u0002\u0002\u0496\u0453\u0003\u0002",
    "\u0002\u0002\u0496\u0456\u0003\u0002\u0002\u0002\u0496\u0459\u0003\u0002",
    "\u0002\u0002\u0496\u045f\u0003\u0002\u0002\u0002\u0496\u0462\u0003\u0002",
    "\u0002\u0002\u0496\u046a\u0003\u0002\u0002\u0002\u0496\u0472\u0003\u0002",
    "\u0002\u0002\u0496\u0475\u0003\u0002\u0002\u0002\u0496\u0478\u0003\u0002",
    "\u0002\u0002\u0496\u047f\u0003\u0002\u0002\u0002\u0496\u0483\u0003\u0002",
    "\u0002\u0002\u0496\u0486\u0003\u0002\u0002\u0002\u0496\u048b\u0003\u0002",
    "\u0002\u0002\u0496\u0491\u0003\u0002\u0002\u0002\u0496\u0493\u0003\u0002",
    "\u0002\u0002\u0497\u049a\u0003\u0002\u0002\u0002\u0498\u0496\u0003\u0002",
    "\u0002\u0002\u0498\u0499\u0003\u0002\u0002\u0002\u0499\u00bb\u0003\u0002",
    "\u0002\u0002\u049a\u0498\u0003\u0002\u0002\u0002\u049b\u049c\u0007I",
    "\u0002\u0002\u049c\u049d\u0005\u00ba^\u0002\u049d\u049e\u0007J\u0002",
    "\u0002\u049e\u04b2\u0003\u0002\u0002\u0002\u049f\u04b2\u00071\u0002",
    "\u0002\u04a0\u04b2\u0007/\u0002\u0002\u04a1\u04b2\u0005n8\u0002\u04a2",
    "\u04b2\u0007t\u0002\u0002\u04a3\u04a4\u0005T+\u0002\u04a4\u04a5\u0007",
    "Q\u0002\u0002\u04a5\u04a6\u0007\u0012\u0002\u0002\u04a6\u04b2\u0003",
    "\u0002\u0002\u0002\u04a7\u04a8\u00076\u0002\u0002\u04a8\u04a9\u0007",
    "Q\u0002\u0002\u04a9\u04b2\u0007\u0012\u0002\u0002\u04aa\u04ae\u0005",
    "\u00ceh\u0002\u04ab\u04af\u0005\u00d6l\u0002\u04ac\u04ad\u00071\u0002",
    "\u0002\u04ad\u04af\u0005\u00d8m\u0002\u04ae\u04ab\u0003\u0002\u0002",
    "\u0002\u04ae\u04ac\u0003\u0002\u0002\u0002\u04af\u04b2\u0003\u0002\u0002",
    "\u0002\u04b0\u04b2\u0007\f\u0002\u0002\u04b1\u049b\u0003\u0002\u0002",
    "\u0002\u04b1\u049f\u0003\u0002\u0002\u0002\u04b1\u04a0\u0003\u0002\u0002",
    "\u0002\u04b1\u04a1\u0003\u0002\u0002\u0002\u04b1\u04a2\u0003\u0002\u0002",
    "\u0002\u04b1\u04a3\u0003\u0002\u0002\u0002\u04b1\u04a7\u0003\u0002\u0002",
    "\u0002\u04b1\u04aa\u0003\u0002\u0002\u0002\u04b1\u04b0\u0003\u0002\u0002",
    "\u0002\u04b2\u00bd\u0003\u0002\u0002\u0002\u04b3\u04b4\u0005\u00ceh",
    "\u0002\u04b4\u04b5\u0005\u00c0a\u0002\u04b5\u04b6\u0005\u00caf\u0002",
    "\u04b6\u04bf\u0003\u0002\u0002\u0002\u04b7\u04bc\u0005\u00c0a\u0002",
    "\u04b8\u04bd\u0005\u00c4c\u0002\u04b9\u04bd\u0005\u00caf\u0002\u04ba",
    "\u04bd\u0005\u00c6d\u0002\u04bb\u04bd\u0005\u00c8e\u0002\u04bc\u04b8",
    "\u0003\u0002\u0002\u0002\u04bc\u04b9\u0003\u0002\u0002\u0002\u04bc\u04ba",
    "\u0003\u0002\u0002\u0002\u04bc\u04bb\u0003\u0002\u0002\u0002\u04bd\u04bf",
    "\u0003\u0002\u0002\u0002\u04be\u04b3\u0003\u0002\u0002\u0002\u04be\u04b7",
    "\u0003\u0002\u0002\u0002\u04bf\u00bf\u0003\u0002\u0002\u0002\u04c0\u04c2",
    "\u0007t\u0002\u0002\u04c1\u04c3\u0005\u00d0i\u0002\u04c2\u04c1\u0003",
    "\u0002\u0002\u0002\u04c2\u04c3\u0003\u0002\u0002\u0002\u04c3\u04cb\u0003",
    "\u0002\u0002\u0002\u04c4\u04c5\u0007Q\u0002\u0002\u04c5\u04c7\u0007",
    "t\u0002\u0002\u04c6\u04c8\u0005\u00d0i\u0002\u04c7\u04c6\u0003\u0002",
    "\u0002\u0002\u04c7\u04c8\u0003\u0002\u0002\u0002\u04c8\u04ca\u0003\u0002",
    "\u0002\u0002\u04c9\u04c4\u0003\u0002\u0002\u0002\u04ca\u04cd\u0003\u0002",
    "\u0002\u0002\u04cb\u04c9\u0003\u0002\u0002\u0002\u04cb\u04cc\u0003\u0002",
    "\u0002\u0002\u04cc\u04d2\u0003\u0002\u0002\u0002\u04cd\u04cb\u0003\u0002",
    "\u0002\u0002\u04ce\u04d2\u0005X-\u0002\u04cf\u04d0\u0007\b\u0002\u0002",
    "\u04d0\u04d2\u0005\u00d0i\u0002\u04d1\u04c0\u0003\u0002\u0002\u0002",
    "\u04d1\u04ce\u0003\u0002\u0002\u0002\u04d1\u04cf\u0003\u0002\u0002\u0002",
    "\u04d2\u00c1\u0003\u0002\u0002\u0002\u04d3\u04d5\u0007t\u0002\u0002",
    "\u04d4\u04d6\u0005\u00d2j\u0002\u04d5\u04d4\u0003\u0002\u0002\u0002",
    "\u04d5\u04d6\u0003\u0002\u0002\u0002\u04d6\u04d7\u0003\u0002\u0002\u0002",
    "\u04d7\u04d8\u0005\u00caf\u0002\u04d8\u00c3\u0003\u0002\u0002\u0002",
    "\u04d9\u04f5\u0007M\u0002\u0002\u04da\u04df\u0007N\u0002\u0002\u04db",
    "\u04dc\u0007M\u0002\u0002\u04dc\u04de\u0007N\u0002\u0002\u04dd\u04db",
    "\u0003\u0002\u0002\u0002\u04de\u04e1\u0003\u0002\u0002\u0002\u04df\u04dd",
    "\u0003\u0002\u0002\u0002\u04df\u04e0\u0003\u0002\u0002\u0002\u04e0\u04e2",
    "\u0003\u0002\u0002\u0002\u04e1\u04df\u0003\u0002\u0002\u0002\u04e2\u04f6",
    "\u0005P)\u0002\u04e3\u04e4\u0005\u00ba^\u0002\u04e4\u04eb\u0007N\u0002",
    "\u0002\u04e5\u04e6\u0007M\u0002\u0002\u04e6\u04e7\u0005\u00ba^\u0002",
    "\u04e7\u04e8\u0007N\u0002\u0002\u04e8\u04ea\u0003\u0002\u0002\u0002",
    "\u04e9\u04e5\u0003\u0002\u0002\u0002\u04ea\u04ed\u0003\u0002\u0002\u0002",
    "\u04eb\u04e9\u0003\u0002\u0002\u0002\u04eb\u04ec\u0003\u0002\u0002\u0002",
    "\u04ec\u04f2\u0003\u0002\u0002\u0002\u04ed\u04eb\u0003\u0002\u0002\u0002",
    "\u04ee\u04ef\u0007M\u0002\u0002\u04ef\u04f1\u0007N\u0002\u0002\u04f0",
    "\u04ee\u0003\u0002\u0002\u0002\u04f1\u04f4\u0003\u0002\u0002\u0002\u04f2",
    "\u04f0\u0003\u0002\u0002\u0002\u04f2\u04f3\u0003\u0002\u0002\u0002\u04f3",
    "\u04f6\u0003\u0002\u0002\u0002\u04f4\u04f2\u0003\u0002\u0002\u0002\u04f5",
    "\u04da\u0003\u0002\u0002\u0002\u04f5\u04e3\u0003\u0002\u0002\u0002\u04f6",
    "\u00c5\u0003\u0002\u0002\u0002\u04f7\u0510\u0007K\u0002\u0002\u04f8",
    "\u04fb\u0005n8\u0002\u04f9\u04fb\u0005\u00ba^\u0002\u04fa\u04f8\u0003",
    "\u0002\u0002\u0002\u04fa\u04f9\u0003\u0002\u0002\u0002\u04fb\u04fc\u0003",
    "\u0002\u0002\u0002\u04fc\u04ff\u0007\u000b\u0002\u0002\u04fd\u0500\u0005",
    "n8\u0002\u04fe\u0500\u0005\u00ba^\u0002\u04ff\u04fd\u0003\u0002\u0002",
    "\u0002\u04ff\u04fe\u0003\u0002\u0002\u0002\u0500\u050d\u0003\u0002\u0002",
    "\u0002\u0501\u0504\u0007P\u0002\u0002\u0502\u0505\u0005n8\u0002\u0503",
    "\u0505\u0005\u00ba^\u0002\u0504\u0502\u0003\u0002\u0002\u0002\u0504",
    "\u0503\u0003\u0002\u0002\u0002\u0505\u0506\u0003\u0002\u0002\u0002\u0506",
    "\u0509\u0007\u000b\u0002\u0002\u0507\u050a\u0005n8\u0002\u0508\u050a",
    "\u0005\u00ba^\u0002\u0509\u0507\u0003\u0002\u0002\u0002\u0509\u0508",
    "\u0003\u0002\u0002\u0002\u050a\u050c\u0003\u0002\u0002\u0002\u050b\u0501",
    "\u0003\u0002\u0002\u0002\u050c\u050f\u0003\u0002\u0002\u0002\u050d\u050b",
    "\u0003\u0002\u0002\u0002\u050d\u050e\u0003\u0002\u0002\u0002\u050e\u0511",
    "\u0003\u0002\u0002\u0002\u050f\u050d\u0003\u0002\u0002\u0002\u0510\u04fa",
    "\u0003\u0002\u0002\u0002\u0510\u0511\u0003\u0002\u0002\u0002\u0511\u0512",
    "\u0003\u0002\u0002\u0002\u0512\u0513\u0007L\u0002\u0002\u0513\u00c7",
    "\u0003\u0002\u0002\u0002\u0514\u0517\u0007K\u0002\u0002\u0515\u0518",
    "\u0005n8\u0002\u0516\u0518\u0005\u00ba^\u0002\u0517\u0515\u0003\u0002",
    "\u0002\u0002\u0517\u0516\u0003\u0002\u0002\u0002\u0518\u0520\u0003\u0002",
    "\u0002\u0002\u0519\u051c\u0007P\u0002\u0002\u051a\u051d\u0005n8\u0002",
    "\u051b\u051d\u0005\u00ba^\u0002\u051c\u051a\u0003\u0002\u0002\u0002",
    "\u051c\u051b\u0003\u0002\u0002\u0002\u051d\u051f\u0003\u0002\u0002\u0002",
    "\u051e\u0519\u0003\u0002\u0002\u0002\u051f\u0522\u0003\u0002\u0002\u0002",
    "\u0520\u051e\u0003\u0002\u0002\u0002\u0520\u0521\u0003\u0002\u0002\u0002",
    "\u0521\u0523\u0003\u0002\u0002\u0002\u0522\u0520\u0003\u0002\u0002\u0002",
    "\u0523\u0524\u0007L\u0002\u0002\u0524\u00c9\u0003\u0002\u0002\u0002",
    "\u0525\u0527\u0005\u00d8m\u0002\u0526\u0528\u0005&\u0014\u0002\u0527",
    "\u0526\u0003\u0002\u0002\u0002\u0527\u0528\u0003\u0002\u0002\u0002\u0528",
    "\u00cb\u0003\u0002\u0002\u0002\u0529\u052a\u0005\u00ceh\u0002\u052a",
    "\u052b\u0005\u00d6l\u0002\u052b\u00cd\u0003\u0002\u0002\u0002\u052c",
    "\u052d\u0007T\u0002\u0002\u052d\u052e\u0005$\u0013\u0002\u052e\u052f",
    "\u0007S\u0002\u0002\u052f\u00cf\u0003\u0002\u0002\u0002\u0530\u0531",
    "\u0007T\u0002\u0002\u0531\u0534\u0007S\u0002\u0002\u0532\u0534\u0005",
    "Z.\u0002\u0533\u0530\u0003\u0002\u0002\u0002\u0533\u0532\u0003\u0002",
    "\u0002\u0002\u0534\u00d1\u0003\u0002\u0002\u0002\u0535\u0536\u0007T",
    "\u0002\u0002\u0536\u0539\u0007S\u0002\u0002\u0537\u0539\u0005\u00ce",
    "h\u0002\u0538\u0535\u0003\u0002\u0002\u0002\u0538\u0537\u0003\u0002",
    "\u0002\u0002\u0539\u00d3\u0003\u0002\u0002\u0002\u053a\u0541\u0005\u00d8",
    "m\u0002\u053b\u053c\u0007Q\u0002\u0002\u053c\u053e\u0007t\u0002\u0002",
    "\u053d\u053f\u0005\u00d8m\u0002\u053e\u053d\u0003\u0002\u0002\u0002",
    "\u053e\u053f\u0003\u0002\u0002\u0002\u053f\u0541\u0003\u0002\u0002\u0002",
    "\u0540\u053a\u0003\u0002\u0002\u0002\u0540\u053b\u0003\u0002\u0002\u0002",
    "\u0541\u00d5\u0003\u0002\u0002\u0002\u0542\u0543\u0007/\u0002\u0002",
    "\u0543\u0547\u0005\u00d4k\u0002\u0544\u0545\u0007t\u0002\u0002\u0545",
    "\u0547\u0005\u00d8m\u0002\u0546\u0542\u0003\u0002\u0002\u0002\u0546",
    "\u0544\u0003\u0002\u0002\u0002\u0547\u00d7\u0003\u0002\u0002\u0002\u0548",
    "\u054a\u0007I\u0002\u0002\u0549\u054b\u0005\u00b4[\u0002\u054a\u0549",
    "\u0003\u0002\u0002\u0002\u054a\u054b\u0003\u0002\u0002\u0002\u054b\u054c",
    "\u0003\u0002\u0002\u0002\u054c\u054d\u0007J\u0002\u0002\u054d\u00d9",
    "\u0003\u0002\u0002\u0002\u00a4\u00db\u00e0\u00e6\u00ee\u00f7\u00fc\u0103",
    "\u010a\u0111\u0118\u011d\u0121\u0126\u012d\u0132\u0136\u013a\u0144\u014c",
    "\u0153\u015a\u015e\u0161\u0164\u016d\u0173\u0178\u017b\u0181\u0187\u018b",
    "\u0194\u019b\u01a4\u01ab\u01b1\u01b5\u01c1\u01c4\u01c8\u01d0\u01d5\u01d9",
    "\u01e2\u01f4\u01fb\u0200\u0209\u0211\u021b\u0223\u022b\u0230\u023c\u0242",
    "\u0249\u024e\u0256\u025a\u025c\u0267\u026f\u0272\u0276\u027b\u027f\u0284",
    "\u028e\u0297\u0299\u02a0\u02a5\u02ae\u02b3\u02b6\u02bb\u02c4\u02d4\u02de",
    "\u02e1\u02ea\u02f4\u02fc\u02ff\u0302\u030f\u0317\u031c\u0324\u0328\u032c",
    "\u0330\u0332\u0336\u033c\u0347\u034f\u0357\u0363\u037a\u037d\u0380\u0388",
    "\u038c\u0390\u0399\u039e\u03a8\u03ad\u03b2\u03b7\u03bc\u03c3\u03d0\u03d9",
    "\u03e2\u03e8\u03f2\u03f6\u03fa\u03fc\u0400\u0405\u041b\u0420\u0431\u0441",
    "\u0467\u046f\u047c\u048e\u0496\u0498\u04ae\u04b1\u04bc\u04be\u04c2\u04c7",
    "\u04cb\u04d1\u04d5\u04df\u04eb\u04f2\u04f5\u04fa\u04ff\u0504\u0509\u050d",
    "\u0510\u0517\u051c\u0520\u0527\u0533\u0538\u053e\u0540\u0546\u054a"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'override'", "'virtual'", "'with'", "'without'", 
                     "'sharing'", "'set'", "'there_are_no_primitives_in_apex'", 
                     "'get'", "'=>'", null, "'abstract'", "'break'", "'byte'", 
                     "'catch'", "'char'", "'class'", "'const'", "'continue'", 
                     "'default'", "'do'", "'else'", "'enum'", "'extends'", 
                     "'final'", "'finally'", "'float'", "'for'", "'if'", 
                     "'goto'", "'implements'", "'import'", "'instanceof'", 
                     "'int'", "'interface'", "'long'", "'native'", "'new'", 
                     "'package'", "'private'", "'protected'", "'public'", 
                     "'return'", "'short'", "'static'", "'super'", "'synchronized'", 
                     "'this'", "'throw'", "'throws'", "'transient'", "'try'", 
                     "'void'", "'volatile'", "'while'", "'global'", "'webservice'", 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, "'null'", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", 
                     "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", 
                     "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
                     "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", 
                     "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
                     "'<<='", "'>>='", "'>>>='", null, "'@'", "'...'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, "SoqlLiteral", "ABSTRACT", "BREAK", "BYTE", 
                      "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", 
                      "DO", "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", 
                      "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", "IMPORT", 
                      "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", 
                      "NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", 
                      "RETURN", "SHORT", "STATIC", "SUPER", "SYNCHRONIZED", 
                      "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", 
                      "VOLATILE", "WHILE", "GLOBAL", "WEBSERVICE", "SELECT", 
                      "TESTMETHOD", "TRIGGER_NEW", "DB_UPDATE", "DB_UPSERT", 
                      "DB_DELETE", "DB_INSERT", "DB_UNDELETE", "IntegerLiteral", 
                      "FloatingPointLiteral", "BooleanLiteral", "CharacterLiteral", 
                      "StringLiteral", "NullLiteral", "LPAREN", "RPAREN", 
                      "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
                      "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", 
                      "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", 
                      "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", 
                      "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
                      "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                      "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                      "URSHIFT_ASSIGN", "Identifier", "AT", "ELLIPSIS", 
                      "WS", "APEXDOC_COMMENT", "COMMENT", "LINE_COMMENT" ];

var ruleNames =  [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                   "typeDeclaration", "modifier", "classOrInterfaceModifier", 
                   "sharingModifier", "variableModifier", "classDeclaration", 
                   "typeParameters", "typeParameter", "typeBound", "enumDeclaration", 
                   "enumConstants", "enumConstant", "enumBodyDeclarations", 
                   "interfaceDeclaration", "typeList", "classBody", "interfaceBody", 
                   "classBodyDeclaration", "memberDeclaration", "methodDeclaration", 
                   "genericMethodDeclaration", "constructorDeclaration", 
                   "genericConstructorDeclaration", "fieldDeclaration", 
                   "propertyDeclaration", "propertyBodyDeclaration", "interfaceBodyDeclaration", 
                   "interfaceMemberDeclaration", "constDeclaration", "constantDeclarator", 
                   "interfaceMethodDeclaration", "genericInterfaceMethodDeclaration", 
                   "variableDeclarators", "variableDeclarator", "variableDeclaratorId", 
                   "variableInitializer", "arrayInitializer", "enumConstantName", 
                   "type", "classOrInterfaceType", "primitiveType", "typeArguments", 
                   "typeArgument", "qualifiedNameList", "formalParameters", 
                   "formalParameterList", "formalParameter", "lastFormalParameter", 
                   "methodBody", "constructorBody", "qualifiedName", "literal", 
                   "annotation", "annotationName", "elementValuePairs", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "annotationTypeDeclaration", "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "block", "blockStatement", "localVariableDeclarationStatement", 
                   "localVariableDeclaration", "statement", "propertyBlock", 
                   "getter", "setter", "catchClause", "catchType", "finallyBlock", 
                   "resourceSpecification", "resources", "resource", "forControl", 
                   "forInit", "enhancedForControl", "forUpdate", "db_shortcut_expression", 
                   "parExpression", "expressionList", "statementExpression", 
                   "constantExpression", "expression", "primary", "creator", 
                   "createdName", "innerCreator", "arrayCreatorRest", "mapCreatorRest", 
                   "setCreatorRest", "classCreatorRest", "explicitGenericInvocation", 
                   "nonWildcardTypeArguments", "typeArgumentsOrDiamond", 
                   "nonWildcardTypeArgumentsOrDiamond", "superSuffix", "explicitGenericInvocationSuffix", 
                   "arguments" ];

function ApexParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ApexParser.prototype = Object.create(antlr4.Parser.prototype);
ApexParser.prototype.constructor = ApexParser;

Object.defineProperty(ApexParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ApexParser.EOF = antlr4.Token.EOF;
ApexParser.T__0 = 1;
ApexParser.T__1 = 2;
ApexParser.T__2 = 3;
ApexParser.T__3 = 4;
ApexParser.T__4 = 5;
ApexParser.T__5 = 6;
ApexParser.T__6 = 7;
ApexParser.T__7 = 8;
ApexParser.T__8 = 9;
ApexParser.SoqlLiteral = 10;
ApexParser.ABSTRACT = 11;
ApexParser.BREAK = 12;
ApexParser.BYTE = 13;
ApexParser.CATCH = 14;
ApexParser.CHAR = 15;
ApexParser.CLASS = 16;
ApexParser.CONST = 17;
ApexParser.CONTINUE = 18;
ApexParser.DEFAULT = 19;
ApexParser.DO = 20;
ApexParser.ELSE = 21;
ApexParser.ENUM = 22;
ApexParser.EXTENDS = 23;
ApexParser.FINAL = 24;
ApexParser.FINALLY = 25;
ApexParser.FLOAT = 26;
ApexParser.FOR = 27;
ApexParser.IF = 28;
ApexParser.GOTO = 29;
ApexParser.IMPLEMENTS = 30;
ApexParser.IMPORT = 31;
ApexParser.INSTANCEOF = 32;
ApexParser.INT = 33;
ApexParser.INTERFACE = 34;
ApexParser.LONG = 35;
ApexParser.NATIVE = 36;
ApexParser.NEW = 37;
ApexParser.PACKAGE = 38;
ApexParser.PRIVATE = 39;
ApexParser.PROTECTED = 40;
ApexParser.PUBLIC = 41;
ApexParser.RETURN = 42;
ApexParser.SHORT = 43;
ApexParser.STATIC = 44;
ApexParser.SUPER = 45;
ApexParser.SYNCHRONIZED = 46;
ApexParser.THIS = 47;
ApexParser.THROW = 48;
ApexParser.THROWS = 49;
ApexParser.TRANSIENT = 50;
ApexParser.TRY = 51;
ApexParser.VOID = 52;
ApexParser.VOLATILE = 53;
ApexParser.WHILE = 54;
ApexParser.GLOBAL = 55;
ApexParser.WEBSERVICE = 56;
ApexParser.SELECT = 57;
ApexParser.TESTMETHOD = 58;
ApexParser.TRIGGER_NEW = 59;
ApexParser.DB_UPDATE = 60;
ApexParser.DB_UPSERT = 61;
ApexParser.DB_DELETE = 62;
ApexParser.DB_INSERT = 63;
ApexParser.DB_UNDELETE = 64;
ApexParser.IntegerLiteral = 65;
ApexParser.FloatingPointLiteral = 66;
ApexParser.BooleanLiteral = 67;
ApexParser.CharacterLiteral = 68;
ApexParser.StringLiteral = 69;
ApexParser.NullLiteral = 70;
ApexParser.LPAREN = 71;
ApexParser.RPAREN = 72;
ApexParser.LBRACE = 73;
ApexParser.RBRACE = 74;
ApexParser.LBRACK = 75;
ApexParser.RBRACK = 76;
ApexParser.SEMI = 77;
ApexParser.COMMA = 78;
ApexParser.DOT = 79;
ApexParser.ASSIGN = 80;
ApexParser.GT = 81;
ApexParser.LT = 82;
ApexParser.BANG = 83;
ApexParser.TILDE = 84;
ApexParser.QUESTION = 85;
ApexParser.COLON = 86;
ApexParser.EQUAL = 87;
ApexParser.LE = 88;
ApexParser.GE = 89;
ApexParser.NOTEQUAL = 90;
ApexParser.AND = 91;
ApexParser.OR = 92;
ApexParser.INC = 93;
ApexParser.DEC = 94;
ApexParser.ADD = 95;
ApexParser.SUB = 96;
ApexParser.MUL = 97;
ApexParser.DIV = 98;
ApexParser.BITAND = 99;
ApexParser.BITOR = 100;
ApexParser.CARET = 101;
ApexParser.MOD = 102;
ApexParser.ADD_ASSIGN = 103;
ApexParser.SUB_ASSIGN = 104;
ApexParser.MUL_ASSIGN = 105;
ApexParser.DIV_ASSIGN = 106;
ApexParser.AND_ASSIGN = 107;
ApexParser.OR_ASSIGN = 108;
ApexParser.XOR_ASSIGN = 109;
ApexParser.MOD_ASSIGN = 110;
ApexParser.LSHIFT_ASSIGN = 111;
ApexParser.RSHIFT_ASSIGN = 112;
ApexParser.URSHIFT_ASSIGN = 113;
ApexParser.Identifier = 114;
ApexParser.AT = 115;
ApexParser.ELLIPSIS = 116;
ApexParser.WS = 117;
ApexParser.APEXDOC_COMMENT = 118;
ApexParser.COMMENT = 119;
ApexParser.LINE_COMMENT = 120;

ApexParser.RULE_compilationUnit = 0;
ApexParser.RULE_packageDeclaration = 1;
ApexParser.RULE_importDeclaration = 2;
ApexParser.RULE_typeDeclaration = 3;
ApexParser.RULE_modifier = 4;
ApexParser.RULE_classOrInterfaceModifier = 5;
ApexParser.RULE_sharingModifier = 6;
ApexParser.RULE_variableModifier = 7;
ApexParser.RULE_classDeclaration = 8;
ApexParser.RULE_typeParameters = 9;
ApexParser.RULE_typeParameter = 10;
ApexParser.RULE_typeBound = 11;
ApexParser.RULE_enumDeclaration = 12;
ApexParser.RULE_enumConstants = 13;
ApexParser.RULE_enumConstant = 14;
ApexParser.RULE_enumBodyDeclarations = 15;
ApexParser.RULE_interfaceDeclaration = 16;
ApexParser.RULE_typeList = 17;
ApexParser.RULE_classBody = 18;
ApexParser.RULE_interfaceBody = 19;
ApexParser.RULE_classBodyDeclaration = 20;
ApexParser.RULE_memberDeclaration = 21;
ApexParser.RULE_methodDeclaration = 22;
ApexParser.RULE_genericMethodDeclaration = 23;
ApexParser.RULE_constructorDeclaration = 24;
ApexParser.RULE_genericConstructorDeclaration = 25;
ApexParser.RULE_fieldDeclaration = 26;
ApexParser.RULE_propertyDeclaration = 27;
ApexParser.RULE_propertyBodyDeclaration = 28;
ApexParser.RULE_interfaceBodyDeclaration = 29;
ApexParser.RULE_interfaceMemberDeclaration = 30;
ApexParser.RULE_constDeclaration = 31;
ApexParser.RULE_constantDeclarator = 32;
ApexParser.RULE_interfaceMethodDeclaration = 33;
ApexParser.RULE_genericInterfaceMethodDeclaration = 34;
ApexParser.RULE_variableDeclarators = 35;
ApexParser.RULE_variableDeclarator = 36;
ApexParser.RULE_variableDeclaratorId = 37;
ApexParser.RULE_variableInitializer = 38;
ApexParser.RULE_arrayInitializer = 39;
ApexParser.RULE_enumConstantName = 40;
ApexParser.RULE_type = 41;
ApexParser.RULE_classOrInterfaceType = 42;
ApexParser.RULE_primitiveType = 43;
ApexParser.RULE_typeArguments = 44;
ApexParser.RULE_typeArgument = 45;
ApexParser.RULE_qualifiedNameList = 46;
ApexParser.RULE_formalParameters = 47;
ApexParser.RULE_formalParameterList = 48;
ApexParser.RULE_formalParameter = 49;
ApexParser.RULE_lastFormalParameter = 50;
ApexParser.RULE_methodBody = 51;
ApexParser.RULE_constructorBody = 52;
ApexParser.RULE_qualifiedName = 53;
ApexParser.RULE_literal = 54;
ApexParser.RULE_annotation = 55;
ApexParser.RULE_annotationName = 56;
ApexParser.RULE_elementValuePairs = 57;
ApexParser.RULE_elementValuePair = 58;
ApexParser.RULE_elementValue = 59;
ApexParser.RULE_elementValueArrayInitializer = 60;
ApexParser.RULE_annotationTypeDeclaration = 61;
ApexParser.RULE_annotationTypeBody = 62;
ApexParser.RULE_annotationTypeElementDeclaration = 63;
ApexParser.RULE_annotationTypeElementRest = 64;
ApexParser.RULE_annotationMethodOrConstantRest = 65;
ApexParser.RULE_annotationMethodRest = 66;
ApexParser.RULE_annotationConstantRest = 67;
ApexParser.RULE_defaultValue = 68;
ApexParser.RULE_block = 69;
ApexParser.RULE_blockStatement = 70;
ApexParser.RULE_localVariableDeclarationStatement = 71;
ApexParser.RULE_localVariableDeclaration = 72;
ApexParser.RULE_statement = 73;
ApexParser.RULE_propertyBlock = 74;
ApexParser.RULE_getter = 75;
ApexParser.RULE_setter = 76;
ApexParser.RULE_catchClause = 77;
ApexParser.RULE_catchType = 78;
ApexParser.RULE_finallyBlock = 79;
ApexParser.RULE_resourceSpecification = 80;
ApexParser.RULE_resources = 81;
ApexParser.RULE_resource = 82;
ApexParser.RULE_forControl = 83;
ApexParser.RULE_forInit = 84;
ApexParser.RULE_enhancedForControl = 85;
ApexParser.RULE_forUpdate = 86;
ApexParser.RULE_db_shortcut_expression = 87;
ApexParser.RULE_parExpression = 88;
ApexParser.RULE_expressionList = 89;
ApexParser.RULE_statementExpression = 90;
ApexParser.RULE_constantExpression = 91;
ApexParser.RULE_expression = 92;
ApexParser.RULE_primary = 93;
ApexParser.RULE_creator = 94;
ApexParser.RULE_createdName = 95;
ApexParser.RULE_innerCreator = 96;
ApexParser.RULE_arrayCreatorRest = 97;
ApexParser.RULE_mapCreatorRest = 98;
ApexParser.RULE_setCreatorRest = 99;
ApexParser.RULE_classCreatorRest = 100;
ApexParser.RULE_explicitGenericInvocation = 101;
ApexParser.RULE_nonWildcardTypeArguments = 102;
ApexParser.RULE_typeArgumentsOrDiamond = 103;
ApexParser.RULE_nonWildcardTypeArgumentsOrDiamond = 104;
ApexParser.RULE_superSuffix = 105;
ApexParser.RULE_explicitGenericInvocationSuffix = 106;
ApexParser.RULE_arguments = 107;

function CompilationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_compilationUnit;
    return this;
}

CompilationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompilationUnitContext.prototype.constructor = CompilationUnitContext;

CompilationUnitContext.prototype.EOF = function() {
    return this.getToken(ApexParser.EOF, 0);
};

CompilationUnitContext.prototype.packageDeclaration = function() {
    return this.getTypedRuleContext(PackageDeclarationContext,0);
};

CompilationUnitContext.prototype.importDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportDeclarationContext);
    } else {
        return this.getTypedRuleContext(ImportDeclarationContext,i);
    }
};

CompilationUnitContext.prototype.typeDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeDeclarationContext);
    } else {
        return this.getTypedRuleContext(TypeDeclarationContext,i);
    }
};

CompilationUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitCompilationUnit(this);
	}
};




ApexParser.CompilationUnitContext = CompilationUnitContext;

ApexParser.prototype.compilationUnit = function() {

    var localctx = new CompilationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ApexParser.RULE_compilationUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 217;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        if(la_===1) {
            this.state = 216;
            this.packageDeclaration();

        }
        this.state = 222;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.IMPORT) {
            this.state = 219;
            this.importDeclaration();
            this.state = 224;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 228;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__0) | (1 << ApexParser.T__1) | (1 << ApexParser.T__2) | (1 << ApexParser.T__3) | (1 << ApexParser.ABSTRACT) | (1 << ApexParser.CLASS) | (1 << ApexParser.ENUM) | (1 << ApexParser.FINAL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.INTERFACE - 34)) | (1 << (ApexParser.PRIVATE - 34)) | (1 << (ApexParser.PROTECTED - 34)) | (1 << (ApexParser.PUBLIC - 34)) | (1 << (ApexParser.STATIC - 34)) | (1 << (ApexParser.GLOBAL - 34)) | (1 << (ApexParser.WEBSERVICE - 34)) | (1 << (ApexParser.TESTMETHOD - 34)))) !== 0) || _la===ApexParser.SEMI || _la===ApexParser.AT) {
            this.state = 225;
            this.typeDeclaration();
            this.state = 230;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 231;
        this.match(ApexParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PackageDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_packageDeclaration;
    return this;
}

PackageDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PackageDeclarationContext.prototype.constructor = PackageDeclarationContext;

PackageDeclarationContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

PackageDeclarationContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

PackageDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterPackageDeclaration(this);
	}
};

PackageDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitPackageDeclaration(this);
	}
};




ApexParser.PackageDeclarationContext = PackageDeclarationContext;

ApexParser.prototype.packageDeclaration = function() {

    var localctx = new PackageDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ApexParser.RULE_packageDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 236;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.AT) {
            this.state = 233;
            this.annotation();
            this.state = 238;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 239;
        this.match(ApexParser.PACKAGE);
        this.state = 240;
        this.qualifiedName();
        this.state = 241;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_importDeclaration;
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ImportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterImportDeclaration(this);
	}
};

ImportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitImportDeclaration(this);
	}
};




ApexParser.ImportDeclarationContext = ImportDeclarationContext;

ApexParser.prototype.importDeclaration = function() {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ApexParser.RULE_importDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 243;
        this.match(ApexParser.IMPORT);
        this.state = 245;
        _la = this._input.LA(1);
        if(_la===ApexParser.STATIC) {
            this.state = 244;
            this.match(ApexParser.STATIC);
        }

        this.state = 247;
        this.qualifiedName();
        this.state = 250;
        _la = this._input.LA(1);
        if(_la===ApexParser.DOT) {
            this.state = 248;
            this.match(ApexParser.DOT);
            this.state = 249;
            this.match(ApexParser.MUL);
        }

        this.state = 252;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_typeDeclaration;
    return this;
}

TypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDeclarationContext.prototype.constructor = TypeDeclarationContext;

TypeDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

TypeDeclarationContext.prototype.classOrInterfaceModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);
    } else {
        return this.getTypedRuleContext(ClassOrInterfaceModifierContext,i);
    }
};

TypeDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

TypeDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

TypeDeclarationContext.prototype.annotationTypeDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
};

TypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterTypeDeclaration(this);
	}
};

TypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitTypeDeclaration(this);
	}
};




ApexParser.TypeDeclarationContext = TypeDeclarationContext;

ApexParser.prototype.typeDeclaration = function() {

    var localctx = new TypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ApexParser.RULE_typeDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 283;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 257;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__0) | (1 << ApexParser.T__1) | (1 << ApexParser.T__2) | (1 << ApexParser.T__3) | (1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (ApexParser.PRIVATE - 39)) | (1 << (ApexParser.PROTECTED - 39)) | (1 << (ApexParser.PUBLIC - 39)) | (1 << (ApexParser.STATIC - 39)) | (1 << (ApexParser.GLOBAL - 39)) | (1 << (ApexParser.WEBSERVICE - 39)) | (1 << (ApexParser.TESTMETHOD - 39)))) !== 0) || _la===ApexParser.AT) {
                this.state = 254;
                this.classOrInterfaceModifier();
                this.state = 259;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 260;
            this.classDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 264;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__0) | (1 << ApexParser.T__1) | (1 << ApexParser.T__2) | (1 << ApexParser.T__3) | (1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (ApexParser.PRIVATE - 39)) | (1 << (ApexParser.PROTECTED - 39)) | (1 << (ApexParser.PUBLIC - 39)) | (1 << (ApexParser.STATIC - 39)) | (1 << (ApexParser.GLOBAL - 39)) | (1 << (ApexParser.WEBSERVICE - 39)) | (1 << (ApexParser.TESTMETHOD - 39)))) !== 0) || _la===ApexParser.AT) {
                this.state = 261;
                this.classOrInterfaceModifier();
                this.state = 266;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 267;
            this.enumDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 271;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__0) | (1 << ApexParser.T__1) | (1 << ApexParser.T__2) | (1 << ApexParser.T__3) | (1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (ApexParser.PRIVATE - 39)) | (1 << (ApexParser.PROTECTED - 39)) | (1 << (ApexParser.PUBLIC - 39)) | (1 << (ApexParser.STATIC - 39)) | (1 << (ApexParser.GLOBAL - 39)) | (1 << (ApexParser.WEBSERVICE - 39)) | (1 << (ApexParser.TESTMETHOD - 39)))) !== 0) || _la===ApexParser.AT) {
                this.state = 268;
                this.classOrInterfaceModifier();
                this.state = 273;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 274;
            this.interfaceDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 278;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 275;
                    this.classOrInterfaceModifier(); 
                }
                this.state = 280;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
            }

            this.state = 281;
            this.annotationTypeDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 282;
            this.match(ApexParser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_modifier;
    return this;
}

ModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierContext.prototype.constructor = ModifierContext;

ModifierContext.prototype.classOrInterfaceModifier = function() {
    return this.getTypedRuleContext(ClassOrInterfaceModifierContext,0);
};

ModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterModifier(this);
	}
};

ModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitModifier(this);
	}
};




ApexParser.ModifierContext = ModifierContext;

ApexParser.prototype.modifier = function() {

    var localctx = new ModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ApexParser.RULE_modifier);
    var _la = 0; // Token type
    try {
        this.state = 287;
        switch(this._input.LA(1)) {
        case ApexParser.T__0:
        case ApexParser.T__1:
        case ApexParser.T__2:
        case ApexParser.T__3:
        case ApexParser.ABSTRACT:
        case ApexParser.FINAL:
        case ApexParser.PRIVATE:
        case ApexParser.PROTECTED:
        case ApexParser.PUBLIC:
        case ApexParser.STATIC:
        case ApexParser.GLOBAL:
        case ApexParser.WEBSERVICE:
        case ApexParser.TESTMETHOD:
        case ApexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 285;
            this.classOrInterfaceModifier();
            break;
        case ApexParser.NATIVE:
        case ApexParser.SYNCHRONIZED:
        case ApexParser.TRANSIENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 286;
            _la = this._input.LA(1);
            if(!(((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ApexParser.NATIVE - 36)) | (1 << (ApexParser.SYNCHRONIZED - 36)) | (1 << (ApexParser.TRANSIENT - 36)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOrInterfaceModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_classOrInterfaceModifier;
    return this;
}

ClassOrInterfaceModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOrInterfaceModifierContext.prototype.constructor = ClassOrInterfaceModifierContext;

ClassOrInterfaceModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ClassOrInterfaceModifierContext.prototype.TESTMETHOD = function() {
    return this.getToken(ApexParser.TESTMETHOD, 0);
};

ClassOrInterfaceModifierContext.prototype.sharingModifier = function() {
    return this.getTypedRuleContext(SharingModifierContext,0);
};

ClassOrInterfaceModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterClassOrInterfaceModifier(this);
	}
};

ClassOrInterfaceModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitClassOrInterfaceModifier(this);
	}
};




ApexParser.ClassOrInterfaceModifierContext = ClassOrInterfaceModifierContext;

ApexParser.prototype.classOrInterfaceModifier = function() {

    var localctx = new ClassOrInterfaceModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ApexParser.RULE_classOrInterfaceModifier);
    var _la = 0; // Token type
    try {
        this.state = 292;
        switch(this._input.LA(1)) {
        case ApexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 289;
            this.annotation();
            break;
        case ApexParser.T__0:
        case ApexParser.T__1:
        case ApexParser.ABSTRACT:
        case ApexParser.FINAL:
        case ApexParser.PRIVATE:
        case ApexParser.PROTECTED:
        case ApexParser.PUBLIC:
        case ApexParser.STATIC:
        case ApexParser.GLOBAL:
        case ApexParser.WEBSERVICE:
        case ApexParser.TESTMETHOD:
            this.enterOuterAlt(localctx, 2);
            this.state = 290;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__0) | (1 << ApexParser.T__1) | (1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (ApexParser.PRIVATE - 39)) | (1 << (ApexParser.PROTECTED - 39)) | (1 << (ApexParser.PUBLIC - 39)) | (1 << (ApexParser.STATIC - 39)) | (1 << (ApexParser.GLOBAL - 39)) | (1 << (ApexParser.WEBSERVICE - 39)) | (1 << (ApexParser.TESTMETHOD - 39)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            break;
        case ApexParser.T__2:
        case ApexParser.T__3:
            this.enterOuterAlt(localctx, 3);
            this.state = 291;
            this.sharingModifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharingModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_sharingModifier;
    return this;
}

SharingModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharingModifierContext.prototype.constructor = SharingModifierContext;


SharingModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterSharingModifier(this);
	}
};

SharingModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitSharingModifier(this);
	}
};




ApexParser.SharingModifierContext = SharingModifierContext;

ApexParser.prototype.sharingModifier = function() {

    var localctx = new SharingModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ApexParser.RULE_sharingModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        _la = this._input.LA(1);
        if(!(_la===ApexParser.T__2 || _la===ApexParser.T__3)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 295;
        this.match(ApexParser.T__4);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_variableModifier;
    return this;
}

VariableModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableModifierContext.prototype.constructor = VariableModifierContext;

VariableModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

VariableModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterVariableModifier(this);
	}
};

VariableModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitVariableModifier(this);
	}
};




ApexParser.VariableModifierContext = VariableModifierContext;

ApexParser.prototype.variableModifier = function() {

    var localctx = new VariableModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ApexParser.RULE_variableModifier);
    try {
        this.state = 299;
        switch(this._input.LA(1)) {
        case ApexParser.FINAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 297;
            this.match(ApexParser.FINAL);
            break;
        case ApexParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 298;
            this.annotation();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

ClassDeclarationContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

ClassDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ClassDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitClassDeclaration(this);
	}
};




ApexParser.ClassDeclarationContext = ClassDeclarationContext;

ApexParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ApexParser.RULE_classDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 301;
        this.match(ApexParser.CLASS);
        this.state = 302;
        this.match(ApexParser.Identifier);
        this.state = 304;
        _la = this._input.LA(1);
        if(_la===ApexParser.LT) {
            this.state = 303;
            this.typeParameters();
        }

        this.state = 308;
        _la = this._input.LA(1);
        if(_la===ApexParser.EXTENDS) {
            this.state = 306;
            this.match(ApexParser.EXTENDS);
            this.state = 307;
            this.type();
        }

        this.state = 312;
        _la = this._input.LA(1);
        if(_la===ApexParser.IMPLEMENTS) {
            this.state = 310;
            this.match(ApexParser.IMPLEMENTS);
            this.state = 311;
            this.typeList();
        }

        this.state = 314;
        this.classBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_typeParameters;
    return this;
}

TypeParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParametersContext.prototype.constructor = TypeParametersContext;

TypeParametersContext.prototype.typeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterContext);
    } else {
        return this.getTypedRuleContext(TypeParameterContext,i);
    }
};

TypeParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterTypeParameters(this);
	}
};

TypeParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitTypeParameters(this);
	}
};




ApexParser.TypeParametersContext = TypeParametersContext;

ApexParser.prototype.typeParameters = function() {

    var localctx = new TypeParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ApexParser.RULE_typeParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 316;
        this.match(ApexParser.LT);
        this.state = 317;
        this.typeParameter();
        this.state = 322;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 318;
            this.match(ApexParser.COMMA);
            this.state = 319;
            this.typeParameter();
            this.state = 324;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 325;
        this.match(ApexParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_typeParameter;
    return this;
}

TypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterContext.prototype.constructor = TypeParameterContext;

TypeParameterContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

TypeParameterContext.prototype.typeBound = function() {
    return this.getTypedRuleContext(TypeBoundContext,0);
};

TypeParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterTypeParameter(this);
	}
};

TypeParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitTypeParameter(this);
	}
};




ApexParser.TypeParameterContext = TypeParameterContext;

ApexParser.prototype.typeParameter = function() {

    var localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ApexParser.RULE_typeParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 327;
        this.match(ApexParser.Identifier);
        this.state = 330;
        _la = this._input.LA(1);
        if(_la===ApexParser.EXTENDS) {
            this.state = 328;
            this.match(ApexParser.EXTENDS);
            this.state = 329;
            this.typeBound();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_typeBound;
    return this;
}

TypeBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeBoundContext.prototype.constructor = TypeBoundContext;

TypeBoundContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeBoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterTypeBound(this);
	}
};

TypeBoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitTypeBound(this);
	}
};




ApexParser.TypeBoundContext = TypeBoundContext;

ApexParser.prototype.typeBound = function() {

    var localctx = new TypeBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ApexParser.RULE_typeBound);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 332;
        this.type();
        this.state = 337;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.BITAND) {
            this.state = 333;
            this.match(ApexParser.BITAND);
            this.state = 334;
            this.type();
            this.state = 339;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_enumDeclaration;
    return this;
}

EnumDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDeclarationContext.prototype.constructor = EnumDeclarationContext;

EnumDeclarationContext.prototype.ENUM = function() {
    return this.getToken(ApexParser.ENUM, 0);
};

EnumDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

EnumDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

EnumDeclarationContext.prototype.enumConstants = function() {
    return this.getTypedRuleContext(EnumConstantsContext,0);
};

EnumDeclarationContext.prototype.enumBodyDeclarations = function() {
    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
};

EnumDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterEnumDeclaration(this);
	}
};

EnumDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitEnumDeclaration(this);
	}
};




ApexParser.EnumDeclarationContext = EnumDeclarationContext;

ApexParser.prototype.enumDeclaration = function() {

    var localctx = new EnumDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ApexParser.RULE_enumDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 340;
        this.match(ApexParser.ENUM);
        this.state = 341;
        this.match(ApexParser.Identifier);
        this.state = 344;
        _la = this._input.LA(1);
        if(_la===ApexParser.IMPLEMENTS) {
            this.state = 342;
            this.match(ApexParser.IMPLEMENTS);
            this.state = 343;
            this.typeList();
        }

        this.state = 346;
        this.match(ApexParser.LBRACE);
        this.state = 348;
        _la = this._input.LA(1);
        if(_la===ApexParser.Identifier || _la===ApexParser.AT) {
            this.state = 347;
            this.enumConstants();
        }

        this.state = 351;
        _la = this._input.LA(1);
        if(_la===ApexParser.COMMA) {
            this.state = 350;
            this.match(ApexParser.COMMA);
        }

        this.state = 354;
        _la = this._input.LA(1);
        if(_la===ApexParser.SEMI) {
            this.state = 353;
            this.enumBodyDeclarations();
        }

        this.state = 356;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_enumConstants;
    return this;
}

EnumConstantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantsContext.prototype.constructor = EnumConstantsContext;

EnumConstantsContext.prototype.enumConstant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumConstantContext);
    } else {
        return this.getTypedRuleContext(EnumConstantContext,i);
    }
};

EnumConstantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterEnumConstants(this);
	}
};

EnumConstantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitEnumConstants(this);
	}
};




ApexParser.EnumConstantsContext = EnumConstantsContext;

ApexParser.prototype.enumConstants = function() {

    var localctx = new EnumConstantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ApexParser.RULE_enumConstants);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 358;
        this.enumConstant();
        this.state = 363;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 359;
                this.match(ApexParser.COMMA);
                this.state = 360;
                this.enumConstant(); 
            }
            this.state = 365;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_enumConstant;
    return this;
}

EnumConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantContext.prototype.constructor = EnumConstantContext;

EnumConstantContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

EnumConstantContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

EnumConstantContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

EnumConstantContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

EnumConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterEnumConstant(this);
	}
};

EnumConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitEnumConstant(this);
	}
};




ApexParser.EnumConstantContext = EnumConstantContext;

ApexParser.prototype.enumConstant = function() {

    var localctx = new EnumConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ApexParser.RULE_enumConstant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 369;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.AT) {
            this.state = 366;
            this.annotation();
            this.state = 371;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 372;
        this.match(ApexParser.Identifier);
        this.state = 374;
        _la = this._input.LA(1);
        if(_la===ApexParser.LPAREN) {
            this.state = 373;
            this.arguments();
        }

        this.state = 377;
        _la = this._input.LA(1);
        if(_la===ApexParser.LBRACE) {
            this.state = 376;
            this.classBody();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumBodyDeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_enumBodyDeclarations;
    return this;
}

EnumBodyDeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumBodyDeclarationsContext.prototype.constructor = EnumBodyDeclarationsContext;

EnumBodyDeclarationsContext.prototype.classBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
    }
};

EnumBodyDeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterEnumBodyDeclarations(this);
	}
};

EnumBodyDeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitEnumBodyDeclarations(this);
	}
};




ApexParser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext;

ApexParser.prototype.enumBodyDeclarations = function() {

    var localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ApexParser.RULE_enumBodyDeclarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 379;
        this.match(ApexParser.SEMI);
        this.state = 383;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__0) | (1 << ApexParser.T__1) | (1 << ApexParser.T__2) | (1 << ApexParser.T__3) | (1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.ABSTRACT) | (1 << ApexParser.CLASS) | (1 << ApexParser.ENUM) | (1 << ApexParser.FINAL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.INTERFACE - 34)) | (1 << (ApexParser.NATIVE - 34)) | (1 << (ApexParser.PRIVATE - 34)) | (1 << (ApexParser.PROTECTED - 34)) | (1 << (ApexParser.PUBLIC - 34)) | (1 << (ApexParser.STATIC - 34)) | (1 << (ApexParser.SYNCHRONIZED - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.GLOBAL - 34)) | (1 << (ApexParser.WEBSERVICE - 34)) | (1 << (ApexParser.TESTMETHOD - 34)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (ApexParser.LBRACE - 73)) | (1 << (ApexParser.SEMI - 73)) | (1 << (ApexParser.LT - 73)))) !== 0) || _la===ApexParser.Identifier || _la===ApexParser.AT) {
            this.state = 380;
            this.classBodyDeclaration();
            this.state = 385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_interfaceDeclaration;
    return this;
}

InterfaceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceDeclarationContext.prototype.constructor = InterfaceDeclarationContext;

InterfaceDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

InterfaceDeclarationContext.prototype.interfaceBody = function() {
    return this.getTypedRuleContext(InterfaceBodyContext,0);
};

InterfaceDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

InterfaceDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

InterfaceDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterInterfaceDeclaration(this);
	}
};

InterfaceDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitInterfaceDeclaration(this);
	}
};




ApexParser.InterfaceDeclarationContext = InterfaceDeclarationContext;

ApexParser.prototype.interfaceDeclaration = function() {

    var localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ApexParser.RULE_interfaceDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 386;
        this.match(ApexParser.INTERFACE);
        this.state = 387;
        this.match(ApexParser.Identifier);
        this.state = 389;
        _la = this._input.LA(1);
        if(_la===ApexParser.LT) {
            this.state = 388;
            this.typeParameters();
        }

        this.state = 393;
        _la = this._input.LA(1);
        if(_la===ApexParser.EXTENDS) {
            this.state = 391;
            this.match(ApexParser.EXTENDS);
            this.state = 392;
            this.typeList();
        }

        this.state = 395;
        this.interfaceBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_typeList;
    return this;
}

TypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeListContext.prototype.constructor = TypeListContext;

TypeListContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterTypeList(this);
	}
};

TypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitTypeList(this);
	}
};




ApexParser.TypeListContext = TypeListContext;

ApexParser.prototype.typeList = function() {

    var localctx = new TypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ApexParser.RULE_typeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 397;
        this.type();
        this.state = 402;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 398;
            this.match(ApexParser.COMMA);
            this.state = 399;
            this.type();
            this.state = 404;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_classBody;
    return this;
}

ClassBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyContext.prototype.constructor = ClassBodyContext;

ClassBodyContext.prototype.classBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
    }
};

ClassBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterClassBody(this);
	}
};

ClassBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitClassBody(this);
	}
};




ApexParser.ClassBodyContext = ClassBodyContext;

ApexParser.prototype.classBody = function() {

    var localctx = new ClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ApexParser.RULE_classBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 405;
        this.match(ApexParser.LBRACE);
        this.state = 409;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__0) | (1 << ApexParser.T__1) | (1 << ApexParser.T__2) | (1 << ApexParser.T__3) | (1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.ABSTRACT) | (1 << ApexParser.CLASS) | (1 << ApexParser.ENUM) | (1 << ApexParser.FINAL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.INTERFACE - 34)) | (1 << (ApexParser.NATIVE - 34)) | (1 << (ApexParser.PRIVATE - 34)) | (1 << (ApexParser.PROTECTED - 34)) | (1 << (ApexParser.PUBLIC - 34)) | (1 << (ApexParser.STATIC - 34)) | (1 << (ApexParser.SYNCHRONIZED - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.GLOBAL - 34)) | (1 << (ApexParser.WEBSERVICE - 34)) | (1 << (ApexParser.TESTMETHOD - 34)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (ApexParser.LBRACE - 73)) | (1 << (ApexParser.SEMI - 73)) | (1 << (ApexParser.LT - 73)))) !== 0) || _la===ApexParser.Identifier || _la===ApexParser.AT) {
            this.state = 406;
            this.classBodyDeclaration();
            this.state = 411;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 412;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_interfaceBody;
    return this;
}

InterfaceBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceBodyContext.prototype.constructor = InterfaceBodyContext;

InterfaceBodyContext.prototype.interfaceBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(InterfaceBodyDeclarationContext,i);
    }
};

InterfaceBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterInterfaceBody(this);
	}
};

InterfaceBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitInterfaceBody(this);
	}
};




ApexParser.InterfaceBodyContext = InterfaceBodyContext;

ApexParser.prototype.interfaceBody = function() {

    var localctx = new InterfaceBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ApexParser.RULE_interfaceBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 414;
        this.match(ApexParser.LBRACE);
        this.state = 418;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__0) | (1 << ApexParser.T__1) | (1 << ApexParser.T__2) | (1 << ApexParser.T__3) | (1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.ABSTRACT) | (1 << ApexParser.CLASS) | (1 << ApexParser.ENUM) | (1 << ApexParser.FINAL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.INTERFACE - 34)) | (1 << (ApexParser.NATIVE - 34)) | (1 << (ApexParser.PRIVATE - 34)) | (1 << (ApexParser.PROTECTED - 34)) | (1 << (ApexParser.PUBLIC - 34)) | (1 << (ApexParser.STATIC - 34)) | (1 << (ApexParser.SYNCHRONIZED - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.GLOBAL - 34)) | (1 << (ApexParser.WEBSERVICE - 34)) | (1 << (ApexParser.TESTMETHOD - 34)))) !== 0) || _la===ApexParser.SEMI || _la===ApexParser.LT || _la===ApexParser.Identifier || _la===ApexParser.AT) {
            this.state = 415;
            this.interfaceBodyDeclaration();
            this.state = 420;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 421;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_classBodyDeclaration;
    return this;
}

ClassBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyDeclarationContext.prototype.constructor = ClassBodyDeclarationContext;

ClassBodyDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ClassBodyDeclarationContext.prototype.memberDeclaration = function() {
    return this.getTypedRuleContext(MemberDeclarationContext,0);
};

ClassBodyDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

ClassBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterClassBodyDeclaration(this);
	}
};

ClassBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitClassBodyDeclaration(this);
	}
};




ApexParser.ClassBodyDeclarationContext = ClassBodyDeclarationContext;

ApexParser.prototype.classBodyDeclaration = function() {

    var localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ApexParser.RULE_classBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 435;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 423;
            this.match(ApexParser.SEMI);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 425;
            _la = this._input.LA(1);
            if(_la===ApexParser.STATIC) {
                this.state = 424;
                this.match(ApexParser.STATIC);
            }

            this.state = 427;
            this.block();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 431;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 428;
                    this.modifier(); 
                }
                this.state = 433;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
            }

            this.state = 434;
            this.memberDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_memberDeclaration;
    return this;
}

MemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberDeclarationContext.prototype.constructor = MemberDeclarationContext;

MemberDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

MemberDeclarationContext.prototype.genericMethodDeclaration = function() {
    return this.getTypedRuleContext(GenericMethodDeclarationContext,0);
};

MemberDeclarationContext.prototype.fieldDeclaration = function() {
    return this.getTypedRuleContext(FieldDeclarationContext,0);
};

MemberDeclarationContext.prototype.constructorDeclaration = function() {
    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
};

MemberDeclarationContext.prototype.genericConstructorDeclaration = function() {
    return this.getTypedRuleContext(GenericConstructorDeclarationContext,0);
};

MemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

MemberDeclarationContext.prototype.annotationTypeDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
};

MemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

MemberDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

MemberDeclarationContext.prototype.propertyDeclaration = function() {
    return this.getTypedRuleContext(PropertyDeclarationContext,0);
};

MemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterMemberDeclaration(this);
	}
};

MemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitMemberDeclaration(this);
	}
};




ApexParser.MemberDeclarationContext = MemberDeclarationContext;

ApexParser.prototype.memberDeclaration = function() {

    var localctx = new MemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ApexParser.RULE_memberDeclaration);
    try {
        this.state = 447;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 437;
            this.methodDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 438;
            this.genericMethodDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 439;
            this.fieldDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 440;
            this.constructorDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 441;
            this.genericConstructorDeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 442;
            this.interfaceDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 443;
            this.annotationTypeDeclaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 444;
            this.classDeclaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 445;
            this.enumDeclaration();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 446;
            this.propertyDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_methodDeclaration;
    return this;
}

MethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclarationContext.prototype.constructor = MethodDeclarationContext;

MethodDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

MethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

MethodDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

MethodDeclarationContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

MethodDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

MethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitMethodDeclaration(this);
	}
};




ApexParser.MethodDeclarationContext = MethodDeclarationContext;

ApexParser.prototype.methodDeclaration = function() {

    var localctx = new MethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ApexParser.RULE_methodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 450;
        _la = this._input.LA(1);
        if(_la===ApexParser.T__0) {
            this.state = 449;
            this.match(ApexParser.T__0);
        }

        this.state = 454;
        switch(this._input.LA(1)) {
        case ApexParser.T__5:
        case ApexParser.T__6:
        case ApexParser.Identifier:
            this.state = 452;
            this.type();
            break;
        case ApexParser.VOID:
            this.state = 453;
            this.match(ApexParser.VOID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 456;
        this.match(ApexParser.Identifier);
        this.state = 457;
        this.formalParameters();
        this.state = 462;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.LBRACK) {
            this.state = 458;
            this.match(ApexParser.LBRACK);
            this.state = 459;
            this.match(ApexParser.RBRACK);
            this.state = 464;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 467;
        _la = this._input.LA(1);
        if(_la===ApexParser.THROWS) {
            this.state = 465;
            this.match(ApexParser.THROWS);
            this.state = 466;
            this.qualifiedNameList();
        }

        this.state = 471;
        switch(this._input.LA(1)) {
        case ApexParser.LBRACE:
            this.state = 469;
            this.methodBody();
            break;
        case ApexParser.SEMI:
            this.state = 470;
            this.match(ApexParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GenericMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_genericMethodDeclaration;
    return this;
}

GenericMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericMethodDeclarationContext.prototype.constructor = GenericMethodDeclarationContext;

GenericMethodDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

GenericMethodDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

GenericMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterGenericMethodDeclaration(this);
	}
};

GenericMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitGenericMethodDeclaration(this);
	}
};




ApexParser.GenericMethodDeclarationContext = GenericMethodDeclarationContext;

ApexParser.prototype.genericMethodDeclaration = function() {

    var localctx = new GenericMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ApexParser.RULE_genericMethodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 473;
        this.typeParameters();
        this.state = 474;
        this.methodDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_constructorDeclaration;
    return this;
}

ConstructorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorDeclarationContext.prototype.constructor = ConstructorDeclarationContext;

ConstructorDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

ConstructorDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

ConstructorDeclarationContext.prototype.constructorBody = function() {
    return this.getTypedRuleContext(ConstructorBodyContext,0);
};

ConstructorDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

ConstructorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterConstructorDeclaration(this);
	}
};

ConstructorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitConstructorDeclaration(this);
	}
};




ApexParser.ConstructorDeclarationContext = ConstructorDeclarationContext;

ApexParser.prototype.constructorDeclaration = function() {

    var localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ApexParser.RULE_constructorDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 476;
        this.match(ApexParser.Identifier);
        this.state = 477;
        this.formalParameters();
        this.state = 480;
        _la = this._input.LA(1);
        if(_la===ApexParser.THROWS) {
            this.state = 478;
            this.match(ApexParser.THROWS);
            this.state = 479;
            this.qualifiedNameList();
        }

        this.state = 482;
        this.constructorBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GenericConstructorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_genericConstructorDeclaration;
    return this;
}

GenericConstructorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericConstructorDeclarationContext.prototype.constructor = GenericConstructorDeclarationContext;

GenericConstructorDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

GenericConstructorDeclarationContext.prototype.constructorDeclaration = function() {
    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
};

GenericConstructorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterGenericConstructorDeclaration(this);
	}
};

GenericConstructorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitGenericConstructorDeclaration(this);
	}
};




ApexParser.GenericConstructorDeclarationContext = GenericConstructorDeclarationContext;

ApexParser.prototype.genericConstructorDeclaration = function() {

    var localctx = new GenericConstructorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ApexParser.RULE_genericConstructorDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this.typeParameters();
        this.state = 485;
        this.constructorDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_fieldDeclaration;
    return this;
}

FieldDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldDeclarationContext.prototype.constructor = FieldDeclarationContext;

FieldDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FieldDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

FieldDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterFieldDeclaration(this);
	}
};

FieldDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitFieldDeclaration(this);
	}
};




ApexParser.FieldDeclarationContext = FieldDeclarationContext;

ApexParser.prototype.fieldDeclaration = function() {

    var localctx = new FieldDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ApexParser.RULE_fieldDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 487;
        this.type();
        this.state = 488;
        this.variableDeclarators();
        this.state = 489;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_propertyDeclaration;
    return this;
}

PropertyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDeclarationContext.prototype.constructor = PropertyDeclarationContext;

PropertyDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PropertyDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

PropertyDeclarationContext.prototype.propertyBodyDeclaration = function() {
    return this.getTypedRuleContext(PropertyBodyDeclarationContext,0);
};

PropertyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterPropertyDeclaration(this);
	}
};

PropertyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitPropertyDeclaration(this);
	}
};




ApexParser.PropertyDeclarationContext = PropertyDeclarationContext;

ApexParser.prototype.propertyDeclaration = function() {

    var localctx = new PropertyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ApexParser.RULE_propertyDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 491;
        this.type();
        this.state = 492;
        this.variableDeclarators();
        this.state = 493;
        this.propertyBodyDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_propertyBodyDeclaration;
    return this;
}

PropertyBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyBodyDeclarationContext.prototype.constructor = PropertyBodyDeclarationContext;

PropertyBodyDeclarationContext.prototype.propertyBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyBlockContext);
    } else {
        return this.getTypedRuleContext(PropertyBlockContext,i);
    }
};

PropertyBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterPropertyBodyDeclaration(this);
	}
};

PropertyBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitPropertyBodyDeclaration(this);
	}
};




ApexParser.PropertyBodyDeclarationContext = PropertyBodyDeclarationContext;

ApexParser.prototype.propertyBodyDeclaration = function() {

    var localctx = new PropertyBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ApexParser.RULE_propertyBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 495;
        this.match(ApexParser.LBRACE);
        this.state = 496;
        this.propertyBlock();
        this.state = 498;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__0) | (1 << ApexParser.T__1) | (1 << ApexParser.T__2) | (1 << ApexParser.T__3) | (1 << ApexParser.T__5) | (1 << ApexParser.T__7) | (1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ApexParser.NATIVE - 36)) | (1 << (ApexParser.PRIVATE - 36)) | (1 << (ApexParser.PROTECTED - 36)) | (1 << (ApexParser.PUBLIC - 36)) | (1 << (ApexParser.STATIC - 36)) | (1 << (ApexParser.SYNCHRONIZED - 36)) | (1 << (ApexParser.TRANSIENT - 36)) | (1 << (ApexParser.GLOBAL - 36)) | (1 << (ApexParser.WEBSERVICE - 36)) | (1 << (ApexParser.TESTMETHOD - 36)))) !== 0) || _la===ApexParser.AT) {
            this.state = 497;
            this.propertyBlock();
        }

        this.state = 500;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_interfaceBodyDeclaration;
    return this;
}

InterfaceBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceBodyDeclarationContext.prototype.constructor = InterfaceBodyDeclarationContext;

InterfaceBodyDeclarationContext.prototype.interfaceMemberDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMemberDeclarationContext,0);
};

InterfaceBodyDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

InterfaceBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterInterfaceBodyDeclaration(this);
	}
};

InterfaceBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitInterfaceBodyDeclaration(this);
	}
};




ApexParser.InterfaceBodyDeclarationContext = InterfaceBodyDeclarationContext;

ApexParser.prototype.interfaceBodyDeclaration = function() {

    var localctx = new InterfaceBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ApexParser.RULE_interfaceBodyDeclaration);
    try {
        this.state = 510;
        switch(this._input.LA(1)) {
        case ApexParser.T__0:
        case ApexParser.T__1:
        case ApexParser.T__2:
        case ApexParser.T__3:
        case ApexParser.T__5:
        case ApexParser.T__6:
        case ApexParser.ABSTRACT:
        case ApexParser.CLASS:
        case ApexParser.ENUM:
        case ApexParser.FINAL:
        case ApexParser.INTERFACE:
        case ApexParser.NATIVE:
        case ApexParser.PRIVATE:
        case ApexParser.PROTECTED:
        case ApexParser.PUBLIC:
        case ApexParser.STATIC:
        case ApexParser.SYNCHRONIZED:
        case ApexParser.TRANSIENT:
        case ApexParser.VOID:
        case ApexParser.GLOBAL:
        case ApexParser.WEBSERVICE:
        case ApexParser.TESTMETHOD:
        case ApexParser.LT:
        case ApexParser.Identifier:
        case ApexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 505;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 502;
                    this.modifier(); 
                }
                this.state = 507;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
            }

            this.state = 508;
            this.interfaceMemberDeclaration();
            break;
        case ApexParser.SEMI:
            this.enterOuterAlt(localctx, 2);
            this.state = 509;
            this.match(ApexParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_interfaceMemberDeclaration;
    return this;
}

InterfaceMemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMemberDeclarationContext.prototype.constructor = InterfaceMemberDeclarationContext;

InterfaceMemberDeclarationContext.prototype.constDeclaration = function() {
    return this.getTypedRuleContext(ConstDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.interfaceMethodDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.genericInterfaceMethodDeclaration = function() {
    return this.getTypedRuleContext(GenericInterfaceMethodDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.annotationTypeDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterInterfaceMemberDeclaration(this);
	}
};

InterfaceMemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitInterfaceMemberDeclaration(this);
	}
};




ApexParser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext;

ApexParser.prototype.interfaceMemberDeclaration = function() {

    var localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ApexParser.RULE_interfaceMemberDeclaration);
    try {
        this.state = 519;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 512;
            this.constDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 513;
            this.interfaceMethodDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 514;
            this.genericInterfaceMethodDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 515;
            this.interfaceDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 516;
            this.annotationTypeDeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 517;
            this.classDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 518;
            this.enumDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_constDeclaration;
    return this;
}

ConstDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstDeclarationContext.prototype.constructor = ConstDeclarationContext;

ConstDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ConstDeclarationContext.prototype.constantDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantDeclaratorContext);
    } else {
        return this.getTypedRuleContext(ConstantDeclaratorContext,i);
    }
};

ConstDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterConstDeclaration(this);
	}
};

ConstDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitConstDeclaration(this);
	}
};




ApexParser.ConstDeclarationContext = ConstDeclarationContext;

ApexParser.prototype.constDeclaration = function() {

    var localctx = new ConstDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ApexParser.RULE_constDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 521;
        this.type();
        this.state = 522;
        this.constantDeclarator();
        this.state = 527;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 523;
            this.match(ApexParser.COMMA);
            this.state = 524;
            this.constantDeclarator();
            this.state = 529;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 530;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_constantDeclarator;
    return this;
}

ConstantDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantDeclaratorContext.prototype.constructor = ConstantDeclaratorContext;

ConstantDeclaratorContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

ConstantDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

ConstantDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterConstantDeclarator(this);
	}
};

ConstantDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitConstantDeclarator(this);
	}
};




ApexParser.ConstantDeclaratorContext = ConstantDeclaratorContext;

ApexParser.prototype.constantDeclarator = function() {

    var localctx = new ConstantDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ApexParser.RULE_constantDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 532;
        this.match(ApexParser.Identifier);
        this.state = 537;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.LBRACK) {
            this.state = 533;
            this.match(ApexParser.LBRACK);
            this.state = 534;
            this.match(ApexParser.RBRACK);
            this.state = 539;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 540;
        this.match(ApexParser.ASSIGN);
        this.state = 541;
        this.variableInitializer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_interfaceMethodDeclaration;
    return this;
}

InterfaceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMethodDeclarationContext.prototype.constructor = InterfaceMethodDeclarationContext;

InterfaceMethodDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

InterfaceMethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

InterfaceMethodDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

InterfaceMethodDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

InterfaceMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterInterfaceMethodDeclaration(this);
	}
};

InterfaceMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitInterfaceMethodDeclaration(this);
	}
};




ApexParser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext;

ApexParser.prototype.interfaceMethodDeclaration = function() {

    var localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ApexParser.RULE_interfaceMethodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 545;
        switch(this._input.LA(1)) {
        case ApexParser.T__5:
        case ApexParser.T__6:
        case ApexParser.Identifier:
            this.state = 543;
            this.type();
            break;
        case ApexParser.VOID:
            this.state = 544;
            this.match(ApexParser.VOID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 547;
        this.match(ApexParser.Identifier);
        this.state = 548;
        this.formalParameters();
        this.state = 553;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.LBRACK) {
            this.state = 549;
            this.match(ApexParser.LBRACK);
            this.state = 550;
            this.match(ApexParser.RBRACK);
            this.state = 555;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 558;
        _la = this._input.LA(1);
        if(_la===ApexParser.THROWS) {
            this.state = 556;
            this.match(ApexParser.THROWS);
            this.state = 557;
            this.qualifiedNameList();
        }

        this.state = 560;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GenericInterfaceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_genericInterfaceMethodDeclaration;
    return this;
}

GenericInterfaceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericInterfaceMethodDeclarationContext.prototype.constructor = GenericInterfaceMethodDeclarationContext;

GenericInterfaceMethodDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

GenericInterfaceMethodDeclarationContext.prototype.interfaceMethodDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
};

GenericInterfaceMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterGenericInterfaceMethodDeclaration(this);
	}
};

GenericInterfaceMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitGenericInterfaceMethodDeclaration(this);
	}
};




ApexParser.GenericInterfaceMethodDeclarationContext = GenericInterfaceMethodDeclarationContext;

ApexParser.prototype.genericInterfaceMethodDeclaration = function() {

    var localctx = new GenericInterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ApexParser.RULE_genericInterfaceMethodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 562;
        this.typeParameters();
        this.state = 563;
        this.interfaceMethodDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_variableDeclarators;
    return this;
}

VariableDeclaratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorsContext.prototype.constructor = VariableDeclaratorsContext;

VariableDeclaratorsContext.prototype.variableDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaratorContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaratorContext,i);
    }
};

VariableDeclaratorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterVariableDeclarators(this);
	}
};

VariableDeclaratorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitVariableDeclarators(this);
	}
};




ApexParser.VariableDeclaratorsContext = VariableDeclaratorsContext;

ApexParser.prototype.variableDeclarators = function() {

    var localctx = new VariableDeclaratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ApexParser.RULE_variableDeclarators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 565;
        this.variableDeclarator();
        this.state = 570;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 566;
            this.match(ApexParser.COMMA);
            this.state = 567;
            this.variableDeclarator();
            this.state = 572;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_variableDeclarator;
    return this;
}

VariableDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorContext.prototype.constructor = VariableDeclaratorContext;

VariableDeclaratorContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

VariableDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

VariableDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterVariableDeclarator(this);
	}
};

VariableDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitVariableDeclarator(this);
	}
};




ApexParser.VariableDeclaratorContext = VariableDeclaratorContext;

ApexParser.prototype.variableDeclarator = function() {

    var localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ApexParser.RULE_variableDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 573;
        this.variableDeclaratorId();
        this.state = 576;
        _la = this._input.LA(1);
        if(_la===ApexParser.ASSIGN) {
            this.state = 574;
            this.match(ApexParser.ASSIGN);
            this.state = 575;
            this.variableInitializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_variableDeclaratorId;
    return this;
}

VariableDeclaratorIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorIdContext.prototype.constructor = VariableDeclaratorIdContext;

VariableDeclaratorIdContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

VariableDeclaratorIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterVariableDeclaratorId(this);
	}
};

VariableDeclaratorIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitVariableDeclaratorId(this);
	}
};




ApexParser.VariableDeclaratorIdContext = VariableDeclaratorIdContext;

ApexParser.prototype.variableDeclaratorId = function() {

    var localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ApexParser.RULE_variableDeclaratorId);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 578;
        this.match(ApexParser.Identifier);
        this.state = 583;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.LBRACK) {
            this.state = 579;
            this.match(ApexParser.LBRACK);
            this.state = 580;
            this.match(ApexParser.RBRACK);
            this.state = 585;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_variableInitializer;
    return this;
}

VariableInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableInitializerContext.prototype.constructor = VariableInitializerContext;

VariableInitializerContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

VariableInitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterVariableInitializer(this);
	}
};

VariableInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitVariableInitializer(this);
	}
};




ApexParser.VariableInitializerContext = VariableInitializerContext;

ApexParser.prototype.variableInitializer = function() {

    var localctx = new VariableInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ApexParser.RULE_variableInitializer);
    try {
        this.state = 588;
        switch(this._input.LA(1)) {
        case ApexParser.LBRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 586;
            this.arrayInitializer();
            break;
        case ApexParser.T__5:
        case ApexParser.T__6:
        case ApexParser.SoqlLiteral:
        case ApexParser.NEW:
        case ApexParser.SUPER:
        case ApexParser.THIS:
        case ApexParser.VOID:
        case ApexParser.TRIGGER_NEW:
        case ApexParser.IntegerLiteral:
        case ApexParser.FloatingPointLiteral:
        case ApexParser.BooleanLiteral:
        case ApexParser.CharacterLiteral:
        case ApexParser.StringLiteral:
        case ApexParser.NullLiteral:
        case ApexParser.LPAREN:
        case ApexParser.LT:
        case ApexParser.BANG:
        case ApexParser.TILDE:
        case ApexParser.INC:
        case ApexParser.DEC:
        case ApexParser.ADD:
        case ApexParser.SUB:
        case ApexParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 587;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_arrayInitializer;
    return this;
}

ArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

ArrayInitializerContext.prototype.variableInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableInitializerContext);
    } else {
        return this.getTypedRuleContext(VariableInitializerContext,i);
    }
};

ArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitArrayInitializer(this);
	}
};




ApexParser.ArrayInitializerContext = ArrayInitializerContext;

ApexParser.prototype.arrayInitializer = function() {

    var localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ApexParser.RULE_arrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 590;
        this.match(ApexParser.LBRACE);
        this.state = 602;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.SoqlLiteral))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (ApexParser.NEW - 37)) | (1 << (ApexParser.SUPER - 37)) | (1 << (ApexParser.THIS - 37)) | (1 << (ApexParser.VOID - 37)) | (1 << (ApexParser.TRIGGER_NEW - 37)) | (1 << (ApexParser.IntegerLiteral - 37)) | (1 << (ApexParser.FloatingPointLiteral - 37)) | (1 << (ApexParser.BooleanLiteral - 37)) | (1 << (ApexParser.CharacterLiteral - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ApexParser.StringLiteral - 69)) | (1 << (ApexParser.NullLiteral - 69)) | (1 << (ApexParser.LPAREN - 69)) | (1 << (ApexParser.LBRACE - 69)) | (1 << (ApexParser.LT - 69)) | (1 << (ApexParser.BANG - 69)) | (1 << (ApexParser.TILDE - 69)) | (1 << (ApexParser.INC - 69)) | (1 << (ApexParser.DEC - 69)) | (1 << (ApexParser.ADD - 69)) | (1 << (ApexParser.SUB - 69)))) !== 0) || _la===ApexParser.Identifier) {
            this.state = 591;
            this.variableInitializer();
            this.state = 596;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 592;
                    this.match(ApexParser.COMMA);
                    this.state = 593;
                    this.variableInitializer(); 
                }
                this.state = 598;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
            }

            this.state = 600;
            _la = this._input.LA(1);
            if(_la===ApexParser.COMMA) {
                this.state = 599;
                this.match(ApexParser.COMMA);
            }

        }

        this.state = 604;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_enumConstantName;
    return this;
}

EnumConstantNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantNameContext.prototype.constructor = EnumConstantNameContext;

EnumConstantNameContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

EnumConstantNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterEnumConstantName(this);
	}
};

EnumConstantNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitEnumConstantName(this);
	}
};




ApexParser.EnumConstantNameContext = EnumConstantNameContext;

ApexParser.prototype.enumConstantName = function() {

    var localctx = new EnumConstantNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ApexParser.RULE_enumConstantName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 606;
        this.match(ApexParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

TypeContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitType(this);
	}
};




ApexParser.TypeContext = TypeContext;

ApexParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ApexParser.RULE_type);
    try {
        this.state = 624;
        switch(this._input.LA(1)) {
        case ApexParser.T__5:
        case ApexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 608;
            this.classOrInterfaceType();
            this.state = 613;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 609;
                    this.match(ApexParser.LBRACK);
                    this.state = 610;
                    this.match(ApexParser.RBRACK); 
                }
                this.state = 615;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
            }

            break;
        case ApexParser.T__6:
            this.enterOuterAlt(localctx, 2);
            this.state = 616;
            this.primitiveType();
            this.state = 621;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 617;
                    this.match(ApexParser.LBRACK);
                    this.state = 618;
                    this.match(ApexParser.RBRACK); 
                }
                this.state = 623;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_classOrInterfaceType;
    return this;
}

ClassOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOrInterfaceTypeContext.prototype.constructor = ClassOrInterfaceTypeContext;

ClassOrInterfaceTypeContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.Identifier);
    } else {
        return this.getToken(ApexParser.Identifier, i);
    }
};


ClassOrInterfaceTypeContext.prototype.typeArguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentsContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentsContext,i);
    }
};

ClassOrInterfaceTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterClassOrInterfaceType(this);
	}
};

ClassOrInterfaceTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitClassOrInterfaceType(this);
	}
};




ApexParser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext;

ApexParser.prototype.classOrInterfaceType = function() {

    var localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ApexParser.RULE_classOrInterfaceType);
    try {
        this.state = 642;
        switch(this._input.LA(1)) {
        case ApexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 626;
            this.match(ApexParser.Identifier);
            this.state = 628;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
            if(la_===1) {
                this.state = 627;
                this.typeArguments();

            }
            this.state = 637;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 630;
                    this.match(ApexParser.DOT);
                    this.state = 631;
                    this.match(ApexParser.Identifier);
                    this.state = 633;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
                    if(la_===1) {
                        this.state = 632;
                        this.typeArguments();

                    } 
                }
                this.state = 639;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
            }

            break;
        case ApexParser.T__5:
            this.enterOuterAlt(localctx, 2);
            this.state = 640;
            this.match(ApexParser.T__5);
            this.state = 641;
            this.typeArguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimitiveTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_primitiveType;
    return this;
}

PrimitiveTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveTypeContext.prototype.constructor = PrimitiveTypeContext;


PrimitiveTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterPrimitiveType(this);
	}
};

PrimitiveTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitPrimitiveType(this);
	}
};




ApexParser.PrimitiveTypeContext = PrimitiveTypeContext;

ApexParser.prototype.primitiveType = function() {

    var localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ApexParser.RULE_primitiveType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 644;
        this.match(ApexParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_typeArguments;
    return this;
}

TypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsContext.prototype.constructor = TypeArgumentsContext;

TypeArgumentsContext.prototype.typeArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentContext,i);
    }
};

TypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitTypeArguments(this);
	}
};




ApexParser.TypeArgumentsContext = TypeArgumentsContext;

ApexParser.prototype.typeArguments = function() {

    var localctx = new TypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ApexParser.RULE_typeArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 646;
        this.match(ApexParser.LT);
        this.state = 647;
        this.typeArgument();
        this.state = 652;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 648;
            this.match(ApexParser.COMMA);
            this.state = 649;
            this.typeArgument();
            this.state = 654;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 655;
        this.match(ApexParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_typeArgument;
    return this;
}

TypeArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentContext.prototype.constructor = TypeArgumentContext;

TypeArgumentContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterTypeArgument(this);
	}
};

TypeArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitTypeArgument(this);
	}
};




ApexParser.TypeArgumentContext = TypeArgumentContext;

ApexParser.prototype.typeArgument = function() {

    var localctx = new TypeArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ApexParser.RULE_typeArgument);
    var _la = 0; // Token type
    try {
        this.state = 663;
        switch(this._input.LA(1)) {
        case ApexParser.T__5:
        case ApexParser.T__6:
        case ApexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 657;
            this.type();
            break;
        case ApexParser.QUESTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 658;
            this.match(ApexParser.QUESTION);
            this.state = 661;
            _la = this._input.LA(1);
            if(_la===ApexParser.EXTENDS || _la===ApexParser.SUPER) {
                this.state = 659;
                _la = this._input.LA(1);
                if(!(_la===ApexParser.EXTENDS || _la===ApexParser.SUPER)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                this.state = 660;
                this.type();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_qualifiedNameList;
    return this;
}

QualifiedNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameListContext.prototype.constructor = QualifiedNameListContext;

QualifiedNameListContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

QualifiedNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterQualifiedNameList(this);
	}
};

QualifiedNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitQualifiedNameList(this);
	}
};




ApexParser.QualifiedNameListContext = QualifiedNameListContext;

ApexParser.prototype.qualifiedNameList = function() {

    var localctx = new QualifiedNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ApexParser.RULE_qualifiedNameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.qualifiedName();
        this.state = 670;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 666;
            this.match(ApexParser.COMMA);
            this.state = 667;
            this.qualifiedName();
            this.state = 672;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_formalParameters;
    return this;
}

FormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParametersContext.prototype.constructor = FormalParametersContext;

FormalParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterFormalParameters(this);
	}
};

FormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitFormalParameters(this);
	}
};




ApexParser.FormalParametersContext = FormalParametersContext;

ApexParser.prototype.formalParameters = function() {

    var localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ApexParser.RULE_formalParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 673;
        this.match(ApexParser.LPAREN);
        this.state = 675;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.FINAL))) !== 0) || _la===ApexParser.Identifier || _la===ApexParser.AT) {
            this.state = 674;
            this.formalParameterList();
        }

        this.state = 677;
        this.match(ApexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParameterListContext.prototype.lastFormalParameter = function() {
    return this.getTypedRuleContext(LastFormalParameterContext,0);
};

FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitFormalParameterList(this);
	}
};




ApexParser.FormalParameterListContext = FormalParameterListContext;

ApexParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ApexParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
        this.state = 692;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 679;
            this.formalParameter();
            this.state = 684;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 680;
                    this.match(ApexParser.COMMA);
                    this.state = 681;
                    this.formalParameter(); 
                }
                this.state = 686;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
            }

            this.state = 689;
            _la = this._input.LA(1);
            if(_la===ApexParser.COMMA) {
                this.state = 687;
                this.match(ApexParser.COMMA);
                this.state = 688;
                this.lastFormalParameter();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 691;
            this.lastFormalParameter();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

FormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitFormalParameter(this);
	}
};




ApexParser.FormalParameterContext = FormalParameterContext;

ApexParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ApexParser.RULE_formalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 697;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.FINAL || _la===ApexParser.AT) {
            this.state = 694;
            this.variableModifier();
            this.state = 699;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 700;
        this.type();
        this.state = 701;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LastFormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_lastFormalParameter;
    return this;
}

LastFormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastFormalParameterContext.prototype.constructor = LastFormalParameterContext;

LastFormalParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

LastFormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

LastFormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LastFormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterLastFormalParameter(this);
	}
};

LastFormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitLastFormalParameter(this);
	}
};




ApexParser.LastFormalParameterContext = LastFormalParameterContext;

ApexParser.prototype.lastFormalParameter = function() {

    var localctx = new LastFormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ApexParser.RULE_lastFormalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 706;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.FINAL || _la===ApexParser.AT) {
            this.state = 703;
            this.variableModifier();
            this.state = 708;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 709;
        this.type();
        this.state = 710;
        this.match(ApexParser.ELLIPSIS);
        this.state = 711;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_methodBody;
    return this;
}

MethodBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodBodyContext.prototype.constructor = MethodBodyContext;

MethodBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

MethodBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterMethodBody(this);
	}
};

MethodBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitMethodBody(this);
	}
};




ApexParser.MethodBodyContext = MethodBodyContext;

ApexParser.prototype.methodBody = function() {

    var localctx = new MethodBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ApexParser.RULE_methodBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 713;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_constructorBody;
    return this;
}

ConstructorBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorBodyContext.prototype.constructor = ConstructorBodyContext;

ConstructorBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ConstructorBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterConstructorBody(this);
	}
};

ConstructorBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitConstructorBody(this);
	}
};




ApexParser.ConstructorBodyContext = ConstructorBodyContext;

ApexParser.prototype.constructorBody = function() {

    var localctx = new ConstructorBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ApexParser.RULE_constructorBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 715;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.Identifier);
    } else {
        return this.getToken(ApexParser.Identifier, i);
    }
};


QualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterQualifiedName(this);
	}
};

QualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitQualifiedName(this);
	}
};




ApexParser.QualifiedNameContext = QualifiedNameContext;

ApexParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ApexParser.RULE_qualifiedName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 717;
        this.match(ApexParser.Identifier);
        this.state = 722;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 718;
                this.match(ApexParser.DOT);
                this.state = 719;
                this.match(ApexParser.Identifier); 
            }
            this.state = 724;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.IntegerLiteral = function() {
    return this.getToken(ApexParser.IntegerLiteral, 0);
};

LiteralContext.prototype.FloatingPointLiteral = function() {
    return this.getToken(ApexParser.FloatingPointLiteral, 0);
};

LiteralContext.prototype.CharacterLiteral = function() {
    return this.getToken(ApexParser.CharacterLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(ApexParser.StringLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(ApexParser.BooleanLiteral, 0);
};

LiteralContext.prototype.TRIGGER_NEW = function() {
    return this.getToken(ApexParser.TRIGGER_NEW, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitLiteral(this);
	}
};




ApexParser.LiteralContext = LiteralContext;

ApexParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ApexParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 725;
        _la = this._input.LA(1);
        if(!(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ApexParser.TRIGGER_NEW - 59)) | (1 << (ApexParser.IntegerLiteral - 59)) | (1 << (ApexParser.FloatingPointLiteral - 59)) | (1 << (ApexParser.BooleanLiteral - 59)) | (1 << (ApexParser.CharacterLiteral - 59)) | (1 << (ApexParser.StringLiteral - 59)) | (1 << (ApexParser.NullLiteral - 59)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.annotationName = function() {
    return this.getTypedRuleContext(AnnotationNameContext,0);
};

AnnotationContext.prototype.elementValuePairs = function() {
    return this.getTypedRuleContext(ElementValuePairsContext,0);
};

AnnotationContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

AnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterAnnotation(this);
	}
};

AnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitAnnotation(this);
	}
};




ApexParser.AnnotationContext = AnnotationContext;

ApexParser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ApexParser.RULE_annotation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 727;
        this.match(ApexParser.AT);
        this.state = 728;
        this.annotationName();
        this.state = 735;
        _la = this._input.LA(1);
        if(_la===ApexParser.LPAREN) {
            this.state = 729;
            this.match(ApexParser.LPAREN);
            this.state = 732;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
            if(la_===1) {
                this.state = 730;
                this.elementValuePairs();

            } else if(la_===2) {
                this.state = 731;
                this.elementValue();

            }
            this.state = 734;
            this.match(ApexParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_annotationName;
    return this;
}

AnnotationNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationNameContext.prototype.constructor = AnnotationNameContext;

AnnotationNameContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

AnnotationNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterAnnotationName(this);
	}
};

AnnotationNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitAnnotationName(this);
	}
};




ApexParser.AnnotationNameContext = AnnotationNameContext;

ApexParser.prototype.annotationName = function() {

    var localctx = new AnnotationNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ApexParser.RULE_annotationName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 737;
        this.qualifiedName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValuePairsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_elementValuePairs;
    return this;
}

ElementValuePairsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairsContext.prototype.constructor = ElementValuePairsContext;

ElementValuePairsContext.prototype.elementValuePair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValuePairContext);
    } else {
        return this.getTypedRuleContext(ElementValuePairContext,i);
    }
};

ElementValuePairsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterElementValuePairs(this);
	}
};

ElementValuePairsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitElementValuePairs(this);
	}
};




ApexParser.ElementValuePairsContext = ElementValuePairsContext;

ApexParser.prototype.elementValuePairs = function() {

    var localctx = new ElementValuePairsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ApexParser.RULE_elementValuePairs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 739;
        this.elementValuePair();
        this.state = 744;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 740;
            this.match(ApexParser.COMMA);
            this.state = 741;
            this.elementValuePair();
            this.state = 746;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValuePairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_elementValuePair;
    return this;
}

ElementValuePairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairContext.prototype.constructor = ElementValuePairContext;

ElementValuePairContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

ElementValuePairContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

ElementValuePairContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterElementValuePair(this);
	}
};

ElementValuePairContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitElementValuePair(this);
	}
};




ApexParser.ElementValuePairContext = ElementValuePairContext;

ApexParser.prototype.elementValuePair = function() {

    var localctx = new ElementValuePairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ApexParser.RULE_elementValuePair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 747;
        this.match(ApexParser.Identifier);
        this.state = 748;
        this.match(ApexParser.ASSIGN);
        this.state = 749;
        this.elementValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_elementValue;
    return this;
}

ElementValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueContext.prototype.constructor = ElementValueContext;

ElementValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElementValueContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ElementValueContext.prototype.elementValueArrayInitializer = function() {
    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
};

ElementValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterElementValue(this);
	}
};

ElementValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitElementValue(this);
	}
};




ApexParser.ElementValueContext = ElementValueContext;

ApexParser.prototype.elementValue = function() {

    var localctx = new ElementValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ApexParser.RULE_elementValue);
    try {
        this.state = 754;
        switch(this._input.LA(1)) {
        case ApexParser.T__5:
        case ApexParser.T__6:
        case ApexParser.SoqlLiteral:
        case ApexParser.NEW:
        case ApexParser.SUPER:
        case ApexParser.THIS:
        case ApexParser.VOID:
        case ApexParser.TRIGGER_NEW:
        case ApexParser.IntegerLiteral:
        case ApexParser.FloatingPointLiteral:
        case ApexParser.BooleanLiteral:
        case ApexParser.CharacterLiteral:
        case ApexParser.StringLiteral:
        case ApexParser.NullLiteral:
        case ApexParser.LPAREN:
        case ApexParser.LT:
        case ApexParser.BANG:
        case ApexParser.TILDE:
        case ApexParser.INC:
        case ApexParser.DEC:
        case ApexParser.ADD:
        case ApexParser.SUB:
        case ApexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 751;
            this.expression(0);
            break;
        case ApexParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 752;
            this.annotation();
            break;
        case ApexParser.LBRACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 753;
            this.elementValueArrayInitializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValueArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_elementValueArrayInitializer;
    return this;
}

ElementValueArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueArrayInitializerContext.prototype.constructor = ElementValueArrayInitializerContext;

ElementValueArrayInitializerContext.prototype.elementValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValueContext);
    } else {
        return this.getTypedRuleContext(ElementValueContext,i);
    }
};

ElementValueArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterElementValueArrayInitializer(this);
	}
};

ElementValueArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitElementValueArrayInitializer(this);
	}
};




ApexParser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext;

ApexParser.prototype.elementValueArrayInitializer = function() {

    var localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ApexParser.RULE_elementValueArrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 756;
        this.match(ApexParser.LBRACE);
        this.state = 765;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.SoqlLiteral))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (ApexParser.NEW - 37)) | (1 << (ApexParser.SUPER - 37)) | (1 << (ApexParser.THIS - 37)) | (1 << (ApexParser.VOID - 37)) | (1 << (ApexParser.TRIGGER_NEW - 37)) | (1 << (ApexParser.IntegerLiteral - 37)) | (1 << (ApexParser.FloatingPointLiteral - 37)) | (1 << (ApexParser.BooleanLiteral - 37)) | (1 << (ApexParser.CharacterLiteral - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ApexParser.StringLiteral - 69)) | (1 << (ApexParser.NullLiteral - 69)) | (1 << (ApexParser.LPAREN - 69)) | (1 << (ApexParser.LBRACE - 69)) | (1 << (ApexParser.LT - 69)) | (1 << (ApexParser.BANG - 69)) | (1 << (ApexParser.TILDE - 69)) | (1 << (ApexParser.INC - 69)) | (1 << (ApexParser.DEC - 69)) | (1 << (ApexParser.ADD - 69)) | (1 << (ApexParser.SUB - 69)))) !== 0) || _la===ApexParser.Identifier || _la===ApexParser.AT) {
            this.state = 757;
            this.elementValue();
            this.state = 762;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 758;
                    this.match(ApexParser.COMMA);
                    this.state = 759;
                    this.elementValue(); 
                }
                this.state = 764;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
            }

        }

        this.state = 768;
        _la = this._input.LA(1);
        if(_la===ApexParser.COMMA) {
            this.state = 767;
            this.match(ApexParser.COMMA);
        }

        this.state = 770;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_annotationTypeDeclaration;
    return this;
}

AnnotationTypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeDeclarationContext.prototype.constructor = AnnotationTypeDeclarationContext;

AnnotationTypeDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

AnnotationTypeDeclarationContext.prototype.annotationTypeBody = function() {
    return this.getTypedRuleContext(AnnotationTypeBodyContext,0);
};

AnnotationTypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterAnnotationTypeDeclaration(this);
	}
};

AnnotationTypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitAnnotationTypeDeclaration(this);
	}
};




ApexParser.AnnotationTypeDeclarationContext = AnnotationTypeDeclarationContext;

ApexParser.prototype.annotationTypeDeclaration = function() {

    var localctx = new AnnotationTypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ApexParser.RULE_annotationTypeDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 772;
        this.match(ApexParser.AT);
        this.state = 773;
        this.match(ApexParser.INTERFACE);
        this.state = 774;
        this.match(ApexParser.Identifier);
        this.state = 775;
        this.annotationTypeBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_annotationTypeBody;
    return this;
}

AnnotationTypeBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeBodyContext.prototype.constructor = AnnotationTypeBodyContext;

AnnotationTypeBodyContext.prototype.annotationTypeElementDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationTypeElementDeclarationContext);
    } else {
        return this.getTypedRuleContext(AnnotationTypeElementDeclarationContext,i);
    }
};

AnnotationTypeBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterAnnotationTypeBody(this);
	}
};

AnnotationTypeBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitAnnotationTypeBody(this);
	}
};




ApexParser.AnnotationTypeBodyContext = AnnotationTypeBodyContext;

ApexParser.prototype.annotationTypeBody = function() {

    var localctx = new AnnotationTypeBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ApexParser.RULE_annotationTypeBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 777;
        this.match(ApexParser.LBRACE);
        this.state = 781;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__0) | (1 << ApexParser.T__1) | (1 << ApexParser.T__2) | (1 << ApexParser.T__3) | (1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.ABSTRACT) | (1 << ApexParser.CLASS) | (1 << ApexParser.ENUM) | (1 << ApexParser.FINAL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.INTERFACE - 34)) | (1 << (ApexParser.NATIVE - 34)) | (1 << (ApexParser.PRIVATE - 34)) | (1 << (ApexParser.PROTECTED - 34)) | (1 << (ApexParser.PUBLIC - 34)) | (1 << (ApexParser.STATIC - 34)) | (1 << (ApexParser.SYNCHRONIZED - 34)) | (1 << (ApexParser.TRANSIENT - 34)) | (1 << (ApexParser.GLOBAL - 34)) | (1 << (ApexParser.WEBSERVICE - 34)) | (1 << (ApexParser.TESTMETHOD - 34)))) !== 0) || _la===ApexParser.SEMI || _la===ApexParser.Identifier || _la===ApexParser.AT) {
            this.state = 778;
            this.annotationTypeElementDeclaration();
            this.state = 783;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 784;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeElementDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_annotationTypeElementDeclaration;
    return this;
}

AnnotationTypeElementDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeElementDeclarationContext.prototype.constructor = AnnotationTypeElementDeclarationContext;

AnnotationTypeElementDeclarationContext.prototype.annotationTypeElementRest = function() {
    return this.getTypedRuleContext(AnnotationTypeElementRestContext,0);
};

AnnotationTypeElementDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

AnnotationTypeElementDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterAnnotationTypeElementDeclaration(this);
	}
};

AnnotationTypeElementDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitAnnotationTypeElementDeclaration(this);
	}
};




ApexParser.AnnotationTypeElementDeclarationContext = AnnotationTypeElementDeclarationContext;

ApexParser.prototype.annotationTypeElementDeclaration = function() {

    var localctx = new AnnotationTypeElementDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ApexParser.RULE_annotationTypeElementDeclaration);
    try {
        this.state = 794;
        switch(this._input.LA(1)) {
        case ApexParser.T__0:
        case ApexParser.T__1:
        case ApexParser.T__2:
        case ApexParser.T__3:
        case ApexParser.T__5:
        case ApexParser.T__6:
        case ApexParser.ABSTRACT:
        case ApexParser.CLASS:
        case ApexParser.ENUM:
        case ApexParser.FINAL:
        case ApexParser.INTERFACE:
        case ApexParser.NATIVE:
        case ApexParser.PRIVATE:
        case ApexParser.PROTECTED:
        case ApexParser.PUBLIC:
        case ApexParser.STATIC:
        case ApexParser.SYNCHRONIZED:
        case ApexParser.TRANSIENT:
        case ApexParser.GLOBAL:
        case ApexParser.WEBSERVICE:
        case ApexParser.TESTMETHOD:
        case ApexParser.Identifier:
        case ApexParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 789;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 786;
                    this.modifier(); 
                }
                this.state = 791;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
            }

            this.state = 792;
            this.annotationTypeElementRest();
            break;
        case ApexParser.SEMI:
            this.enterOuterAlt(localctx, 2);
            this.state = 793;
            this.match(ApexParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeElementRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_annotationTypeElementRest;
    return this;
}

AnnotationTypeElementRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeElementRestContext.prototype.constructor = AnnotationTypeElementRestContext;

AnnotationTypeElementRestContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

AnnotationTypeElementRestContext.prototype.annotationMethodOrConstantRest = function() {
    return this.getTypedRuleContext(AnnotationMethodOrConstantRestContext,0);
};

AnnotationTypeElementRestContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

AnnotationTypeElementRestContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

AnnotationTypeElementRestContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

AnnotationTypeElementRestContext.prototype.annotationTypeDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
};

AnnotationTypeElementRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterAnnotationTypeElementRest(this);
	}
};

AnnotationTypeElementRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitAnnotationTypeElementRest(this);
	}
};




ApexParser.AnnotationTypeElementRestContext = AnnotationTypeElementRestContext;

ApexParser.prototype.annotationTypeElementRest = function() {

    var localctx = new AnnotationTypeElementRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ApexParser.RULE_annotationTypeElementRest);
    try {
        this.state = 816;
        switch(this._input.LA(1)) {
        case ApexParser.T__5:
        case ApexParser.T__6:
        case ApexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 796;
            this.type();
            this.state = 797;
            this.annotationMethodOrConstantRest();
            this.state = 798;
            this.match(ApexParser.SEMI);
            break;
        case ApexParser.CLASS:
            this.enterOuterAlt(localctx, 2);
            this.state = 800;
            this.classDeclaration();
            this.state = 802;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
            if(la_===1) {
                this.state = 801;
                this.match(ApexParser.SEMI);

            }
            break;
        case ApexParser.INTERFACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 804;
            this.interfaceDeclaration();
            this.state = 806;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
            if(la_===1) {
                this.state = 805;
                this.match(ApexParser.SEMI);

            }
            break;
        case ApexParser.ENUM:
            this.enterOuterAlt(localctx, 4);
            this.state = 808;
            this.enumDeclaration();
            this.state = 810;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
            if(la_===1) {
                this.state = 809;
                this.match(ApexParser.SEMI);

            }
            break;
        case ApexParser.AT:
            this.enterOuterAlt(localctx, 5);
            this.state = 812;
            this.annotationTypeDeclaration();
            this.state = 814;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
            if(la_===1) {
                this.state = 813;
                this.match(ApexParser.SEMI);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationMethodOrConstantRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_annotationMethodOrConstantRest;
    return this;
}

AnnotationMethodOrConstantRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationMethodOrConstantRestContext.prototype.constructor = AnnotationMethodOrConstantRestContext;

AnnotationMethodOrConstantRestContext.prototype.annotationMethodRest = function() {
    return this.getTypedRuleContext(AnnotationMethodRestContext,0);
};

AnnotationMethodOrConstantRestContext.prototype.annotationConstantRest = function() {
    return this.getTypedRuleContext(AnnotationConstantRestContext,0);
};

AnnotationMethodOrConstantRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterAnnotationMethodOrConstantRest(this);
	}
};

AnnotationMethodOrConstantRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitAnnotationMethodOrConstantRest(this);
	}
};




ApexParser.AnnotationMethodOrConstantRestContext = AnnotationMethodOrConstantRestContext;

ApexParser.prototype.annotationMethodOrConstantRest = function() {

    var localctx = new AnnotationMethodOrConstantRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ApexParser.RULE_annotationMethodOrConstantRest);
    try {
        this.state = 820;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 818;
            this.annotationMethodRest();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 819;
            this.annotationConstantRest();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationMethodRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_annotationMethodRest;
    return this;
}

AnnotationMethodRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationMethodRestContext.prototype.constructor = AnnotationMethodRestContext;

AnnotationMethodRestContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

AnnotationMethodRestContext.prototype.defaultValue = function() {
    return this.getTypedRuleContext(DefaultValueContext,0);
};

AnnotationMethodRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterAnnotationMethodRest(this);
	}
};

AnnotationMethodRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitAnnotationMethodRest(this);
	}
};




ApexParser.AnnotationMethodRestContext = AnnotationMethodRestContext;

ApexParser.prototype.annotationMethodRest = function() {

    var localctx = new AnnotationMethodRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ApexParser.RULE_annotationMethodRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 822;
        this.match(ApexParser.Identifier);
        this.state = 823;
        this.match(ApexParser.LPAREN);
        this.state = 824;
        this.match(ApexParser.RPAREN);
        this.state = 826;
        _la = this._input.LA(1);
        if(_la===ApexParser.DEFAULT) {
            this.state = 825;
            this.defaultValue();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationConstantRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_annotationConstantRest;
    return this;
}

AnnotationConstantRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationConstantRestContext.prototype.constructor = AnnotationConstantRestContext;

AnnotationConstantRestContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

AnnotationConstantRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterAnnotationConstantRest(this);
	}
};

AnnotationConstantRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitAnnotationConstantRest(this);
	}
};




ApexParser.AnnotationConstantRestContext = AnnotationConstantRestContext;

ApexParser.prototype.annotationConstantRest = function() {

    var localctx = new AnnotationConstantRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ApexParser.RULE_annotationConstantRest);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 828;
        this.variableDeclarators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefaultValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_defaultValue;
    return this;
}

DefaultValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultValueContext.prototype.constructor = DefaultValueContext;

DefaultValueContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

DefaultValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterDefaultValue(this);
	}
};

DefaultValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitDefaultValue(this);
	}
};




ApexParser.DefaultValueContext = DefaultValueContext;

ApexParser.prototype.defaultValue = function() {

    var localctx = new DefaultValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ApexParser.RULE_defaultValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 830;
        this.match(ApexParser.DEFAULT);
        this.state = 831;
        this.elementValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitBlock(this);
	}
};




ApexParser.BlockContext = BlockContext;

ApexParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ApexParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 833;
        this.match(ApexParser.LBRACE);
        this.state = 837;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__0) | (1 << ApexParser.T__1) | (1 << ApexParser.T__2) | (1 << ApexParser.T__3) | (1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.SoqlLiteral) | (1 << ApexParser.ABSTRACT) | (1 << ApexParser.BREAK) | (1 << ApexParser.CLASS) | (1 << ApexParser.CONTINUE) | (1 << ApexParser.DO) | (1 << ApexParser.ENUM) | (1 << ApexParser.FINAL) | (1 << ApexParser.FOR) | (1 << ApexParser.IF))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ApexParser.INTERFACE - 34)) | (1 << (ApexParser.NEW - 34)) | (1 << (ApexParser.PRIVATE - 34)) | (1 << (ApexParser.PROTECTED - 34)) | (1 << (ApexParser.PUBLIC - 34)) | (1 << (ApexParser.RETURN - 34)) | (1 << (ApexParser.STATIC - 34)) | (1 << (ApexParser.SUPER - 34)) | (1 << (ApexParser.THIS - 34)) | (1 << (ApexParser.THROW - 34)) | (1 << (ApexParser.TRY - 34)) | (1 << (ApexParser.VOID - 34)) | (1 << (ApexParser.WHILE - 34)) | (1 << (ApexParser.GLOBAL - 34)) | (1 << (ApexParser.WEBSERVICE - 34)) | (1 << (ApexParser.TESTMETHOD - 34)) | (1 << (ApexParser.TRIGGER_NEW - 34)) | (1 << (ApexParser.DB_UPDATE - 34)) | (1 << (ApexParser.DB_UPSERT - 34)) | (1 << (ApexParser.DB_DELETE - 34)) | (1 << (ApexParser.DB_INSERT - 34)) | (1 << (ApexParser.DB_UNDELETE - 34)) | (1 << (ApexParser.IntegerLiteral - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ApexParser.FloatingPointLiteral - 66)) | (1 << (ApexParser.BooleanLiteral - 66)) | (1 << (ApexParser.CharacterLiteral - 66)) | (1 << (ApexParser.StringLiteral - 66)) | (1 << (ApexParser.NullLiteral - 66)) | (1 << (ApexParser.LPAREN - 66)) | (1 << (ApexParser.LBRACE - 66)) | (1 << (ApexParser.SEMI - 66)) | (1 << (ApexParser.LT - 66)) | (1 << (ApexParser.BANG - 66)) | (1 << (ApexParser.TILDE - 66)) | (1 << (ApexParser.INC - 66)) | (1 << (ApexParser.DEC - 66)) | (1 << (ApexParser.ADD - 66)) | (1 << (ApexParser.SUB - 66)))) !== 0) || _la===ApexParser.Identifier || _la===ApexParser.AT) {
            this.state = 834;
            this.blockStatement();
            this.state = 839;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 840;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.localVariableDeclarationStatement = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,0);
};

BlockStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

BlockStatementContext.prototype.typeDeclaration = function() {
    return this.getTypedRuleContext(TypeDeclarationContext,0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitBlockStatement(this);
	}
};




ApexParser.BlockStatementContext = BlockStatementContext;

ApexParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ApexParser.RULE_blockStatement);
    try {
        this.state = 845;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 842;
            this.localVariableDeclarationStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 843;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 844;
            this.typeDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalVariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_localVariableDeclarationStatement;
    return this;
}

LocalVariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationStatementContext.prototype.constructor = LocalVariableDeclarationStatementContext;

LocalVariableDeclarationStatementContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

LocalVariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterLocalVariableDeclarationStatement(this);
	}
};

LocalVariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitLocalVariableDeclarationStatement(this);
	}
};




ApexParser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext;

ApexParser.prototype.localVariableDeclarationStatement = function() {

    var localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ApexParser.RULE_localVariableDeclarationStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 847;
        this.localVariableDeclaration();
        this.state = 848;
        this.match(ApexParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_localVariableDeclaration;
    return this;
}

LocalVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationContext.prototype.constructor = LocalVariableDeclarationContext;

LocalVariableDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

LocalVariableDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

LocalVariableDeclarationContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LocalVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterLocalVariableDeclaration(this);
	}
};

LocalVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitLocalVariableDeclaration(this);
	}
};




ApexParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext;

ApexParser.prototype.localVariableDeclaration = function() {

    var localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ApexParser.RULE_localVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 853;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.FINAL || _la===ApexParser.AT) {
            this.state = 850;
            this.variableModifier();
            this.state = 855;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 856;
        this.type();
        this.state = 857;
        this.variableDeclarators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.parExpression = function() {
    return this.getTypedRuleContext(ParExpressionContext,0);
};

StatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementContext.prototype.forControl = function() {
    return this.getTypedRuleContext(ForControlContext,0);
};

StatementContext.prototype.finallyBlock = function() {
    return this.getTypedRuleContext(FinallyBlockContext,0);
};

StatementContext.prototype.catchClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CatchClauseContext);
    } else {
        return this.getTypedRuleContext(CatchClauseContext,i);
    }
};

StatementContext.prototype.resourceSpecification = function() {
    return this.getTypedRuleContext(ResourceSpecificationContext,0);
};

StatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

StatementContext.prototype.statementExpression = function() {
    return this.getTypedRuleContext(StatementExpressionContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitStatement(this);
	}
};




ApexParser.StatementContext = StatementContext;

ApexParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ApexParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 934;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 859;
            this.block();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 860;
            this.match(ApexParser.IF);
            this.state = 861;
            this.parExpression();
            this.state = 862;
            this.statement();
            this.state = 865;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
            if(la_===1) {
                this.state = 863;
                this.match(ApexParser.ELSE);
                this.state = 864;
                this.statement();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 867;
            this.match(ApexParser.FOR);
            this.state = 868;
            this.match(ApexParser.LPAREN);
            this.state = 869;
            this.forControl();
            this.state = 870;
            this.match(ApexParser.RPAREN);
            this.state = 871;
            this.statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 873;
            this.match(ApexParser.WHILE);
            this.state = 874;
            this.parExpression();
            this.state = 875;
            this.statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 877;
            this.match(ApexParser.DO);
            this.state = 878;
            this.statement();
            this.state = 879;
            this.match(ApexParser.WHILE);
            this.state = 880;
            this.parExpression();
            this.state = 881;
            this.match(ApexParser.SEMI);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 883;
            this.match(ApexParser.TRY);
            this.state = 884;
            this.block();
            this.state = 894;
            switch(this._input.LA(1)) {
            case ApexParser.CATCH:
                this.state = 886; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 885;
                    this.catchClause();
                    this.state = 888; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===ApexParser.CATCH);
                this.state = 891;
                _la = this._input.LA(1);
                if(_la===ApexParser.FINALLY) {
                    this.state = 890;
                    this.finallyBlock();
                }

                break;
            case ApexParser.FINALLY:
                this.state = 893;
                this.finallyBlock();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 896;
            this.match(ApexParser.TRY);
            this.state = 897;
            this.resourceSpecification();
            this.state = 898;
            this.block();
            this.state = 902;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ApexParser.CATCH) {
                this.state = 899;
                this.catchClause();
                this.state = 904;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 906;
            _la = this._input.LA(1);
            if(_la===ApexParser.FINALLY) {
                this.state = 905;
                this.finallyBlock();
            }

            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 908;
            this.match(ApexParser.RETURN);
            this.state = 910;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.SoqlLiteral))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (ApexParser.NEW - 37)) | (1 << (ApexParser.SUPER - 37)) | (1 << (ApexParser.THIS - 37)) | (1 << (ApexParser.VOID - 37)) | (1 << (ApexParser.TRIGGER_NEW - 37)) | (1 << (ApexParser.IntegerLiteral - 37)) | (1 << (ApexParser.FloatingPointLiteral - 37)) | (1 << (ApexParser.BooleanLiteral - 37)) | (1 << (ApexParser.CharacterLiteral - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ApexParser.StringLiteral - 69)) | (1 << (ApexParser.NullLiteral - 69)) | (1 << (ApexParser.LPAREN - 69)) | (1 << (ApexParser.LT - 69)) | (1 << (ApexParser.BANG - 69)) | (1 << (ApexParser.TILDE - 69)) | (1 << (ApexParser.INC - 69)) | (1 << (ApexParser.DEC - 69)) | (1 << (ApexParser.ADD - 69)) | (1 << (ApexParser.SUB - 69)))) !== 0) || _la===ApexParser.Identifier) {
                this.state = 909;
                this.expression(0);
            }

            this.state = 912;
            this.match(ApexParser.SEMI);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 913;
            this.match(ApexParser.THROW);
            this.state = 914;
            this.expression(0);
            this.state = 915;
            this.match(ApexParser.SEMI);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 917;
            this.match(ApexParser.BREAK);
            this.state = 919;
            _la = this._input.LA(1);
            if(_la===ApexParser.Identifier) {
                this.state = 918;
                this.match(ApexParser.Identifier);
            }

            this.state = 921;
            this.match(ApexParser.SEMI);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 922;
            this.match(ApexParser.CONTINUE);
            this.state = 924;
            _la = this._input.LA(1);
            if(_la===ApexParser.Identifier) {
                this.state = 923;
                this.match(ApexParser.Identifier);
            }

            this.state = 926;
            this.match(ApexParser.SEMI);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 927;
            this.match(ApexParser.SEMI);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 928;
            this.statementExpression();
            this.state = 929;
            this.match(ApexParser.SEMI);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 931;
            this.match(ApexParser.Identifier);
            this.state = 932;
            this.match(ApexParser.COLON);
            this.state = 933;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_propertyBlock;
    return this;
}

PropertyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyBlockContext.prototype.constructor = PropertyBlockContext;

PropertyBlockContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

PropertyBlockContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

PropertyBlockContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

PropertyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterPropertyBlock(this);
	}
};

PropertyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitPropertyBlock(this);
	}
};




ApexParser.PropertyBlockContext = PropertyBlockContext;

ApexParser.prototype.propertyBlock = function() {

    var localctx = new PropertyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ApexParser.RULE_propertyBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 939;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__0) | (1 << ApexParser.T__1) | (1 << ApexParser.T__2) | (1 << ApexParser.T__3) | (1 << ApexParser.ABSTRACT) | (1 << ApexParser.FINAL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ApexParser.NATIVE - 36)) | (1 << (ApexParser.PRIVATE - 36)) | (1 << (ApexParser.PROTECTED - 36)) | (1 << (ApexParser.PUBLIC - 36)) | (1 << (ApexParser.STATIC - 36)) | (1 << (ApexParser.SYNCHRONIZED - 36)) | (1 << (ApexParser.TRANSIENT - 36)) | (1 << (ApexParser.GLOBAL - 36)) | (1 << (ApexParser.WEBSERVICE - 36)) | (1 << (ApexParser.TESTMETHOD - 36)))) !== 0) || _la===ApexParser.AT) {
            this.state = 936;
            this.modifier();
            this.state = 941;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 944;
        switch(this._input.LA(1)) {
        case ApexParser.T__7:
            this.state = 942;
            this.getter();
            break;
        case ApexParser.T__5:
            this.state = 943;
            this.setter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_getter;
    return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

GetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterGetter(this);
	}
};

GetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitGetter(this);
	}
};




ApexParser.GetterContext = GetterContext;

ApexParser.prototype.getter = function() {

    var localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ApexParser.RULE_getter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 946;
        this.match(ApexParser.T__7);
        this.state = 949;
        switch(this._input.LA(1)) {
        case ApexParser.SEMI:
            this.state = 947;
            this.match(ApexParser.SEMI);
            break;
        case ApexParser.LBRACE:
            this.state = 948;
            this.methodBody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_setter;
    return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

SetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterSetter(this);
	}
};

SetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitSetter(this);
	}
};




ApexParser.SetterContext = SetterContext;

ApexParser.prototype.setter = function() {

    var localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ApexParser.RULE_setter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 951;
        this.match(ApexParser.T__5);
        this.state = 954;
        switch(this._input.LA(1)) {
        case ApexParser.SEMI:
            this.state = 952;
            this.match(ApexParser.SEMI);
            break;
        case ApexParser.LBRACE:
            this.state = 953;
            this.methodBody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_catchClause;
    return this;
}

CatchClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchClauseContext.prototype.constructor = CatchClauseContext;

CatchClauseContext.prototype.catchType = function() {
    return this.getTypedRuleContext(CatchTypeContext,0);
};

CatchClauseContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

CatchClauseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchClauseContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

CatchClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterCatchClause(this);
	}
};

CatchClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitCatchClause(this);
	}
};




ApexParser.CatchClauseContext = CatchClauseContext;

ApexParser.prototype.catchClause = function() {

    var localctx = new CatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ApexParser.RULE_catchClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 956;
        this.match(ApexParser.CATCH);
        this.state = 957;
        this.match(ApexParser.LPAREN);
        this.state = 961;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.FINAL || _la===ApexParser.AT) {
            this.state = 958;
            this.variableModifier();
            this.state = 963;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 964;
        this.catchType();
        this.state = 965;
        this.match(ApexParser.Identifier);
        this.state = 966;
        this.match(ApexParser.RPAREN);
        this.state = 967;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_catchType;
    return this;
}

CatchTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchTypeContext.prototype.constructor = CatchTypeContext;

CatchTypeContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

CatchTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterCatchType(this);
	}
};

CatchTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitCatchType(this);
	}
};




ApexParser.CatchTypeContext = CatchTypeContext;

ApexParser.prototype.catchType = function() {

    var localctx = new CatchTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ApexParser.RULE_catchType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 969;
        this.qualifiedName();
        this.state = 974;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.BITOR) {
            this.state = 970;
            this.match(ApexParser.BITOR);
            this.state = 971;
            this.qualifiedName();
            this.state = 976;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FinallyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_finallyBlock;
    return this;
}

FinallyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyBlockContext.prototype.constructor = FinallyBlockContext;

FinallyBlockContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterFinallyBlock(this);
	}
};

FinallyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitFinallyBlock(this);
	}
};




ApexParser.FinallyBlockContext = FinallyBlockContext;

ApexParser.prototype.finallyBlock = function() {

    var localctx = new FinallyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ApexParser.RULE_finallyBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 977;
        this.match(ApexParser.FINALLY);
        this.state = 978;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceSpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_resourceSpecification;
    return this;
}

ResourceSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceSpecificationContext.prototype.constructor = ResourceSpecificationContext;

ResourceSpecificationContext.prototype.resources = function() {
    return this.getTypedRuleContext(ResourcesContext,0);
};

ResourceSpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterResourceSpecification(this);
	}
};

ResourceSpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitResourceSpecification(this);
	}
};




ApexParser.ResourceSpecificationContext = ResourceSpecificationContext;

ApexParser.prototype.resourceSpecification = function() {

    var localctx = new ResourceSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ApexParser.RULE_resourceSpecification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 980;
        this.match(ApexParser.LPAREN);
        this.state = 981;
        this.resources();
        this.state = 983;
        _la = this._input.LA(1);
        if(_la===ApexParser.SEMI) {
            this.state = 982;
            this.match(ApexParser.SEMI);
        }

        this.state = 985;
        this.match(ApexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourcesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_resources;
    return this;
}

ResourcesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourcesContext.prototype.constructor = ResourcesContext;

ResourcesContext.prototype.resource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResourceContext);
    } else {
        return this.getTypedRuleContext(ResourceContext,i);
    }
};

ResourcesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterResources(this);
	}
};

ResourcesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitResources(this);
	}
};




ApexParser.ResourcesContext = ResourcesContext;

ApexParser.prototype.resources = function() {

    var localctx = new ResourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ApexParser.RULE_resources);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 987;
        this.resource();
        this.state = 992;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,115,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 988;
                this.match(ApexParser.SEMI);
                this.state = 989;
                this.resource(); 
            }
            this.state = 994;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,115,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_resource;
    return this;
}

ResourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceContext.prototype.constructor = ResourceContext;

ResourceContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

ResourceContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

ResourceContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ResourceContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

ResourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterResource(this);
	}
};

ResourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitResource(this);
	}
};




ApexParser.ResourceContext = ResourceContext;

ApexParser.prototype.resource = function() {

    var localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ApexParser.RULE_resource);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 998;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.FINAL || _la===ApexParser.AT) {
            this.state = 995;
            this.variableModifier();
            this.state = 1000;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1001;
        this.classOrInterfaceType();
        this.state = 1002;
        this.variableDeclaratorId();
        this.state = 1003;
        this.match(ApexParser.ASSIGN);
        this.state = 1004;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_forControl;
    return this;
}

ForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForControlContext.prototype.constructor = ForControlContext;

ForControlContext.prototype.enhancedForControl = function() {
    return this.getTypedRuleContext(EnhancedForControlContext,0);
};

ForControlContext.prototype.forInit = function() {
    return this.getTypedRuleContext(ForInitContext,0);
};

ForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForControlContext.prototype.forUpdate = function() {
    return this.getTypedRuleContext(ForUpdateContext,0);
};

ForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterForControl(this);
	}
};

ForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitForControl(this);
	}
};




ApexParser.ForControlContext = ForControlContext;

ApexParser.prototype.forControl = function() {

    var localctx = new ForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ApexParser.RULE_forControl);
    var _la = 0; // Token type
    try {
        this.state = 1018;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1006;
            this.enhancedForControl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1008;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.SoqlLiteral) | (1 << ApexParser.FINAL))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (ApexParser.NEW - 37)) | (1 << (ApexParser.SUPER - 37)) | (1 << (ApexParser.THIS - 37)) | (1 << (ApexParser.VOID - 37)) | (1 << (ApexParser.TRIGGER_NEW - 37)) | (1 << (ApexParser.IntegerLiteral - 37)) | (1 << (ApexParser.FloatingPointLiteral - 37)) | (1 << (ApexParser.BooleanLiteral - 37)) | (1 << (ApexParser.CharacterLiteral - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ApexParser.StringLiteral - 69)) | (1 << (ApexParser.NullLiteral - 69)) | (1 << (ApexParser.LPAREN - 69)) | (1 << (ApexParser.LT - 69)) | (1 << (ApexParser.BANG - 69)) | (1 << (ApexParser.TILDE - 69)) | (1 << (ApexParser.INC - 69)) | (1 << (ApexParser.DEC - 69)) | (1 << (ApexParser.ADD - 69)) | (1 << (ApexParser.SUB - 69)))) !== 0) || _la===ApexParser.Identifier || _la===ApexParser.AT) {
                this.state = 1007;
                this.forInit();
            }

            this.state = 1010;
            this.match(ApexParser.SEMI);
            this.state = 1012;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.SoqlLiteral))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (ApexParser.NEW - 37)) | (1 << (ApexParser.SUPER - 37)) | (1 << (ApexParser.THIS - 37)) | (1 << (ApexParser.VOID - 37)) | (1 << (ApexParser.TRIGGER_NEW - 37)) | (1 << (ApexParser.IntegerLiteral - 37)) | (1 << (ApexParser.FloatingPointLiteral - 37)) | (1 << (ApexParser.BooleanLiteral - 37)) | (1 << (ApexParser.CharacterLiteral - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ApexParser.StringLiteral - 69)) | (1 << (ApexParser.NullLiteral - 69)) | (1 << (ApexParser.LPAREN - 69)) | (1 << (ApexParser.LT - 69)) | (1 << (ApexParser.BANG - 69)) | (1 << (ApexParser.TILDE - 69)) | (1 << (ApexParser.INC - 69)) | (1 << (ApexParser.DEC - 69)) | (1 << (ApexParser.ADD - 69)) | (1 << (ApexParser.SUB - 69)))) !== 0) || _la===ApexParser.Identifier) {
                this.state = 1011;
                this.expression(0);
            }

            this.state = 1014;
            this.match(ApexParser.SEMI);
            this.state = 1016;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.SoqlLiteral))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (ApexParser.NEW - 37)) | (1 << (ApexParser.SUPER - 37)) | (1 << (ApexParser.THIS - 37)) | (1 << (ApexParser.VOID - 37)) | (1 << (ApexParser.TRIGGER_NEW - 37)) | (1 << (ApexParser.IntegerLiteral - 37)) | (1 << (ApexParser.FloatingPointLiteral - 37)) | (1 << (ApexParser.BooleanLiteral - 37)) | (1 << (ApexParser.CharacterLiteral - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ApexParser.StringLiteral - 69)) | (1 << (ApexParser.NullLiteral - 69)) | (1 << (ApexParser.LPAREN - 69)) | (1 << (ApexParser.LT - 69)) | (1 << (ApexParser.BANG - 69)) | (1 << (ApexParser.TILDE - 69)) | (1 << (ApexParser.INC - 69)) | (1 << (ApexParser.DEC - 69)) | (1 << (ApexParser.ADD - 69)) | (1 << (ApexParser.SUB - 69)))) !== 0) || _la===ApexParser.Identifier) {
                this.state = 1015;
                this.forUpdate();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_forInit;
    return this;
}

ForInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForInitContext.prototype.constructor = ForInitContext;

ForInitContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

ForInitContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForInitContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterForInit(this);
	}
};

ForInitContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitForInit(this);
	}
};




ApexParser.ForInitContext = ForInitContext;

ApexParser.prototype.forInit = function() {

    var localctx = new ForInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ApexParser.RULE_forInit);
    try {
        this.state = 1022;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1020;
            this.localVariableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1021;
            this.expressionList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnhancedForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_enhancedForControl;
    return this;
}

EnhancedForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancedForControlContext.prototype.constructor = EnhancedForControlContext;

EnhancedForControlContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

EnhancedForControlContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

EnhancedForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

EnhancedForControlContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

EnhancedForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterEnhancedForControl(this);
	}
};

EnhancedForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitEnhancedForControl(this);
	}
};




ApexParser.EnhancedForControlContext = EnhancedForControlContext;

ApexParser.prototype.enhancedForControl = function() {

    var localctx = new EnhancedForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ApexParser.RULE_enhancedForControl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1027;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.FINAL || _la===ApexParser.AT) {
            this.state = 1024;
            this.variableModifier();
            this.state = 1029;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1030;
        this.type();
        this.state = 1031;
        this.variableDeclaratorId();
        this.state = 1032;
        this.match(ApexParser.COLON);
        this.state = 1033;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForUpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_forUpdate;
    return this;
}

ForUpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForUpdateContext.prototype.constructor = ForUpdateContext;

ForUpdateContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForUpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterForUpdate(this);
	}
};

ForUpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitForUpdate(this);
	}
};




ApexParser.ForUpdateContext = ForUpdateContext;

ApexParser.prototype.forUpdate = function() {

    var localctx = new ForUpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ApexParser.RULE_forUpdate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1035;
        this.expressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Db_shortcut_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_db_shortcut_expression;
    return this;
}

Db_shortcut_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Db_shortcut_expressionContext.prototype.constructor = Db_shortcut_expressionContext;

Db_shortcut_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Db_shortcut_expressionContext.prototype.DB_UPDATE = function() {
    return this.getToken(ApexParser.DB_UPDATE, 0);
};

Db_shortcut_expressionContext.prototype.DB_UPSERT = function() {
    return this.getToken(ApexParser.DB_UPSERT, 0);
};

Db_shortcut_expressionContext.prototype.DB_DELETE = function() {
    return this.getToken(ApexParser.DB_DELETE, 0);
};

Db_shortcut_expressionContext.prototype.DB_INSERT = function() {
    return this.getToken(ApexParser.DB_INSERT, 0);
};

Db_shortcut_expressionContext.prototype.DB_UNDELETE = function() {
    return this.getToken(ApexParser.DB_UNDELETE, 0);
};

Db_shortcut_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterDb_shortcut_expression(this);
	}
};

Db_shortcut_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitDb_shortcut_expression(this);
	}
};




ApexParser.Db_shortcut_expressionContext = Db_shortcut_expressionContext;

ApexParser.prototype.db_shortcut_expression = function() {

    var localctx = new Db_shortcut_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ApexParser.RULE_db_shortcut_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1037;
        _la = this._input.LA(1);
        if(!(((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (ApexParser.DB_UPDATE - 60)) | (1 << (ApexParser.DB_UPSERT - 60)) | (1 << (ApexParser.DB_DELETE - 60)) | (1 << (ApexParser.DB_INSERT - 60)) | (1 << (ApexParser.DB_UNDELETE - 60)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1038;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_parExpression;
    return this;
}

ParExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParExpressionContext.prototype.constructor = ParExpressionContext;

ParExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterParExpression(this);
	}
};

ParExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitParExpression(this);
	}
};




ApexParser.ParExpressionContext = ParExpressionContext;

ApexParser.prototype.parExpression = function() {

    var localctx = new ParExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ApexParser.RULE_parExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1040;
        this.match(ApexParser.LPAREN);
        this.state = 1041;
        this.expression(0);
        this.state = 1042;
        this.match(ApexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitExpressionList(this);
	}
};




ApexParser.ExpressionListContext = ExpressionListContext;

ApexParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ApexParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1044;
        this.expression(0);
        this.state = 1049;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 1045;
            this.match(ApexParser.COMMA);
            this.state = 1046;
            this.expression(0);
            this.state = 1051;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_statementExpression;
    return this;
}

StatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementExpressionContext.prototype.constructor = StatementExpressionContext;

StatementExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementExpressionContext.prototype.db_shortcut_expression = function() {
    return this.getTypedRuleContext(Db_shortcut_expressionContext,0);
};

StatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterStatementExpression(this);
	}
};

StatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitStatementExpression(this);
	}
};




ApexParser.StatementExpressionContext = StatementExpressionContext;

ApexParser.prototype.statementExpression = function() {

    var localctx = new StatementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ApexParser.RULE_statementExpression);
    try {
        this.state = 1054;
        switch(this._input.LA(1)) {
        case ApexParser.T__5:
        case ApexParser.T__6:
        case ApexParser.SoqlLiteral:
        case ApexParser.NEW:
        case ApexParser.SUPER:
        case ApexParser.THIS:
        case ApexParser.VOID:
        case ApexParser.TRIGGER_NEW:
        case ApexParser.IntegerLiteral:
        case ApexParser.FloatingPointLiteral:
        case ApexParser.BooleanLiteral:
        case ApexParser.CharacterLiteral:
        case ApexParser.StringLiteral:
        case ApexParser.NullLiteral:
        case ApexParser.LPAREN:
        case ApexParser.LT:
        case ApexParser.BANG:
        case ApexParser.TILDE:
        case ApexParser.INC:
        case ApexParser.DEC:
        case ApexParser.ADD:
        case ApexParser.SUB:
        case ApexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1052;
            this.expression(0);
            break;
        case ApexParser.DB_UPDATE:
        case ApexParser.DB_UPSERT:
        case ApexParser.DB_DELETE:
        case ApexParser.DB_INSERT:
        case ApexParser.DB_UNDELETE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1053;
            this.db_shortcut_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_constantExpression;
    return this;
}

ConstantExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantExpressionContext.prototype.constructor = ConstantExpressionContext;

ConstantExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstantExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterConstantExpression(this);
	}
};

ConstantExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitConstantExpression(this);
	}
};




ApexParser.ConstantExpressionContext = ConstantExpressionContext;

ApexParser.prototype.constantExpression = function() {

    var localctx = new ConstantExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ApexParser.RULE_constantExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1056;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

ExpressionContext.prototype.creator = function() {
    return this.getTypedRuleContext(CreatorContext,0);
};

ExpressionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ExpressionContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

ExpressionContext.prototype.innerCreator = function() {
    return this.getTypedRuleContext(InnerCreatorContext,0);
};

ExpressionContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

ExpressionContext.prototype.superSuffix = function() {
    return this.getTypedRuleContext(SuperSuffixContext,0);
};

ExpressionContext.prototype.explicitGenericInvocation = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitExpression(this);
	}
};



ApexParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 184;
    this.enterRecursionRule(localctx, 184, ApexParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1071;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1059;
            this.primary();
            break;

        case 2:
            this.state = 1060;
            this.match(ApexParser.NEW);
            this.state = 1061;
            this.creator();
            break;

        case 3:
            this.state = 1062;
            this.match(ApexParser.LPAREN);
            this.state = 1063;
            this.type();
            this.state = 1064;
            this.match(ApexParser.RPAREN);
            this.state = 1065;
            this.expression(17);
            break;

        case 4:
            this.state = 1067;
            _la = this._input.LA(1);
            if(!(((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (ApexParser.INC - 93)) | (1 << (ApexParser.DEC - 93)) | (1 << (ApexParser.ADD - 93)) | (1 << (ApexParser.SUB - 93)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1068;
            this.expression(15);
            break;

        case 5:
            this.state = 1069;
            _la = this._input.LA(1);
            if(!(_la===ApexParser.BANG || _la===ApexParser.TILDE)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1070;
            this.expression(14);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1174;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,132,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1172;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1073;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1074;
                    _la = this._input.LA(1);
                    if(!(((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ApexParser.MUL - 97)) | (1 << (ApexParser.DIV - 97)) | (1 << (ApexParser.MOD - 97)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1075;
                    this.expression(14);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1076;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 1077;
                    _la = this._input.LA(1);
                    if(!(_la===ApexParser.ADD || _la===ApexParser.SUB)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1078;
                    this.expression(13);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1079;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1087;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 1080;
                        this.match(ApexParser.LT);
                        this.state = 1081;
                        this.match(ApexParser.LT);
                        break;

                    case 2:
                        this.state = 1082;
                        this.match(ApexParser.GT);
                        this.state = 1083;
                        this.match(ApexParser.GT);
                        this.state = 1084;
                        this.match(ApexParser.GT);
                        break;

                    case 3:
                        this.state = 1085;
                        this.match(ApexParser.GT);
                        this.state = 1086;
                        this.match(ApexParser.GT);
                        break;

                    }
                    this.state = 1089;
                    this.expression(12);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1090;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 1091;
                    _la = this._input.LA(1);
                    if(!(((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ApexParser.GT - 81)) | (1 << (ApexParser.LT - 81)) | (1 << (ApexParser.LE - 81)) | (1 << (ApexParser.GE - 81)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1092;
                    this.expression(11);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1093;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1094;
                    _la = this._input.LA(1);
                    if(!(_la===ApexParser.EQUAL || _la===ApexParser.NOTEQUAL)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1095;
                    this.expression(9);
                    break;

                case 6:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1096;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1097;
                    this.match(ApexParser.BITAND);
                    this.state = 1098;
                    this.expression(8);
                    break;

                case 7:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1099;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1100;
                    this.match(ApexParser.CARET);
                    this.state = 1101;
                    this.expression(7);
                    break;

                case 8:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1102;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1103;
                    this.match(ApexParser.BITOR);
                    this.state = 1104;
                    this.expression(6);
                    break;

                case 9:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1105;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1106;
                    this.match(ApexParser.AND);
                    this.state = 1107;
                    this.expression(5);
                    break;

                case 10:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1108;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1109;
                    this.match(ApexParser.OR);
                    this.state = 1110;
                    this.expression(4);
                    break;

                case 11:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1111;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1112;
                    this.match(ApexParser.QUESTION);
                    this.state = 1113;
                    this.expression(0);
                    this.state = 1114;
                    this.match(ApexParser.COLON);
                    this.state = 1115;
                    this.expression(3);
                    break;

                case 12:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1117;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1118;
                    _la = this._input.LA(1);
                    if(!(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (ApexParser.ASSIGN - 80)) | (1 << (ApexParser.ADD_ASSIGN - 80)) | (1 << (ApexParser.SUB_ASSIGN - 80)) | (1 << (ApexParser.MUL_ASSIGN - 80)) | (1 << (ApexParser.DIV_ASSIGN - 80)) | (1 << (ApexParser.AND_ASSIGN - 80)) | (1 << (ApexParser.OR_ASSIGN - 80)) | (1 << (ApexParser.XOR_ASSIGN - 80)) | (1 << (ApexParser.MOD_ASSIGN - 80)) | (1 << (ApexParser.LSHIFT_ASSIGN - 80)))) !== 0) || _la===ApexParser.RSHIFT_ASSIGN || _la===ApexParser.URSHIFT_ASSIGN)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1119;
                    this.expression(1);
                    break;

                case 13:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1120;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 1121;
                    this.match(ApexParser.DOT);
                    this.state = 1122;
                    this.match(ApexParser.T__7);
                    this.state = 1123;
                    this.match(ApexParser.LPAREN);
                    this.state = 1125;
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.SoqlLiteral))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (ApexParser.NEW - 37)) | (1 << (ApexParser.SUPER - 37)) | (1 << (ApexParser.THIS - 37)) | (1 << (ApexParser.VOID - 37)) | (1 << (ApexParser.TRIGGER_NEW - 37)) | (1 << (ApexParser.IntegerLiteral - 37)) | (1 << (ApexParser.FloatingPointLiteral - 37)) | (1 << (ApexParser.BooleanLiteral - 37)) | (1 << (ApexParser.CharacterLiteral - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ApexParser.StringLiteral - 69)) | (1 << (ApexParser.NullLiteral - 69)) | (1 << (ApexParser.LPAREN - 69)) | (1 << (ApexParser.LT - 69)) | (1 << (ApexParser.BANG - 69)) | (1 << (ApexParser.TILDE - 69)) | (1 << (ApexParser.INC - 69)) | (1 << (ApexParser.DEC - 69)) | (1 << (ApexParser.ADD - 69)) | (1 << (ApexParser.SUB - 69)))) !== 0) || _la===ApexParser.Identifier) {
                        this.state = 1124;
                        this.expressionList();
                    }

                    this.state = 1127;
                    this.match(ApexParser.RPAREN);
                    break;

                case 14:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1128;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 1129;
                    this.match(ApexParser.DOT);
                    this.state = 1130;
                    this.match(ApexParser.T__5);
                    this.state = 1131;
                    this.match(ApexParser.LPAREN);
                    this.state = 1133;
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.SoqlLiteral))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (ApexParser.NEW - 37)) | (1 << (ApexParser.SUPER - 37)) | (1 << (ApexParser.THIS - 37)) | (1 << (ApexParser.VOID - 37)) | (1 << (ApexParser.TRIGGER_NEW - 37)) | (1 << (ApexParser.IntegerLiteral - 37)) | (1 << (ApexParser.FloatingPointLiteral - 37)) | (1 << (ApexParser.BooleanLiteral - 37)) | (1 << (ApexParser.CharacterLiteral - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ApexParser.StringLiteral - 69)) | (1 << (ApexParser.NullLiteral - 69)) | (1 << (ApexParser.LPAREN - 69)) | (1 << (ApexParser.LT - 69)) | (1 << (ApexParser.BANG - 69)) | (1 << (ApexParser.TILDE - 69)) | (1 << (ApexParser.INC - 69)) | (1 << (ApexParser.DEC - 69)) | (1 << (ApexParser.ADD - 69)) | (1 << (ApexParser.SUB - 69)))) !== 0) || _la===ApexParser.Identifier) {
                        this.state = 1132;
                        this.expressionList();
                    }

                    this.state = 1135;
                    this.match(ApexParser.RPAREN);
                    break;

                case 15:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1136;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 1137;
                    this.match(ApexParser.DOT);
                    this.state = 1138;
                    this.match(ApexParser.Identifier);
                    break;

                case 16:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1139;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 1140;
                    this.match(ApexParser.DOT);
                    this.state = 1141;
                    this.match(ApexParser.THIS);
                    break;

                case 17:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1142;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 1143;
                    this.match(ApexParser.DOT);
                    this.state = 1144;
                    this.match(ApexParser.NEW);
                    this.state = 1146;
                    _la = this._input.LA(1);
                    if(_la===ApexParser.LT) {
                        this.state = 1145;
                        this.nonWildcardTypeArguments();
                    }

                    this.state = 1148;
                    this.innerCreator();
                    break;

                case 18:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1149;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 1150;
                    this.match(ApexParser.DOT);
                    this.state = 1151;
                    this.match(ApexParser.SUPER);
                    this.state = 1152;
                    this.superSuffix();
                    break;

                case 19:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1153;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 1154;
                    this.match(ApexParser.DOT);
                    this.state = 1155;
                    this.explicitGenericInvocation();
                    break;

                case 20:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1156;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 1157;
                    this.match(ApexParser.LBRACK);
                    this.state = 1158;
                    this.expression(0);
                    this.state = 1159;
                    this.match(ApexParser.RBRACK);
                    break;

                case 21:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1161;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 1162;
                    this.match(ApexParser.LPAREN);
                    this.state = 1164;
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.SoqlLiteral))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (ApexParser.NEW - 37)) | (1 << (ApexParser.SUPER - 37)) | (1 << (ApexParser.THIS - 37)) | (1 << (ApexParser.VOID - 37)) | (1 << (ApexParser.TRIGGER_NEW - 37)) | (1 << (ApexParser.IntegerLiteral - 37)) | (1 << (ApexParser.FloatingPointLiteral - 37)) | (1 << (ApexParser.BooleanLiteral - 37)) | (1 << (ApexParser.CharacterLiteral - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ApexParser.StringLiteral - 69)) | (1 << (ApexParser.NullLiteral - 69)) | (1 << (ApexParser.LPAREN - 69)) | (1 << (ApexParser.LT - 69)) | (1 << (ApexParser.BANG - 69)) | (1 << (ApexParser.TILDE - 69)) | (1 << (ApexParser.INC - 69)) | (1 << (ApexParser.DEC - 69)) | (1 << (ApexParser.ADD - 69)) | (1 << (ApexParser.SUB - 69)))) !== 0) || _la===ApexParser.Identifier) {
                        this.state = 1163;
                        this.expressionList();
                    }

                    this.state = 1166;
                    this.match(ApexParser.RPAREN);
                    break;

                case 22:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1167;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1168;
                    _la = this._input.LA(1);
                    if(!(_la===ApexParser.INC || _la===ApexParser.DEC)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    break;

                case 23:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexParser.RULE_expression);
                    this.state = 1169;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1170;
                    this.match(ApexParser.INSTANCEOF);
                    this.state = 1171;
                    this.type();
                    break;

                } 
            }
            this.state = 1176;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,132,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;

PrimaryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

PrimaryContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PrimaryContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

PrimaryContext.prototype.explicitGenericInvocationSuffix = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
};

PrimaryContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

PrimaryContext.prototype.SoqlLiteral = function() {
    return this.getToken(ApexParser.SoqlLiteral, 0);
};

PrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterPrimary(this);
	}
};

PrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitPrimary(this);
	}
};




ApexParser.PrimaryContext = PrimaryContext;

ApexParser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ApexParser.RULE_primary);
    try {
        this.state = 1199;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1177;
            this.match(ApexParser.LPAREN);
            this.state = 1178;
            this.expression(0);
            this.state = 1179;
            this.match(ApexParser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1181;
            this.match(ApexParser.THIS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1182;
            this.match(ApexParser.SUPER);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1183;
            this.literal();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1184;
            this.match(ApexParser.Identifier);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1185;
            this.type();
            this.state = 1186;
            this.match(ApexParser.DOT);
            this.state = 1187;
            this.match(ApexParser.CLASS);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1189;
            this.match(ApexParser.VOID);
            this.state = 1190;
            this.match(ApexParser.DOT);
            this.state = 1191;
            this.match(ApexParser.CLASS);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1192;
            this.nonWildcardTypeArguments();
            this.state = 1196;
            switch(this._input.LA(1)) {
            case ApexParser.SUPER:
            case ApexParser.Identifier:
                this.state = 1193;
                this.explicitGenericInvocationSuffix();
                break;
            case ApexParser.THIS:
                this.state = 1194;
                this.match(ApexParser.THIS);
                this.state = 1195;
                this.arguments();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1198;
            this.match(ApexParser.SoqlLiteral);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_creator;
    return this;
}

CreatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreatorContext.prototype.constructor = CreatorContext;

CreatorContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

CreatorContext.prototype.createdName = function() {
    return this.getTypedRuleContext(CreatedNameContext,0);
};

CreatorContext.prototype.classCreatorRest = function() {
    return this.getTypedRuleContext(ClassCreatorRestContext,0);
};

CreatorContext.prototype.arrayCreatorRest = function() {
    return this.getTypedRuleContext(ArrayCreatorRestContext,0);
};

CreatorContext.prototype.mapCreatorRest = function() {
    return this.getTypedRuleContext(MapCreatorRestContext,0);
};

CreatorContext.prototype.setCreatorRest = function() {
    return this.getTypedRuleContext(SetCreatorRestContext,0);
};

CreatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterCreator(this);
	}
};

CreatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitCreator(this);
	}
};




ApexParser.CreatorContext = CreatorContext;

ApexParser.prototype.creator = function() {

    var localctx = new CreatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ApexParser.RULE_creator);
    try {
        this.state = 1212;
        switch(this._input.LA(1)) {
        case ApexParser.LT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1201;
            this.nonWildcardTypeArguments();
            this.state = 1202;
            this.createdName();
            this.state = 1203;
            this.classCreatorRest();
            break;
        case ApexParser.T__5:
        case ApexParser.T__6:
        case ApexParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1205;
            this.createdName();
            this.state = 1210;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1206;
                this.arrayCreatorRest();
                break;

            case 2:
                this.state = 1207;
                this.classCreatorRest();
                break;

            case 3:
                this.state = 1208;
                this.mapCreatorRest();
                break;

            case 4:
                this.state = 1209;
                this.setCreatorRest();
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreatedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_createdName;
    return this;
}

CreatedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreatedNameContext.prototype.constructor = CreatedNameContext;

CreatedNameContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexParser.Identifier);
    } else {
        return this.getToken(ApexParser.Identifier, i);
    }
};


CreatedNameContext.prototype.typeArgumentsOrDiamond = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentsOrDiamondContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,i);
    }
};

CreatedNameContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

CreatedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterCreatedName(this);
	}
};

CreatedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitCreatedName(this);
	}
};




ApexParser.CreatedNameContext = CreatedNameContext;

ApexParser.prototype.createdName = function() {

    var localctx = new CreatedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, ApexParser.RULE_createdName);
    var _la = 0; // Token type
    try {
        this.state = 1231;
        switch(this._input.LA(1)) {
        case ApexParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1214;
            this.match(ApexParser.Identifier);
            this.state = 1216;
            _la = this._input.LA(1);
            if(_la===ApexParser.LT) {
                this.state = 1215;
                this.typeArgumentsOrDiamond();
            }

            this.state = 1225;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ApexParser.DOT) {
                this.state = 1218;
                this.match(ApexParser.DOT);
                this.state = 1219;
                this.match(ApexParser.Identifier);
                this.state = 1221;
                _la = this._input.LA(1);
                if(_la===ApexParser.LT) {
                    this.state = 1220;
                    this.typeArgumentsOrDiamond();
                }

                this.state = 1227;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case ApexParser.T__6:
            this.enterOuterAlt(localctx, 2);
            this.state = 1228;
            this.primitiveType();
            break;
        case ApexParser.T__5:
            this.enterOuterAlt(localctx, 3);
            this.state = 1229;
            this.match(ApexParser.T__5);
            this.state = 1230;
            this.typeArgumentsOrDiamond();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InnerCreatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_innerCreator;
    return this;
}

InnerCreatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InnerCreatorContext.prototype.constructor = InnerCreatorContext;

InnerCreatorContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

InnerCreatorContext.prototype.classCreatorRest = function() {
    return this.getTypedRuleContext(ClassCreatorRestContext,0);
};

InnerCreatorContext.prototype.nonWildcardTypeArgumentsOrDiamond = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsOrDiamondContext,0);
};

InnerCreatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterInnerCreator(this);
	}
};

InnerCreatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitInnerCreator(this);
	}
};




ApexParser.InnerCreatorContext = InnerCreatorContext;

ApexParser.prototype.innerCreator = function() {

    var localctx = new InnerCreatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ApexParser.RULE_innerCreator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1233;
        this.match(ApexParser.Identifier);
        this.state = 1235;
        _la = this._input.LA(1);
        if(_la===ApexParser.LT) {
            this.state = 1234;
            this.nonWildcardTypeArgumentsOrDiamond();
        }

        this.state = 1237;
        this.classCreatorRest();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_arrayCreatorRest;
    return this;
}

ArrayCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayCreatorRestContext.prototype.constructor = ArrayCreatorRestContext;

ArrayCreatorRestContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

ArrayCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterArrayCreatorRest(this);
	}
};

ArrayCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitArrayCreatorRest(this);
	}
};




ApexParser.ArrayCreatorRestContext = ArrayCreatorRestContext;

ApexParser.prototype.arrayCreatorRest = function() {

    var localctx = new ArrayCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, ApexParser.RULE_arrayCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1239;
        this.match(ApexParser.LBRACK);
        this.state = 1267;
        switch(this._input.LA(1)) {
        case ApexParser.RBRACK:
            this.state = 1240;
            this.match(ApexParser.RBRACK);
            this.state = 1245;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ApexParser.LBRACK) {
                this.state = 1241;
                this.match(ApexParser.LBRACK);
                this.state = 1242;
                this.match(ApexParser.RBRACK);
                this.state = 1247;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1248;
            this.arrayInitializer();
            break;
        case ApexParser.T__5:
        case ApexParser.T__6:
        case ApexParser.SoqlLiteral:
        case ApexParser.NEW:
        case ApexParser.SUPER:
        case ApexParser.THIS:
        case ApexParser.VOID:
        case ApexParser.TRIGGER_NEW:
        case ApexParser.IntegerLiteral:
        case ApexParser.FloatingPointLiteral:
        case ApexParser.BooleanLiteral:
        case ApexParser.CharacterLiteral:
        case ApexParser.StringLiteral:
        case ApexParser.NullLiteral:
        case ApexParser.LPAREN:
        case ApexParser.LT:
        case ApexParser.BANG:
        case ApexParser.TILDE:
        case ApexParser.INC:
        case ApexParser.DEC:
        case ApexParser.ADD:
        case ApexParser.SUB:
        case ApexParser.Identifier:
            this.state = 1249;
            this.expression(0);
            this.state = 1250;
            this.match(ApexParser.RBRACK);
            this.state = 1257;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,143,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1251;
                    this.match(ApexParser.LBRACK);
                    this.state = 1252;
                    this.expression(0);
                    this.state = 1253;
                    this.match(ApexParser.RBRACK); 
                }
                this.state = 1259;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,143,this._ctx);
            }

            this.state = 1264;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,144,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1260;
                    this.match(ApexParser.LBRACK);
                    this.state = 1261;
                    this.match(ApexParser.RBRACK); 
                }
                this.state = 1266;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,144,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_mapCreatorRest;
    return this;
}

MapCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapCreatorRestContext.prototype.constructor = MapCreatorRestContext;

MapCreatorRestContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

MapCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

MapCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterMapCreatorRest(this);
	}
};

MapCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitMapCreatorRest(this);
	}
};




ApexParser.MapCreatorRestContext = MapCreatorRestContext;

ApexParser.prototype.mapCreatorRest = function() {

    var localctx = new MapCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, ApexParser.RULE_mapCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1269;
        this.match(ApexParser.LBRACE);
        this.state = 1294;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.SoqlLiteral))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (ApexParser.NEW - 37)) | (1 << (ApexParser.SUPER - 37)) | (1 << (ApexParser.THIS - 37)) | (1 << (ApexParser.VOID - 37)) | (1 << (ApexParser.TRIGGER_NEW - 37)) | (1 << (ApexParser.IntegerLiteral - 37)) | (1 << (ApexParser.FloatingPointLiteral - 37)) | (1 << (ApexParser.BooleanLiteral - 37)) | (1 << (ApexParser.CharacterLiteral - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ApexParser.StringLiteral - 69)) | (1 << (ApexParser.NullLiteral - 69)) | (1 << (ApexParser.LPAREN - 69)) | (1 << (ApexParser.LT - 69)) | (1 << (ApexParser.BANG - 69)) | (1 << (ApexParser.TILDE - 69)) | (1 << (ApexParser.INC - 69)) | (1 << (ApexParser.DEC - 69)) | (1 << (ApexParser.ADD - 69)) | (1 << (ApexParser.SUB - 69)))) !== 0) || _la===ApexParser.Identifier) {
            this.state = 1272;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1270;
                this.literal();
                break;

            case 2:
                this.state = 1271;
                this.expression(0);
                break;

            }
            this.state = 1274;
            this.match(ApexParser.T__8);
            this.state = 1277;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1275;
                this.literal();
                break;

            case 2:
                this.state = 1276;
                this.expression(0);
                break;

            }
            this.state = 1291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ApexParser.COMMA) {
                this.state = 1279;
                this.match(ApexParser.COMMA);
                this.state = 1282;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1280;
                    this.literal();
                    break;

                case 2:
                    this.state = 1281;
                    this.expression(0);
                    break;

                }
                this.state = 1284;
                this.match(ApexParser.T__8);
                this.state = 1287;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1285;
                    this.literal();
                    break;

                case 2:
                    this.state = 1286;
                    this.expression(0);
                    break;

                }
                this.state = 1293;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1296;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_setCreatorRest;
    return this;
}

SetCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetCreatorRestContext.prototype.constructor = SetCreatorRestContext;

SetCreatorRestContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

SetCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SetCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterSetCreatorRest(this);
	}
};

SetCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitSetCreatorRest(this);
	}
};




ApexParser.SetCreatorRestContext = SetCreatorRestContext;

ApexParser.prototype.setCreatorRest = function() {

    var localctx = new SetCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, ApexParser.RULE_setCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1298;
        this.match(ApexParser.LBRACE);
        this.state = 1301;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1299;
            this.literal();
            break;

        case 2:
            this.state = 1300;
            this.expression(0);
            break;

        }
        this.state = 1310;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexParser.COMMA) {
            this.state = 1303;
            this.match(ApexParser.COMMA);
            this.state = 1306;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1304;
                this.literal();
                break;

            case 2:
                this.state = 1305;
                this.expression(0);
                break;

            }
            this.state = 1312;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1313;
        this.match(ApexParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_classCreatorRest;
    return this;
}

ClassCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassCreatorRestContext.prototype.constructor = ClassCreatorRestContext;

ClassCreatorRestContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ClassCreatorRestContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterClassCreatorRest(this);
	}
};

ClassCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitClassCreatorRest(this);
	}
};




ApexParser.ClassCreatorRestContext = ClassCreatorRestContext;

ApexParser.prototype.classCreatorRest = function() {

    var localctx = new ClassCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, ApexParser.RULE_classCreatorRest);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1315;
        this.arguments();
        this.state = 1317;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
        if(la_===1) {
            this.state = 1316;
            this.classBody();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitGenericInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_explicitGenericInvocation;
    return this;
}

ExplicitGenericInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitGenericInvocationContext.prototype.constructor = ExplicitGenericInvocationContext;

ExplicitGenericInvocationContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

ExplicitGenericInvocationContext.prototype.explicitGenericInvocationSuffix = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
};

ExplicitGenericInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterExplicitGenericInvocation(this);
	}
};

ExplicitGenericInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitExplicitGenericInvocation(this);
	}
};




ApexParser.ExplicitGenericInvocationContext = ExplicitGenericInvocationContext;

ApexParser.prototype.explicitGenericInvocation = function() {

    var localctx = new ExplicitGenericInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, ApexParser.RULE_explicitGenericInvocation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1319;
        this.nonWildcardTypeArguments();
        this.state = 1320;
        this.explicitGenericInvocationSuffix();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonWildcardTypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_nonWildcardTypeArguments;
    return this;
}

NonWildcardTypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonWildcardTypeArgumentsContext.prototype.constructor = NonWildcardTypeArgumentsContext;

NonWildcardTypeArgumentsContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

NonWildcardTypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterNonWildcardTypeArguments(this);
	}
};

NonWildcardTypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitNonWildcardTypeArguments(this);
	}
};




ApexParser.NonWildcardTypeArgumentsContext = NonWildcardTypeArgumentsContext;

ApexParser.prototype.nonWildcardTypeArguments = function() {

    var localctx = new NonWildcardTypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, ApexParser.RULE_nonWildcardTypeArguments);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1322;
        this.match(ApexParser.LT);
        this.state = 1323;
        this.typeList();
        this.state = 1324;
        this.match(ApexParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentsOrDiamondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_typeArgumentsOrDiamond;
    return this;
}

TypeArgumentsOrDiamondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsOrDiamondContext.prototype.constructor = TypeArgumentsOrDiamondContext;

TypeArgumentsOrDiamondContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

TypeArgumentsOrDiamondContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterTypeArgumentsOrDiamond(this);
	}
};

TypeArgumentsOrDiamondContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitTypeArgumentsOrDiamond(this);
	}
};




ApexParser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext;

ApexParser.prototype.typeArgumentsOrDiamond = function() {

    var localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, ApexParser.RULE_typeArgumentsOrDiamond);
    try {
        this.state = 1329;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1326;
            this.match(ApexParser.LT);
            this.state = 1327;
            this.match(ApexParser.GT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1328;
            this.typeArguments();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonWildcardTypeArgumentsOrDiamondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_nonWildcardTypeArgumentsOrDiamond;
    return this;
}

NonWildcardTypeArgumentsOrDiamondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonWildcardTypeArgumentsOrDiamondContext.prototype.constructor = NonWildcardTypeArgumentsOrDiamondContext;

NonWildcardTypeArgumentsOrDiamondContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

NonWildcardTypeArgumentsOrDiamondContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterNonWildcardTypeArgumentsOrDiamond(this);
	}
};

NonWildcardTypeArgumentsOrDiamondContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitNonWildcardTypeArgumentsOrDiamond(this);
	}
};




ApexParser.NonWildcardTypeArgumentsOrDiamondContext = NonWildcardTypeArgumentsOrDiamondContext;

ApexParser.prototype.nonWildcardTypeArgumentsOrDiamond = function() {

    var localctx = new NonWildcardTypeArgumentsOrDiamondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, ApexParser.RULE_nonWildcardTypeArgumentsOrDiamond);
    try {
        this.state = 1334;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1331;
            this.match(ApexParser.LT);
            this.state = 1332;
            this.match(ApexParser.GT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1333;
            this.nonWildcardTypeArguments();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SuperSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_superSuffix;
    return this;
}

SuperSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuperSuffixContext.prototype.constructor = SuperSuffixContext;

SuperSuffixContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

SuperSuffixContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

SuperSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterSuperSuffix(this);
	}
};

SuperSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitSuperSuffix(this);
	}
};




ApexParser.SuperSuffixContext = SuperSuffixContext;

ApexParser.prototype.superSuffix = function() {

    var localctx = new SuperSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, ApexParser.RULE_superSuffix);
    try {
        this.state = 1342;
        switch(this._input.LA(1)) {
        case ApexParser.LPAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1336;
            this.arguments();
            break;
        case ApexParser.DOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1337;
            this.match(ApexParser.DOT);
            this.state = 1338;
            this.match(ApexParser.Identifier);
            this.state = 1340;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
            if(la_===1) {
                this.state = 1339;
                this.arguments();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitGenericInvocationSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_explicitGenericInvocationSuffix;
    return this;
}

ExplicitGenericInvocationSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitGenericInvocationSuffixContext.prototype.constructor = ExplicitGenericInvocationSuffixContext;

ExplicitGenericInvocationSuffixContext.prototype.superSuffix = function() {
    return this.getTypedRuleContext(SuperSuffixContext,0);
};

ExplicitGenericInvocationSuffixContext.prototype.Identifier = function() {
    return this.getToken(ApexParser.Identifier, 0);
};

ExplicitGenericInvocationSuffixContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ExplicitGenericInvocationSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterExplicitGenericInvocationSuffix(this);
	}
};

ExplicitGenericInvocationSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitExplicitGenericInvocationSuffix(this);
	}
};




ApexParser.ExplicitGenericInvocationSuffixContext = ExplicitGenericInvocationSuffixContext;

ApexParser.prototype.explicitGenericInvocationSuffix = function() {

    var localctx = new ExplicitGenericInvocationSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, ApexParser.RULE_explicitGenericInvocationSuffix);
    try {
        this.state = 1348;
        switch(this._input.LA(1)) {
        case ApexParser.SUPER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1344;
            this.match(ApexParser.SUPER);
            this.state = 1345;
            this.superSuffix();
            break;
        case ApexParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1346;
            this.match(ApexParser.Identifier);
            this.state = 1347;
            this.arguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexListener ) {
        listener.exitArguments(this);
	}
};




ApexParser.ArgumentsContext = ArgumentsContext;

ApexParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, ApexParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1350;
        this.match(ApexParser.LPAREN);
        this.state = 1352;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexParser.T__5) | (1 << ApexParser.T__6) | (1 << ApexParser.SoqlLiteral))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (ApexParser.NEW - 37)) | (1 << (ApexParser.SUPER - 37)) | (1 << (ApexParser.THIS - 37)) | (1 << (ApexParser.VOID - 37)) | (1 << (ApexParser.TRIGGER_NEW - 37)) | (1 << (ApexParser.IntegerLiteral - 37)) | (1 << (ApexParser.FloatingPointLiteral - 37)) | (1 << (ApexParser.BooleanLiteral - 37)) | (1 << (ApexParser.CharacterLiteral - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ApexParser.StringLiteral - 69)) | (1 << (ApexParser.NullLiteral - 69)) | (1 << (ApexParser.LPAREN - 69)) | (1 << (ApexParser.LT - 69)) | (1 << (ApexParser.BANG - 69)) | (1 << (ApexParser.TILDE - 69)) | (1 << (ApexParser.INC - 69)) | (1 << (ApexParser.DEC - 69)) | (1 << (ApexParser.ADD - 69)) | (1 << (ApexParser.SUB - 69)))) !== 0) || _la===ApexParser.Identifier) {
            this.state = 1351;
            this.expressionList();
        }

        this.state = 1354;
        this.match(ApexParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ApexParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 92:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ApexParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 13);
		case 1:
			return this.precpred(this._ctx, 12);
		case 2:
			return this.precpred(this._ctx, 11);
		case 3:
			return this.precpred(this._ctx, 10);
		case 4:
			return this.precpred(this._ctx, 8);
		case 5:
			return this.precpred(this._ctx, 7);
		case 6:
			return this.precpred(this._ctx, 6);
		case 7:
			return this.precpred(this._ctx, 5);
		case 8:
			return this.precpred(this._ctx, 4);
		case 9:
			return this.precpred(this._ctx, 3);
		case 10:
			return this.precpred(this._ctx, 2);
		case 11:
			return this.precpred(this._ctx, 1);
		case 12:
			return this.precpred(this._ctx, 27);
		case 13:
			return this.precpred(this._ctx, 26);
		case 14:
			return this.precpred(this._ctx, 25);
		case 15:
			return this.precpred(this._ctx, 24);
		case 16:
			return this.precpred(this._ctx, 23);
		case 17:
			return this.precpred(this._ctx, 22);
		case 18:
			return this.precpred(this._ctx, 21);
		case 19:
			return this.precpred(this._ctx, 20);
		case 20:
			return this.precpred(this._ctx, 19);
		case 21:
			return this.precpred(this._ctx, 16);
		case 22:
			return this.precpred(this._ctx, 9);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ApexParser = ApexParser;
